<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/neuroview/Navigation.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/neuroview/Navigation.kt" />
              <option name="originalContent" value="package com.example.neuroview&#10;&#10;import androidx.compose.runtime.Composable&#10;import androidx.navigation.NavHostController&#10;import androidx.navigation.NavType&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import androidx.navigation.navArgument&#10;import com.example.neuroview.screens.DashboardScreen&#10;import com.example.neuroview.screens.DetailsScreen&#10;import com.example.neuroview.screens.HomeScreen&#10;import com.example.neuroview.screens.PastRecordsScreen&#10;import com.example.neuroview.screens.UploadImageScreen&#10;&#10;object Routes {&#10;    const val HOME = &quot;home&quot;&#10;    const val DASHBOARD = &quot;dashboard&quot;&#10;    const val UPLOAD_IMAGE = &quot;upload_image&quot;&#10;    const val DETAILS = &quot;details&quot;&#10;    const val PAST_RECORDS = &quot;past_records&quot;&#10;    const val RESULT = &quot;result&quot;&#10;    const val RESULT_WITH_DATA = &quot;result?predictionJson={predictionJson}&amp;imageUri={imageUri}&quot;&#10;}&#10;&#10;@Composable&#10;fun NeuroViewNavigation(navController: NavHostController) {&#10;    NavHost(&#10;        navController = navController,&#10;        startDestination = Routes.HOME&#10;    ) {&#10;        composable(Routes.HOME) {&#10;            HomeScreen(navController = navController)&#10;        }&#10;        composable(Routes.DASHBOARD) {&#10;            DashboardScreen(navController = navController)&#10;        }&#10;        composable(Routes.UPLOAD_IMAGE) {&#10;            UploadImageScreen(navController = navController)&#10;        }&#10;        composable(Routes.DETAILS) {&#10;            DetailsScreen(navController = navController)&#10;        }&#10;        composable(Routes.PAST_RECORDS) {&#10;            PastRecordsScreen(navController = navController)&#10;        }&#10;        composable(Routes.RESULT) {&#10;            com.example.neuroview.screens.ResultScreen(&#10;                navController = navController,&#10;                predictionJson = null,&#10;                imageUri = null&#10;            )&#10;        }&#10;        composable(&#10;            route = Routes.RESULT_WITH_DATA,&#10;            arguments = listOf(&#10;                navArgument(&quot;predictionJson&quot;) {&#10;                    type = NavType.StringType&#10;                    nullable = true&#10;                    defaultValue = null&#10;                },&#10;                navArgument(&quot;imageUri&quot;) {&#10;                    type = NavType.StringType&#10;                    nullable = true&#10;                    defaultValue = null&#10;                }&#10;            )&#10;        ) { backStackEntry -&gt;&#10;            val predictionJson = backStackEntry.arguments?.getString(&quot;predictionJson&quot;)&#10;            val imageUri = backStackEntry.arguments?.getString(&quot;imageUri&quot;)&#10;            com.example.neuroview.screens.ResultScreen(&#10;                navController = navController,&#10;                predictionJson = predictionJson,&#10;                imageUri = imageUri&#10;            )&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.neuroview&#10;&#10;import androidx.compose.runtime.Composable&#10;import androidx.navigation.NavHostController&#10;import androidx.navigation.NavType&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import androidx.navigation.navArgument&#10;import com.example.neuroview.screens.DashboardScreen&#10;import com.example.neuroview.screens.DetailsScreen&#10;import com.example.neuroview.screens.HomeScreen&#10;import com.example.neuroview.screens.PastRecordsScreen&#10;import com.example.neuroview.screens.UploadImageScreen&#10;import com.example.neuroview.screens.TumorDetailScreen&#10;&#10;object Routes {&#10;    const val HOME = &quot;home&quot;&#10;    const val DASHBOARD = &quot;dashboard&quot;&#10;    const val UPLOAD_IMAGE = &quot;upload_image&quot;&#10;    const val DETAILS = &quot;details&quot;&#10;    const val PAST_RECORDS = &quot;past_records&quot;&#10;    const val RESULT = &quot;result&quot;&#10;    const val RESULT_WITH_DATA = &quot;result?predictionJson={predictionJson}&amp;imageUri={imageUri}&quot;&#10;    const val TUMOR_DETAIL = &quot;tumor_detail&quot;&#10;&#10;    fun tumorDetail(tumorName: String) = &quot;tumor_detail/$tumorName&quot;&#10;}&#10;&#10;@Composable&#10;fun NeuroViewNavigation(navController: NavHostController) {&#10;    NavHost(&#10;        navController = navController,&#10;        startDestination = Routes.HOME&#10;    ) {&#10;        composable(Routes.HOME) {&#10;            HomeScreen(navController = navController)&#10;        }&#10;        composable(Routes.DASHBOARD) {&#10;            DashboardScreen(navController = navController)&#10;        }&#10;        composable(Routes.UPLOAD_IMAGE) {&#10;            UploadImageScreen(navController = navController)&#10;        }&#10;        composable(Routes.DETAILS) {&#10;            DetailsScreen(navController = navController)&#10;        }&#10;        composable(Routes.PAST_RECORDS) {&#10;            PastRecordsScreen(navController = navController)&#10;        }&#10;        composable(Routes.RESULT) {&#10;            com.example.neuroview.screens.ResultScreen(&#10;                navController = navController,&#10;                predictionJson = null,&#10;                imageUri = null&#10;            )&#10;        }&#10;        composable(&#10;            route = Routes.RESULT_WITH_DATA,&#10;            arguments = listOf(&#10;                navArgument(&quot;predictionJson&quot;) {&#10;                    type = NavType.StringType&#10;                    nullable = true&#10;                    defaultValue = null&#10;                },&#10;                navArgument(&quot;imageUri&quot;) {&#10;                    type = NavType.StringType&#10;                    nullable = true&#10;                    defaultValue = null&#10;                }&#10;            )&#10;        ) { backStackEntry -&gt;&#10;            val predictionJson = backStackEntry.arguments?.getString(&quot;predictionJson&quot;)&#10;            val imageUri = backStackEntry.arguments?.getString(&quot;imageUri&quot;)&#10;            com.example.neuroview.screens.ResultScreen(&#10;                navController = navController,&#10;                predictionJson = predictionJson,&#10;                imageUri = imageUri&#10;            )&#10;        }&#10;        composable(&#10;            route = &quot;tumor_detail/{tumorName}&quot;,&#10;            arguments = listOf(navArgument(&quot;tumorName&quot;) { type = NavType.StringType })&#10;        ) { backStackEntry -&gt;&#10;            val tumorName = backStackEntry.arguments?.getString(&quot;tumorName&quot;)&#10;            TumorDetailScreen(&#10;                navController = navController,&#10;                tumorName = tumorName&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>