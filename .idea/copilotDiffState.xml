<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/neuroview/screens/UploadImageScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/neuroview/screens/UploadImageScreen.kt" />
              <option name="originalContent" value="package com.example.neuroview.screens&#10;&#10;import android.net.Uri&#10;import android.provider.OpenableColumns&#10;import android.widget.Toast&#10;import androidx.activity.compose.rememberLauncherForActivityResult&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.compose.foundation.Canvas&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Delete&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.geometry.CornerRadius&#10;import androidx.compose.ui.geometry.Size&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.PathEffect&#10;import androidx.compose.ui.graphics.drawscope.Stroke&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;import androidx.navigation.compose.rememberNavController&#10;import com.example.neuroview.R&#10;import com.example.neuroview.Routes&#10;import com.example.neuroview.components.TopAppBar&#10;import com.example.neuroview.network.ApiService&#10;import com.example.neuroview.ui.theme.NeuroViewTheme&#10;import kotlinx.coroutines.launch&#10;&#10;@Composable&#10;fun UploadImageScreen(navController: NavController) {&#10;    val context = LocalContext.current&#10;    val coroutineScope = rememberCoroutineScope()&#10;    var selectedImageUri by remember { mutableStateOf&lt;Uri?&gt;(null) }&#10;    var isLoading by remember { mutableStateOf(false) }&#10;    val apiService = remember { ApiService() }&#10;&#10;    val imagePickerLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.GetContent()&#10;    ) { uri -&gt;&#10;        uri?.let {&#10;            selectedImageUri = it&#10;            Toast.makeText(context, &quot;Image selected&quot;, Toast.LENGTH_SHORT).show()&#10;        }&#10;    }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                backgroundColor = Color.Black,&#10;                textColor = Color.White,&#10;                logoSize = 42,&#10;                titleFontSize = 28&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .background(Color.Black)&#10;                .padding(paddingValues)&#10;                .padding(16.dp),&#10;            verticalArrangement = Arrangement.Top,&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                modifier = Modifier.fillMaxWidth()&#10;            ) {&#10;                Box(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    Text(&#10;                        text = &quot;UPLOAD&quot;,&#10;                        fontSize = 20.sp,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = Color(0xFF737373)&#10;                    )&#10;                    IconButton(&#10;                        onClick = {&#10;                            navController.navigate(Routes.DASHBOARD) {&#10;                                popUpTo(Routes.DASHBOARD) { inclusive = false }&#10;                            }&#10;                        },&#10;                        modifier = Modifier.align(Alignment.CenterStart)&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.ArrowBack,&#10;                            contentDescription = &quot;Back&quot;,&#10;                            tint = Color(0xFF737373)&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            selectedImageUri?.let { uri -&gt;&#10;                ImageInfoBox(uri = uri, onDelete = { selectedImageUri = null })&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;            }&#10;&#10;            DashedBorderBox(onClick = {&#10;                imagePickerLauncher.launch(&quot;image/*&quot;)&#10;            })&#10;&#10;            Spacer(modifier = Modifier.height(32.dp))&#10;&#10;            Button(&#10;                onClick = {&#10;                    selectedImageUri?.let { uri -&gt;&#10;                        // Get the file name from the URI&#10;                        val fileName = run {&#10;                            var name = &quot;Unknown Image&quot;&#10;                            val cursor = context.contentResolver.query(uri, null, null, null, null)&#10;                            cursor?.use {&#10;                                val nameIndex = it.getColumnIndex(OpenableColumns.DISPLAY_NAME)&#10;                                if (it.moveToFirst() &amp;&amp; nameIndex != -1) {&#10;                                    name = it.getString(nameIndex)&#10;                                }&#10;                            }&#10;                            name&#10;                        }&#10;&#10;                        isLoading = true&#10;                        coroutineScope.launch {&#10;                            try {&#10;                                // Use the new uploadImage method instead of createImage&#10;                                val result = apiService.uploadImage(context, uri, fileName)&#10;                                result.fold(&#10;                                    onSuccess = { response -&gt;&#10;                                        Toast.makeText(context, &quot;Image uploaded successfully!&quot;, Toast.LENGTH_SHORT).show()&#10;                                        // Optionally navigate to next screen or clear the selection&#10;                                        selectedImageUri = null&#10;                                    },&#10;                                    onFailure = { error -&gt;&#10;                                        Toast.makeText(context, &quot;Error: ${error.message}&quot;, Toast.LENGTH_LONG).show()&#10;                                    }&#10;                                )&#10;                            } catch (e: Exception) {&#10;                                Toast.makeText(context, &quot;Network error: ${e.message}&quot;, Toast.LENGTH_LONG).show()&#10;                            } finally {&#10;                                isLoading = false&#10;                            }&#10;                        }&#10;                    }&#10;                },&#10;                colors = ButtonDefaults.buttonColors(containerColor = Color.White),&#10;                modifier = Modifier.fillMaxWidth(),&#10;                enabled = selectedImageUri != null &amp;&amp; !isLoading&#10;            ) {&#10;                if (isLoading) {&#10;                    CircularProgressIndicator(&#10;                        modifier = Modifier.size(16.dp),&#10;                        color = Color.Black,&#10;                        strokeWidth = 2.dp&#10;                    )&#10;                    Spacer(modifier = Modifier.width(8.dp))&#10;                    Text(&quot;Uploading...&quot;, color = Color.Black)&#10;                } else {&#10;                    Text(&quot;Upload &amp; Start Analysis&quot;, color = Color.Black)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun DashedBorderBox(onClick: () -&gt; Unit) {&#10;    val cornerRadius = 12.dp&#10;    val boxHeight = 550.dp&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .height(boxHeight)&#10;            .padding(4.dp)&#10;            .clickable { onClick() },&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Canvas(modifier = Modifier.fillMaxSize()) {&#10;            val dashLength = 10.dp.toPx()&#10;            val gapLength = 10.dp.toPx()&#10;            drawRoundRect(&#10;                color = Color.White,&#10;                size = Size(size.width, size.height),&#10;                cornerRadius = CornerRadius(cornerRadius.toPx(), cornerRadius.toPx()),&#10;                style = Stroke(&#10;                    width = 2.dp.toPx(),&#10;                    pathEffect = PathEffect.dashPathEffect(&#10;                        floatArrayOf(dashLength, gapLength), 0f&#10;                    )&#10;                )&#10;            )&#10;        }&#10;&#10;        Column(&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            modifier = Modifier.padding(16.dp)&#10;        ) {&#10;            Icon(&#10;                painter = painterResource(id = R.drawable.ic_cloud_upload),&#10;                contentDescription = &quot;Upload Icon&quot;,&#10;                tint = Color.White,&#10;                modifier = Modifier.size(48.dp)&#10;            )&#10;            Text(&#10;                text = &quot;Browse Files&quot;,&#10;                fontSize = 16.sp,&#10;                color = Color.White,&#10;                fontWeight = FontWeight.SemiBold&#10;            )&#10;            Spacer(modifier = Modifier.height(4.dp))&#10;            Text(&#10;                text = &quot;Supported Formats: JPEG, PNG&quot;,&#10;                fontSize = 12.sp,&#10;                color = Color.White&#10;            )&#10;            Spacer(modifier = Modifier.height(2.dp))&#10;            Text(&#10;                text = &quot;Upload Limit: 1 image file only.&quot;,&#10;                fontSize = 12.sp,&#10;                color = Color.White&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ImageInfoBox(uri: Uri, onDelete: () -&gt; Unit) {&#10;    val context = LocalContext.current&#10;&#10;    val fileName = remember(uri) {&#10;        var name = &quot;Unknown&quot;&#10;        val cursor = context.contentResolver.query(uri, null, null, null, null)&#10;        cursor?.use {&#10;            val nameIndex = it.getColumnIndex(OpenableColumns.DISPLAY_NAME)&#10;            if (it.moveToFirst() &amp;&amp; nameIndex != -1) {&#10;                name = it.getString(nameIndex)&#10;            }&#10;        }&#10;        name&#10;    }&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .height(80.dp)&#10;            .border(width = 2.dp, color = Color.White, shape = MaterialTheme.shapes.medium)&#10;            .padding(horizontal = 12.dp, vertical = 8.dp)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier.fillMaxSize(),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Text(&#10;                text = fileName,&#10;                color = Color.White,&#10;                fontSize = 14.sp,&#10;                maxLines = 1,&#10;                modifier = Modifier.weight(1f)&#10;            )&#10;            IconButton(onClick = { onDelete() }) {&#10;                Icon(&#10;                    imageVector = Icons.Default.Delete,&#10;                    contentDescription = &quot;Delete&quot;,&#10;                    tint = Color.White&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun UploadImageScreenPreview() {&#10;    NeuroViewTheme {&#10;        UploadImageScreen(rememberNavController())&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.neuroview.screens&#10;&#10;import android.net.Uri&#10;import android.provider.OpenableColumns&#10;import android.widget.Toast&#10;import androidx.activity.compose.rememberLauncherForActivityResult&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.compose.foundation.Canvas&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Delete&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.geometry.CornerRadius&#10;import androidx.compose.ui.geometry.Size&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.PathEffect&#10;import androidx.compose.ui.graphics.drawscope.Stroke&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;import androidx.navigation.compose.rememberNavController&#10;import com.example.neuroview.R&#10;import com.example.neuroview.Routes&#10;import com.example.neuroview.components.TopAppBar&#10;import com.example.neuroview.network.ApiService&#10;import com.example.neuroview.ui.theme.NeuroViewTheme&#10;import kotlinx.coroutines.launch&#10;&#10;@Composable&#10;fun UploadImageScreen(navController: NavController) {&#10;    val context = LocalContext.current&#10;    val coroutineScope = rememberCoroutineScope()&#10;    var selectedImageUri by remember { mutableStateOf&lt;Uri?&gt;(null) }&#10;    var isLoading by remember { mutableStateOf(false) }&#10;    val apiService = remember { ApiService() }&#10;&#10;    val imagePickerLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.GetContent()&#10;    ) { uri -&gt;&#10;        uri?.let {&#10;            selectedImageUri = it&#10;            Toast.makeText(context, &quot;Image selected&quot;, Toast.LENGTH_SHORT).show()&#10;        }&#10;    }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                backgroundColor = Color.Black,&#10;                textColor = Color.White,&#10;                logoSize = 42,&#10;                titleFontSize = 28&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .background(Color.Black)&#10;                .padding(paddingValues)&#10;                .padding(16.dp),&#10;            verticalArrangement = Arrangement.Top,&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                modifier = Modifier.fillMaxWidth()&#10;            ) {&#10;                Box(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    Text(&#10;                        text = &quot;UPLOAD&quot;,&#10;                        fontSize = 20.sp,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = Color(0xFF737373)&#10;                    )&#10;                    IconButton(&#10;                        onClick = {&#10;                            navController.navigate(Routes.DASHBOARD) {&#10;                                popUpTo(Routes.DASHBOARD) { inclusive = false }&#10;                            }&#10;                        },&#10;                        modifier = Modifier.align(Alignment.CenterStart)&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.ArrowBack,&#10;                            contentDescription = &quot;Back&quot;,&#10;                            tint = Color(0xFF737373)&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            selectedImageUri?.let { uri -&gt;&#10;                ImageInfoBox(uri = uri, onDelete = { selectedImageUri = null })&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;            }&#10;&#10;            DashedBorderBox(onClick = {&#10;                imagePickerLauncher.launch(&quot;image/*&quot;)&#10;            })&#10;&#10;            Spacer(modifier = Modifier.height(32.dp))&#10;&#10;            Button(&#10;                onClick = {&#10;                    selectedImageUri?.let { uri -&gt;&#10;                        // Get the file name from the URI&#10;                        val fileName = run {&#10;                            var name = &quot;Unknown Image&quot;&#10;                            val cursor = context.contentResolver.query(uri, null, null, null, null)&#10;                            cursor?.use {&#10;                                val nameIndex = it.getColumnIndex(OpenableColumns.DISPLAY_NAME)&#10;                                if (it.moveToFirst() &amp;&amp; nameIndex != -1) {&#10;                                    name = it.getString(nameIndex)&#10;                                }&#10;                            }&#10;                            name&#10;                        }&#10;&#10;                        isLoading = true&#10;                        coroutineScope.launch {&#10;                            try {&#10;                                // Use the new uploadImage method instead of createImage&#10;                                val result = apiService.uploadImage(context, uri, fileName)&#10;                                result.fold(&#10;                                    onSuccess = { response -&gt;&#10;                                        Toast.makeText(context, &quot;Image uploaded successfully!&quot;, Toast.LENGTH_SHORT).show()&#10;                                        selectedImageUri = null&#10;                                        navController.navigate(com.example.neuroview.Routes.RESULT)&#10;                                    },&#10;                                    onFailure = { error -&gt;&#10;                                        Toast.makeText(context, &quot;Error: ${error.message}&quot;, Toast.LENGTH_LONG).show()&#10;                                    }&#10;                                )&#10;                            } catch (e: Exception) {&#10;                                Toast.makeText(context, &quot;Network error: ${e.message}&quot;, Toast.LENGTH_LONG).show()&#10;                            } finally {&#10;                                isLoading = false&#10;                            }&#10;                        }&#10;                    }&#10;                },&#10;                colors = ButtonDefaults.buttonColors(containerColor = Color.White),&#10;                modifier = Modifier.fillMaxWidth(),&#10;                enabled = selectedImageUri != null &amp;&amp; !isLoading&#10;            ) {&#10;                if (isLoading) {&#10;                    CircularProgressIndicator(&#10;                        modifier = Modifier.size(16.dp),&#10;                        color = Color.Black,&#10;                        strokeWidth = 2.dp&#10;                    )&#10;                    Spacer(modifier = Modifier.width(8.dp))&#10;                    Text(&quot;Uploading...&quot;, color = Color.Black)&#10;                } else {&#10;                    Text(&quot;Upload &amp; Start Analysis&quot;, color = Color.Black)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun DashedBorderBox(onClick: () -&gt; Unit) {&#10;    val cornerRadius = 12.dp&#10;    val boxHeight = 550.dp&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .height(boxHeight)&#10;            .padding(4.dp)&#10;            .clickable { onClick() },&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Canvas(modifier = Modifier.fillMaxSize()) {&#10;            val dashLength = 10.dp.toPx()&#10;            val gapLength = 10.dp.toPx()&#10;            drawRoundRect(&#10;                color = Color.White,&#10;                size = Size(size.width, size.height),&#10;                cornerRadius = CornerRadius(cornerRadius.toPx(), cornerRadius.toPx()),&#10;                style = Stroke(&#10;                    width = 2.dp.toPx(),&#10;                    pathEffect = PathEffect.dashPathEffect(&#10;                        floatArrayOf(dashLength, gapLength), 0f&#10;                    )&#10;                )&#10;            )&#10;        }&#10;&#10;        Column(&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            modifier = Modifier.padding(16.dp)&#10;        ) {&#10;            Icon(&#10;                painter = painterResource(id = R.drawable.ic_cloud_upload),&#10;                contentDescription = &quot;Upload Icon&quot;,&#10;                tint = Color.White,&#10;                modifier = Modifier.size(48.dp)&#10;            )&#10;            Text(&#10;                text = &quot;Browse Files&quot;,&#10;                fontSize = 16.sp,&#10;                color = Color.White,&#10;                fontWeight = FontWeight.SemiBold&#10;            )&#10;            Spacer(modifier = Modifier.height(4.dp))&#10;            Text(&#10;                text = &quot;Supported Formats: JPEG, PNG&quot;,&#10;                fontSize = 12.sp,&#10;                color = Color.White&#10;            )&#10;            Spacer(modifier = Modifier.height(2.dp))&#10;            Text(&#10;                text = &quot;Upload Limit: 1 image file only.&quot;,&#10;                fontSize = 12.sp,&#10;                color = Color.White&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ImageInfoBox(uri: Uri, onDelete: () -&gt; Unit) {&#10;    val context = LocalContext.current&#10;&#10;    val fileName = remember(uri) {&#10;        var name = &quot;Unknown&quot;&#10;        val cursor = context.contentResolver.query(uri, null, null, null, null)&#10;        cursor?.use {&#10;            val nameIndex = it.getColumnIndex(OpenableColumns.DISPLAY_NAME)&#10;            if (it.moveToFirst() &amp;&amp; nameIndex != -1) {&#10;                name = it.getString(nameIndex)&#10;            }&#10;        }&#10;        name&#10;    }&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .height(80.dp)&#10;            .border(width = 2.dp, color = Color.White, shape = MaterialTheme.shapes.medium)&#10;            .padding(horizontal = 12.dp, vertical = 8.dp)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier.fillMaxSize(),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Text(&#10;                text = fileName,&#10;                color = Color.White,&#10;                fontSize = 14.sp,&#10;                maxLines = 1,&#10;                modifier = Modifier.weight(1f)&#10;            )&#10;            IconButton(onClick = { onDelete() }) {&#10;                Icon(&#10;                    imageVector = Icons.Default.Delete,&#10;                    contentDescription = &quot;Delete&quot;,&#10;                    tint = Color.White&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun UploadImageScreenPreview() {&#10;    NeuroViewTheme {&#10;        UploadImageScreen(rememberNavController())&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>