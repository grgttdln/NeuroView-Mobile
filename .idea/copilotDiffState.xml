<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/AndroidManifest.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/AndroidManifest.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;&#10;&#10;    &lt;application&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.NeuroView&quot;&#10;        android:usesCleartextTraffic=&quot;true&quot;&gt;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&#10;            android:label=&quot;@string/app_name&quot;&#10;            android:theme=&quot;@style/Theme.NeuroView&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;&#10;&#10;    &lt;application&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.NeuroView&quot;&#10;        android:usesCleartextTraffic=&quot;true&quot;&gt;&#10;        &#10;        &lt;!-- Main Activity - Entry point --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&#10;            android:label=&quot;@string/app_name&quot;&#10;            android:theme=&quot;@style/Theme.NeuroView&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;&#10;        &lt;!-- New Activity-based Navigation --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.activities.HomeActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:theme=&quot;@style/Theme.NeuroView&quot; /&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.activities.DashboardActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:theme=&quot;@style/Theme.NeuroView&quot; /&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.activities.UploadImageActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:theme=&quot;@style/Theme.NeuroView&quot; /&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.activities.PastRecordsActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:theme=&quot;@style/Theme.NeuroView&quot; /&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.activities.ResultActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:theme=&quot;@style/Theme.NeuroView&quot; /&gt;&#10;&#10;        &lt;activity&#10;            android:name=&quot;.activities.TumorDetailActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:theme=&quot;@style/Theme.NeuroView&quot; /&gt;&#10;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/neuroview/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/neuroview/MainActivity.kt" />
              <option name="originalContent" value="package com.example.neuroview&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.ui.Modifier&#10;import androidx.navigation.compose.rememberNavController&#10;import com.example.neuroview.ui.theme.NeuroViewTheme&#10;&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            NeuroViewTheme {&#10;                val navController = rememberNavController()&#10;                Scaffold(modifier = Modifier.fillMaxSize()) {&#10;                    NeuroViewNavigation(&#10;                        navController = navController&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.neuroview&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.ui.Modifier&#10;import com.example.neuroview.activities.HomeActivity&#10;import com.example.neuroview.ui.theme.NeuroViewTheme&#10;&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;&#10;        // Navigate to HomeActivity as the starting point&#10;        startActivity(Intent(this, HomeActivity::class.java))&#10;        finish() // Close MainActivity since we're using separate activities&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/neuroview/activities/DashboardActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/neuroview/activities/DashboardActivity.kt" />
              <option name="originalContent" value="package com.example.neuroview.activities&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.ui.Modifier&#10;import com.example.neuroview.screens.DashboardScreen&#10;import com.example.neuroview.ui.theme.NeuroViewTheme&#10;&#10;class DashboardActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            NeuroViewTheme {&#10;                Scaffold(modifier = Modifier.fillMaxSize()) { paddingValues -&gt;&#10;                    DashboardScreen(&#10;                        onNavigateToHome = {&#10;                            startActivity(Intent(this@DashboardActivity, HomeActivity::class.java))&#10;                        },&#10;                        onNavigateToUpload = {&#10;                            startActivity(Intent(this@DashboardActivity, UploadImageActivity::class.java))&#10;                        },&#10;                        onNavigateToPastRecords = {&#10;                            startActivity(Intent(this@DashboardActivity, PastRecordsActivity::class.java))&#10;                        },&#10;                        onNavigateToTumorDetail = { tumorName -&gt;&#10;                            val intent = Intent(this@DashboardActivity, TumorDetailActivity::class.java)&#10;                            intent.putExtra(&quot;tumorName&quot;, tumorName)&#10;                            startActivity(intent)&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.neuroview.activities&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.ui.Modifier&#10;import com.example.neuroview.screens.DashboardScreen&#10;import com.example.neuroview.ui.theme.NeuroViewTheme&#10;&#10;class DashboardActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            NeuroViewTheme {&#10;                Scaffold(modifier = Modifier.fillMaxSize()) { paddingValues -&gt;&#10;                    DashboardScreen(&#10;                        paddingValues = paddingValues,&#10;                        onNavigateToHome = {&#10;                            startActivity(Intent(this@DashboardActivity, HomeActivity::class.java))&#10;                        },&#10;                        onNavigateToUpload = {&#10;                            startActivity(Intent(this@DashboardActivity, UploadImageActivity::class.java))&#10;                        },&#10;                        onNavigateToPastRecords = {&#10;                            startActivity(Intent(this@DashboardActivity, PastRecordsActivity::class.java))&#10;                        },&#10;                        onNavigateToTumorDetail = { tumorName -&gt;&#10;                            val intent = Intent(this@DashboardActivity, TumorDetailActivity::class.java)&#10;                            intent.putExtra(&quot;tumorName&quot;, tumorName)&#10;                            startActivity(intent)&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/neuroview/activities/HomeActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/neuroview/activities/HomeActivity.kt" />
              <option name="originalContent" value="package com.example.neuroview.activities&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.ui.Modifier&#10;import com.example.neuroview.screens.HomeScreen&#10;import com.example.neuroview.ui.theme.NeuroViewTheme&#10;&#10;class HomeActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            NeuroViewTheme {&#10;                Scaffold(modifier = Modifier.fillMaxSize()) { paddingValues -&gt;&#10;                    HomeScreen(&#10;                        onNavigateToDashboard = {&#10;                            startActivity(Intent(this@HomeActivity, DashboardActivity::class.java))&#10;                        },&#10;                        onNavigateToUpload = {&#10;                            startActivity(Intent(this@HomeActivity, UploadImageActivity::class.java))&#10;                        },&#10;                        onNavigateToPastRecords = {&#10;                            startActivity(Intent(this@HomeActivity, PastRecordsActivity::class.java))&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.neuroview.activities&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.ui.Modifier&#10;import com.example.neuroview.screens.HomeScreen&#10;import com.example.neuroview.ui.theme.NeuroViewTheme&#10;&#10;class HomeActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            NeuroViewTheme {&#10;                Scaffold(modifier = Modifier.fillMaxSize()) { paddingValues -&gt;&#10;                    HomeScreen(&#10;                        paddingValues = paddingValues,&#10;                        onNavigateToDashboard = {&#10;                            startActivity(Intent(this@HomeActivity, DashboardActivity::class.java))&#10;                        },&#10;                        onNavigateToUpload = {&#10;                            startActivity(Intent(this@HomeActivity, UploadImageActivity::class.java))&#10;                        },&#10;                        onNavigateToPastRecords = {&#10;                            startActivity(Intent(this@HomeActivity, PastRecordsActivity::class.java))&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/neuroview/activities/PastRecordsActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/neuroview/activities/PastRecordsActivity.kt" />
              <option name="originalContent" value="package com.example.neuroview.activities&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.ui.Modifier&#10;import com.example.neuroview.screens.PastRecordsScreen&#10;import com.example.neuroview.ui.theme.NeuroViewTheme&#10;&#10;class PastRecordsActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            NeuroViewTheme {&#10;                Scaffold(modifier = Modifier.fillMaxSize()) { paddingValues -&gt;&#10;                    PastRecordsScreen(&#10;                        onNavigateToHome = {&#10;                            startActivity(Intent(this@PastRecordsActivity, HomeActivity::class.java))&#10;                        },&#10;                        onNavigateToDashboard = {&#10;                            startActivity(Intent(this@PastRecordsActivity, DashboardActivity::class.java))&#10;                        },&#10;                        onNavigateToUpload = {&#10;                            startActivity(Intent(this@PastRecordsActivity, UploadImageActivity::class.java))&#10;                        },&#10;                        onNavigateToResult = { predictionJson, imageUri -&gt;&#10;                            val intent = Intent(this@PastRecordsActivity, ResultActivity::class.java)&#10;                            intent.putExtra(&quot;predictionJson&quot;, predictionJson)&#10;                            intent.putExtra(&quot;imageUri&quot;, imageUri)&#10;                            startActivity(intent)&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.neuroview.activities&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.ui.Modifier&#10;import com.example.neuroview.screens.PastRecordsScreen&#10;import com.example.neuroview.ui.theme.NeuroViewTheme&#10;&#10;class PastRecordsActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            NeuroViewTheme {&#10;                Scaffold(modifier = Modifier.fillMaxSize()) { paddingValues -&gt;&#10;                    PastRecordsScreen(&#10;                        paddingValues = paddingValues,&#10;                        onNavigateToHome = {&#10;                            startActivity(Intent(this@PastRecordsActivity, HomeActivity::class.java))&#10;                        },&#10;                        onNavigateToDashboard = {&#10;                            startActivity(Intent(this@PastRecordsActivity, DashboardActivity::class.java))&#10;                        },&#10;                        onNavigateToUpload = {&#10;                            startActivity(Intent(this@PastRecordsActivity, UploadImageActivity::class.java))&#10;                        },&#10;                        onNavigateToResult = { predictionJson, imageUri -&gt;&#10;                            val intent = Intent(this@PastRecordsActivity, ResultActivity::class.java)&#10;                            intent.putExtra(&quot;predictionJson&quot;, predictionJson)&#10;                            intent.putExtra(&quot;imageUri&quot;, imageUri)&#10;                            startActivity(intent)&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/neuroview/activities/ResultActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/neuroview/activities/ResultActivity.kt" />
              <option name="originalContent" value="package com.example.neuroview.activities&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.ui.Modifier&#10;import com.example.neuroview.screens.ResultScreen&#10;import com.example.neuroview.ui.theme.NeuroViewTheme&#10;&#10;class ResultActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;&#10;        val predictionJson = intent.getStringExtra(&quot;predictionJson&quot;)&#10;        val imageUri = intent.getStringExtra(&quot;imageUri&quot;)&#10;&#10;        setContent {&#10;            NeuroViewTheme {&#10;                Scaffold(modifier = Modifier.fillMaxSize()) { paddingValues -&gt;&#10;                    ResultScreen(&#10;                        predictionJson = predictionJson,&#10;                        imageUri = imageUri,&#10;                        onNavigateToHome = {&#10;                            startActivity(Intent(this@ResultActivity, HomeActivity::class.java))&#10;                        },&#10;                        onNavigateToDashboard = {&#10;                            startActivity(Intent(this@ResultActivity, DashboardActivity::class.java))&#10;                        },&#10;                        onNavigateToUpload = {&#10;                            startActivity(Intent(this@ResultActivity, UploadImageActivity::class.java))&#10;                        },&#10;                        onNavigateToPastRecords = {&#10;                            startActivity(Intent(this@ResultActivity, PastRecordsActivity::class.java))&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.neuroview.activities&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.ui.Modifier&#10;import com.example.neuroview.screens.ResultScreen&#10;import com.example.neuroview.ui.theme.NeuroViewTheme&#10;&#10;class ResultActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;&#10;        val predictionJson = intent.getStringExtra(&quot;predictionJson&quot;)&#10;        val imageUri = intent.getStringExtra(&quot;imageUri&quot;)&#10;&#10;        setContent {&#10;            NeuroViewTheme {&#10;                Scaffold(modifier = Modifier.fillMaxSize()) { paddingValues -&gt;&#10;                    ResultScreen(&#10;                        predictionJson = predictionJson,&#10;                        imageUri = imageUri,&#10;                        paddingValues = paddingValues,&#10;                        onNavigateToHome = {&#10;                            startActivity(Intent(this@ResultActivity, HomeActivity::class.java))&#10;                        },&#10;                        onNavigateToDashboard = {&#10;                            startActivity(Intent(this@ResultActivity, DashboardActivity::class.java))&#10;                        },&#10;                        onNavigateToUpload = {&#10;                            startActivity(Intent(this@ResultActivity, UploadImageActivity::class.java))&#10;                        },&#10;                        onNavigateToPastRecords = {&#10;                            startActivity(Intent(this@ResultActivity, PastRecordsActivity::class.java))&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/neuroview/activities/TumorDetailActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/neuroview/activities/TumorDetailActivity.kt" />
              <option name="originalContent" value="package com.example.neuroview.activities&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.ui.Modifier&#10;import com.example.neuroview.screens.TumorDetailScreen&#10;import com.example.neuroview.ui.theme.NeuroViewTheme&#10;&#10;class TumorDetailActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;&#10;        val tumorName = intent.getStringExtra(&quot;tumorName&quot;)&#10;&#10;        setContent {&#10;            NeuroViewTheme {&#10;                Scaffold(modifier = Modifier.fillMaxSize()) { paddingValues -&gt;&#10;                    TumorDetailScreen(&#10;                        tumorName = tumorName,&#10;                        onNavigateToHome = {&#10;                            startActivity(Intent(this@TumorDetailActivity, HomeActivity::class.java))&#10;                        },&#10;                        onNavigateToDashboard = {&#10;                            startActivity(Intent(this@TumorDetailActivity, DashboardActivity::class.java))&#10;                        },&#10;                        onNavigateToUpload = {&#10;                            startActivity(Intent(this@TumorDetailActivity, UploadImageActivity::class.java))&#10;                        },&#10;                        onNavigateToPastRecords = {&#10;                            startActivity(Intent(this@TumorDetailActivity, PastRecordsActivity::class.java))&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.neuroview.activities&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.ui.Modifier&#10;import com.example.neuroview.screens.TumorDetailScreen&#10;import com.example.neuroview.ui.theme.NeuroViewTheme&#10;&#10;class TumorDetailActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;&#10;        val tumorName = intent.getStringExtra(&quot;tumorName&quot;)&#10;&#10;        setContent {&#10;            NeuroViewTheme {&#10;                Scaffold(modifier = Modifier.fillMaxSize()) { paddingValues -&gt;&#10;                    TumorDetailScreen(&#10;                        tumorName = tumorName,&#10;                        paddingValues = paddingValues,&#10;                        onNavigateToHome = {&#10;                            startActivity(Intent(this@TumorDetailActivity, HomeActivity::class.java))&#10;                        },&#10;                        onNavigateToDashboard = {&#10;                            startActivity(Intent(this@TumorDetailActivity, DashboardActivity::class.java))&#10;                        },&#10;                        onNavigateToUpload = {&#10;                            startActivity(Intent(this@TumorDetailActivity, UploadImageActivity::class.java))&#10;                        },&#10;                        onNavigateToPastRecords = {&#10;                            startActivity(Intent(this@TumorDetailActivity, PastRecordsActivity::class.java))&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/neuroview/activities/UploadImageActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/neuroview/activities/UploadImageActivity.kt" />
              <option name="originalContent" value="package com.example.neuroview.activities&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.ui.Modifier&#10;import com.example.neuroview.screens.UploadImageScreen&#10;import com.example.neuroview.ui.theme.NeuroViewTheme&#10;&#10;class UploadImageActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            NeuroViewTheme {&#10;                Scaffold(modifier = Modifier.fillMaxSize()) { paddingValues -&gt;&#10;                    UploadImageScreen(&#10;                        onNavigateToHome = {&#10;                            startActivity(Intent(this@UploadImageActivity, HomeActivity::class.java))&#10;                        },&#10;                        onNavigateToDashboard = {&#10;                            startActivity(Intent(this@UploadImageActivity, DashboardActivity::class.java))&#10;                        },&#10;                        onNavigateToPastRecords = {&#10;                            startActivity(Intent(this@UploadImageActivity, PastRecordsActivity::class.java))&#10;                        },&#10;                        onNavigateToResult = { predictionJson, imageUri -&gt;&#10;                            val intent = Intent(this@UploadImageActivity, ResultActivity::class.java)&#10;                            intent.putExtra(&quot;predictionJson&quot;, predictionJson)&#10;                            intent.putExtra(&quot;imageUri&quot;, imageUri)&#10;                            startActivity(intent)&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.neuroview.activities&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.ui.Modifier&#10;import com.example.neuroview.screens.UploadImageScreen&#10;import com.example.neuroview.ui.theme.NeuroViewTheme&#10;&#10;class UploadImageActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        setContent {&#10;            NeuroViewTheme {&#10;                Scaffold(modifier = Modifier.fillMaxSize()) { paddingValues -&gt;&#10;                    UploadImageScreen(&#10;                        paddingValues = paddingValues,&#10;                        onNavigateToHome = {&#10;                            startActivity(Intent(this@UploadImageActivity, HomeActivity::class.java))&#10;                        },&#10;                        onNavigateToDashboard = {&#10;                            startActivity(Intent(this@UploadImageActivity, DashboardActivity::class.java))&#10;                        },&#10;                        onNavigateToPastRecords = {&#10;                            startActivity(Intent(this@UploadImageActivity, PastRecordsActivity::class.java))&#10;                        },&#10;                        onNavigateToResult = { predictionJson, imageUri -&gt;&#10;                            val intent = Intent(this@UploadImageActivity, ResultActivity::class.java)&#10;                            intent.putExtra(&quot;predictionJson&quot;, predictionJson)&#10;                            intent.putExtra(&quot;imageUri&quot;, imageUri)&#10;                            startActivity(intent)&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/neuroview/components/BottomNavigationBar.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/neuroview/components/BottomNavigationBar.kt" />
              <option name="originalContent" value="package com.example.neuroview.components&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.unit.Dp&#10;import androidx.compose.ui.unit.dp&#10;import com.example.neuroview.Routes&#10;import com.example.neuroview.R&#10;&#10;&#10;data class BottomNavItem(&#10;    val route: String,&#10;    val unselectedIcon: Int,&#10;    val selectedIcon: Int,&#10;    val isCentralButton: Boolean = false&#10;)&#10;&#10;@Composable&#10;fun BottomNavigationBar(&#10;    currentRoute: String?,&#10;    onNavigateToHome: () -&gt; Unit,&#10;    onNavigateToDashboard: () -&gt; Unit,&#10;    onNavigateToUpload: () -&gt; Unit,&#10;    onNavigateToPastRecords: () -&gt; Unit,&#10;    bottomPadding: Int = 16,&#10;    navBarHeight: Int = 80,&#10;    regularIconSize: Int = 32,&#10;    fabIconSize: Int = 32,&#10;    fabSize: Int = 64,&#10;    navBarWidth: Float = 0.6f,&#10;    horizontalPadding: Int = 16&#10;) {&#10;    val items = listOf(&#10;        BottomNavItem(&quot;dashboard&quot;, R.drawable.ic_home, R.drawable.ic_home_filled),&#10;        BottomNavItem(&quot;upload_image&quot;, R.drawable.ic_cloud_upload, R.drawable.ic_cloud_upload, isCentralButton = true),&#10;        BottomNavItem(&quot;past_records&quot;, R.drawable.ic_folder, R.drawable.ic_folder_filled)&#10;    )&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .height(navBarHeight.dp)&#10;            .background(Color.Transparent)&#10;            .padding(bottom = bottomPadding.dp),&#10;        contentAlignment = Alignment.BottomCenter&#10;    ) {&#10;        Surface(&#10;            modifier = Modifier&#10;                .fillMaxWidth(navBarWidth)&#10;                .height(56.dp)&#10;                .align(Alignment.BottomCenter)&#10;                .padding(horizontal = horizontalPadding.dp),&#10;            color = Color.White,&#10;            shape = RoundedCornerShape(28.dp),&#10;            shadowElevation = 8.dp&#10;        ) {&#10;            // Empty surface for background&#10;        }&#10;&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth(navBarWidth)&#10;                .padding(horizontal = horizontalPadding.dp)&#10;                .height(navBarHeight.dp),&#10;            horizontalArrangement = Arrangement.SpaceAround,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            items.forEach { item -&gt;&#10;                if (item.isCentralButton) {&#10;                    Spacer(modifier = Modifier.weight(0.5f))&#10;&#10;                    CustomElevatedFab(&#10;                        icon = item.unselectedIcon, // Central button's icon doesn't change&#10;                        isSelected = currentRoute == item.route,&#10;                        fabSize = fabSize,&#10;                        iconSize = fabIconSize,&#10;                        onClick = {&#10;                            if (currentRoute != item.route) {&#10;                                onNavigateToUpload()&#10;                            }&#10;                        }&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.weight(0.5f))&#10;                } else {&#10;                    CustomBottomNavItem(&#10;                        item = item,&#10;                        isSelected = currentRoute == item.route,&#10;                        iconSize = regularIconSize,&#10;                        onClick = {&#10;                            if (currentRoute != item.route) {&#10;                                when (item.route) {&#10;                                    &quot;dashboard&quot; -&gt; onNavigateToDashboard()&#10;                                    &quot;past_records&quot; -&gt; onNavigateToPastRecords()&#10;                                }&#10;                            }&#10;                        },&#10;                        modifier = Modifier.weight(1f)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun CustomBottomNavItem(&#10;    item: BottomNavItem,&#10;    isSelected: Boolean,&#10;    onClick: () -&gt; Unit,&#10;    modifier: Modifier = Modifier,&#10;    iconSize: Int = 24&#10;) {&#10;    Column(&#10;        modifier = modifier&#10;            .clickable(onClick = onClick)&#10;            .padding(vertical = 8.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        verticalArrangement = Arrangement.Center&#10;    ) {&#10;        val iconToDisplay = if (isSelected) item.selectedIcon else item.unselectedIcon&#10;        Icon(&#10;            painter = painterResource(id = iconToDisplay),&#10;            contentDescription = null,&#10;            tint = if (isSelected) Color.Black else Color.Black,&#10;            modifier = Modifier.size(iconSize.dp)&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun CustomElevatedFab(&#10;    icon: Int,&#10;    isSelected: Boolean,&#10;    onClick: () -&gt; Unit,&#10;    fabSize: Int = 64,&#10;    iconSize: Int = 28,&#10;    strokeColor: Color = Color.White,&#10;    strokeWidth: Dp = 2.dp&#10;) {&#10;    Card(&#10;        modifier = Modifier&#10;            .size(fabSize.dp)&#10;            .offset(y = (-20).dp)&#10;            .border(&#10;                width = strokeWidth,&#10;                color = strokeColor,&#10;                shape = CircleShape&#10;            ),&#10;        shape = CircleShape,&#10;        colors = CardDefaults.cardColors(containerColor = Color.Black),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 10.dp)&#10;    ) {&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .clickable(onClick = onClick),&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            Icon(&#10;                painter = painterResource(id = icon),&#10;                contentDescription = null,&#10;                tint = Color.White,&#10;                modifier = Modifier.size(iconSize.dp)&#10;            )&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.neuroview.components&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.unit.Dp&#10;import androidx.compose.ui.unit.dp&#10;import com.example.neuroview.R&#10;&#10;&#10;data class BottomNavItem(&#10;    val route: String,&#10;    val unselectedIcon: Int,&#10;    val selectedIcon: Int,&#10;    val isCentralButton: Boolean = false&#10;)&#10;&#10;@Composable&#10;fun BottomNavigationBar(&#10;    currentRoute: String?,&#10;    onNavigateToHome: () -&gt; Unit,&#10;    onNavigateToDashboard: () -&gt; Unit,&#10;    onNavigateToUpload: () -&gt; Unit,&#10;    onNavigateToPastRecords: () -&gt; Unit,&#10;    bottomPadding: Int = 16,&#10;    navBarHeight: Int = 80,&#10;    regularIconSize: Int = 32,&#10;    fabIconSize: Int = 32,&#10;    fabSize: Int = 64,&#10;    navBarWidth: Float = 0.6f,&#10;    horizontalPadding: Int = 16&#10;) {&#10;    val items = listOf(&#10;        BottomNavItem(&quot;dashboard&quot;, R.drawable.ic_home, R.drawable.ic_home_filled),&#10;        BottomNavItem(&quot;upload_image&quot;, R.drawable.ic_cloud_upload, R.drawable.ic_cloud_upload, isCentralButton = true),&#10;        BottomNavItem(&quot;past_records&quot;, R.drawable.ic_folder, R.drawable.ic_folder_filled)&#10;    )&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .height(navBarHeight.dp)&#10;            .background(Color.Transparent)&#10;            .padding(bottom = bottomPadding.dp),&#10;        contentAlignment = Alignment.BottomCenter&#10;    ) {&#10;        Surface(&#10;            modifier = Modifier&#10;                .fillMaxWidth(navBarWidth)&#10;                .height(56.dp)&#10;                .align(Alignment.BottomCenter)&#10;                .padding(horizontal = horizontalPadding.dp),&#10;            color = Color.White,&#10;            shape = RoundedCornerShape(28.dp),&#10;            shadowElevation = 8.dp&#10;        ) {&#10;            // Empty surface for background&#10;        }&#10;&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth(navBarWidth)&#10;                .padding(horizontal = horizontalPadding.dp)&#10;                .height(navBarHeight.dp),&#10;            horizontalArrangement = Arrangement.SpaceAround,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            items.forEach { item -&gt;&#10;                if (item.isCentralButton) {&#10;                    Spacer(modifier = Modifier.weight(0.5f))&#10;&#10;                    CustomElevatedFab(&#10;                        icon = item.unselectedIcon, // Central button's icon doesn't change&#10;                        isSelected = currentRoute == item.route,&#10;                        fabSize = fabSize,&#10;                        iconSize = fabIconSize,&#10;                        onClick = {&#10;                            if (currentRoute != item.route) {&#10;                                onNavigateToUpload()&#10;                            }&#10;                        }&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.weight(0.5f))&#10;                } else {&#10;                    CustomBottomNavItem(&#10;                        item = item,&#10;                        isSelected = currentRoute == item.route,&#10;                        iconSize = regularIconSize,&#10;                        onClick = {&#10;                            if (currentRoute != item.route) {&#10;                                when (item.route) {&#10;                                    &quot;dashboard&quot; -&gt; onNavigateToDashboard()&#10;                                    &quot;past_records&quot; -&gt; onNavigateToPastRecords()&#10;                                }&#10;                            }&#10;                        },&#10;                        modifier = Modifier.weight(1f)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun CustomBottomNavItem(&#10;    item: BottomNavItem,&#10;    isSelected: Boolean,&#10;    onClick: () -&gt; Unit,&#10;    modifier: Modifier = Modifier,&#10;    iconSize: Int = 24&#10;) {&#10;    Column(&#10;        modifier = modifier&#10;            .clickable(onClick = onClick)&#10;            .padding(vertical = 8.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        verticalArrangement = Arrangement.Center&#10;    ) {&#10;        val iconToDisplay = if (isSelected) item.selectedIcon else item.unselectedIcon&#10;        Icon(&#10;            painter = painterResource(id = iconToDisplay),&#10;            contentDescription = null,&#10;            tint = if (isSelected) Color.Black else Color.Black,&#10;            modifier = Modifier.size(iconSize.dp)&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun CustomElevatedFab(&#10;    icon: Int,&#10;    isSelected: Boolean,&#10;    onClick: () -&gt; Unit,&#10;    fabSize: Int = 64,&#10;    iconSize: Int = 28,&#10;    strokeColor: Color = Color.White,&#10;    strokeWidth: Dp = 2.dp&#10;) {&#10;    Card(&#10;        modifier = Modifier&#10;            .size(fabSize.dp)&#10;            .offset(y = (-20).dp)&#10;            .border(&#10;                width = strokeWidth,&#10;                color = strokeColor,&#10;                shape = CircleShape&#10;            ),&#10;        shape = CircleShape,&#10;        colors = CardDefaults.cardColors(containerColor = Color.Black),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 10.dp)&#10;    ) {&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .clickable(onClick = onClick),&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            Icon(&#10;                painter = painterResource(id = icon),&#10;                contentDescription = null,&#10;                tint = Color.White,&#10;                modifier = Modifier.size(iconSize.dp)&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/neuroview/screens/DashboardScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/neuroview/screens/DashboardScreen.kt" />
              <option name="originalContent" value="package com.example.neuroview.screens&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.SpanStyle&#10;import androidx.compose.ui.text.buildAnnotatedString&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.text.withStyle&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import com.example.neuroview.Routes&#10;import com.example.neuroview.components.BottomNavigationBar&#10;import com.example.neuroview.components.TopAppBar&#10;import com.example.neuroview.R // Make sure R is imported to access drawables&#10;import com.example.neuroview.data.TumorData&#10;&#10;// Accompanist Pager imports&#10;import com.google.accompanist.pager.ExperimentalPagerApi&#10;import com.google.accompanist.pager.HorizontalPager&#10;import com.google.accompanist.pager.rememberPagerState&#10;import com.google.accompanist.pager.HorizontalPagerIndicator&#10;&#10;@OptIn(ExperimentalPagerApi::class) // Needed for Accompanist Pager&#10;@Composable&#10;fun DashboardScreen(&#10;    onNavigateToHome: () -&gt; Unit,&#10;    onNavigateToUpload: () -&gt; Unit,&#10;    onNavigateToPastRecords: () -&gt; Unit,&#10;    onNavigateToTumorDetail: (String) -&gt; Unit&#10;) {&#10;    // Get tumor data&#10;    val tumors = TumorData.getAllTumors()&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                backgroundColor = Color.Black,&#10;                textColor = Color.White,&#10;                logoSize = 42,&#10;                titleFontSize = 28&#10;            )&#10;        },&#10;        bottomBar = {&#10;            BottomNavigationBar(&#10;                currentRoute = &quot;dashboard&quot;,&#10;                onNavigateToHome = onNavigateToHome,&#10;                onNavigateToDashboard = { /* Already on dashboard */ },&#10;                onNavigateToUpload = onNavigateToUpload,&#10;                onNavigateToPastRecords = onNavigateToPastRecords,&#10;                bottomPadding = 18,&#10;                navBarHeight = 80,&#10;                regularIconSize = 32,&#10;                fabIconSize = 32,&#10;                fabSize = 64,&#10;                navBarWidth = 0.8f,&#10;                horizontalPadding = 16&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .background(Color.Black)&#10;                .padding(paddingValues), // Apply scaffold padding&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            // &quot;LEARN&quot; Text&#10;            Text(&#10;                text = &quot;LEARN&quot;,&#10;                fontSize = 18.sp,&#10;                fontWeight = FontWeight.Medium,&#10;                color = Color(0xFF737373), // This color matches the grey in the image&#10;                modifier = Modifier.padding(top = 20.dp, bottom = 40.dp)&#10;            )&#10;&#10;            val pagerState = rememberPagerState(initialPage = 0)&#10;&#10;            // Carousel / Horizontal Pager&#10;            HorizontalPager(&#10;                count = tumors.size,&#10;                state = pagerState,&#10;                contentPadding = PaddingValues(horizontal = 32.dp),&#10;                itemSpacing = 16.dp,&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(300.dp)&#10;            ) { page -&gt;&#10;                val tumor = tumors[page]&#10;&#10;                Card(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .aspectRatio(1f)&#10;                        .background(Color.Transparent, RoundedCornerShape(16.dp))&#10;                        .clickable {&#10;                            onNavigateToTumorDetail(tumor.name)&#10;                        },&#10;                    shape = RoundedCornerShape(16.dp),&#10;                    colors = CardDefaults.cardColors(containerColor = Color.Transparent),&#10;                    elevation = CardDefaults.cardElevation(defaultElevation = 0.dp)&#10;                ) {&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .fillMaxSize()&#10;                            .background( Color(0xFF0B0B0B)) // This is the background of the box containing the border and content&#10;                            .padding(2.dp) // This creates the white border&#10;                            .background( Color(0xFF0B0B0B), RoundedCornerShape(16.dp)) // This is the actual white border and background for content&#10;                            .clip(RoundedCornerShape(16.dp))&#10;                    ) {&#10;                        Column(&#10;                            modifier = Modifier.fillMaxSize()&#10;                        ) {&#10;                            Image(&#10;                                painter = painterResource(id = tumor.imageResource),&#10;                                contentDescription = &quot;${tumor.name} image&quot;,&#10;                                contentScale = ContentScale.Crop,&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .weight(1f)&#10;                                    .clip(RoundedCornerShape(topStart = 16.dp, topEnd = 16.dp))&#10;                            )&#10;&#10;                            Column(&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .background(Color.White)&#10;                                    .padding(horizontal = 16.dp, vertical = 12.dp)&#10;                                    .weight(0.3f),&#10;                                horizontalAlignment = Alignment.Start,&#10;                                verticalArrangement = Arrangement.Center&#10;                            ) {&#10;                                Row(&#10;                                    modifier = Modifier.fillMaxWidth(),&#10;                                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                                    verticalAlignment = Alignment.CenterVertically&#10;                                ) {&#10;                                    Text(&#10;                                        text = tumor.name,&#10;                                        fontSize = 20.sp,&#10;                                        fontWeight = FontWeight.Bold,&#10;                                        color = Color.Black&#10;                                    )&#10;                                    Icon(&#10;                                        painter = painterResource(id = R.drawable.ic_readmore),&#10;                                        contentDescription = &quot;Go to details&quot;,&#10;                                        tint = Color.Black,&#10;                                        modifier = Modifier.size(24.dp)&#10;                                    )&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(30.dp)) // Space between pager and indicator&#10;&#10;            // Pager Indicator&#10;            HorizontalPagerIndicator(&#10;                pagerState = pagerState,&#10;                modifier = Modifier&#10;                    .align(Alignment.CenterHorizontally),&#10;                activeColor = Color.White,&#10;                inactiveColor = Color.Gray,&#10;                indicatorWidth = 8.dp,&#10;                indicatorHeight = 8.dp,&#10;                spacing = 8.dp&#10;            )&#10;&#10;            // --- ADDED TEXTS BELOW PAGER INDICATOR ---&#10;            Spacer(modifier = Modifier.height(50.dp)) // Space after indicator before new texts&#10;&#10;            // &quot;Our brain is one of the most important and complex parts of the human body.&quot;&#10;            Text(&#10;                text = buildAnnotatedString {&#10;                    append(&quot;Our brain is one of the most &quot;)&#10;                    withStyle(style = SpanStyle(fontWeight = FontWeight.Bold)) {&#10;                        append(&quot;important and complex parts of the human body.&quot;)&#10;                    }&#10;                },&#10;                fontSize = 20.sp, // Adjusted font size&#10;                fontWeight = FontWeight.SemiBold, // Adjust font weight as per image&#10;                color = Color.White,&#10;                textAlign = TextAlign.Center, // Centered text as in image&#10;                modifier = Modifier&#10;                    .fillMaxWidth(0.85f) // Adjust width to match image visually&#10;                    .padding(horizontal = 16.dp)&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(20.dp)) // Space between sentences&#10;&#10;            // &quot;It controls how we think, feel, move, and live. That's why taking care of it isn't optional — it's essential.&quot;&#10;            Text(&#10;                text = buildAnnotatedString {&#10;                    append(&quot;It controls how we think, feel, move, and live. That's why taking care of it isn't optional — it's &quot;)&#10;                    withStyle(style = SpanStyle(fontWeight = FontWeight.Bold)) {&#10;                        append(&quot;essential.&quot;)&#10;                    }&#10;                },&#10;                fontSize = 20.sp, // Consistent font size&#10;                fontWeight = FontWeight.SemiBold,&#10;                color = Color.White,&#10;                textAlign = TextAlign.Center, // Centered text&#10;                modifier = Modifier&#10;                    .fillMaxWidth(0.85f) // Consistent width with the text above&#10;                    .padding(horizontal = 16.dp)&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(32.dp)) // Bottom padding&#10;        }&#10;    }&#10;}&#10;&#10;// Preview function for DashboardScreen&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun DashboardScreenPreview() {&#10;    DashboardScreen(&#10;        onNavigateToHome = {},&#10;        onNavigateToUpload = {},&#10;        onNavigateToPastRecords = {},&#10;        onNavigateToTumorDetail = {}&#10;    )&#10;}" />
              <option name="updatedContent" value="package com.example.neuroview.screens&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.SpanStyle&#10;import androidx.compose.ui.text.buildAnnotatedString&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.text.withStyle&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import com.example.neuroview.Routes&#10;import com.example.neuroview.components.BottomNavigationBar&#10;import com.example.neuroview.components.TopAppBar&#10;import com.example.neuroview.R // Make sure R is imported to access drawables&#10;import com.example.neuroview.data.TumorData&#10;&#10;// Accompanist Pager imports&#10;import com.google.accompanist.pager.ExperimentalPagerApi&#10;import com.google.accompanist.pager.HorizontalPager&#10;import com.google.accompanist.pager.rememberPagerState&#10;import com.google.accompanist.pager.HorizontalPagerIndicator&#10;&#10;@OptIn(ExperimentalPagerApi::class) // Needed for Accompanist Pager&#10;@Composable&#10;fun DashboardScreen(&#10;    paddingValues: PaddingValues,&#10;    onNavigateToHome: () -&gt; Unit,&#10;    onNavigateToUpload: () -&gt; Unit,&#10;    onNavigateToPastRecords: () -&gt; Unit,&#10;    onNavigateToTumorDetail: (String) -&gt; Unit&#10;) {&#10;    // Get tumor data&#10;    val tumors = TumorData.getAllTumors()&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                backgroundColor = Color.Black,&#10;                textColor = Color.White,&#10;                logoSize = 42,&#10;                titleFontSize = 28&#10;            )&#10;        },&#10;        bottomBar = {&#10;            BottomNavigationBar(&#10;                currentRoute = &quot;dashboard&quot;,&#10;                onNavigateToHome = onNavigateToHome,&#10;                onNavigateToDashboard = { /* Already on dashboard */ },&#10;                onNavigateToUpload = onNavigateToUpload,&#10;                onNavigateToPastRecords = onNavigateToPastRecords,&#10;                bottomPadding = 18,&#10;                navBarHeight = 80,&#10;                regularIconSize = 32,&#10;                fabIconSize = 32,&#10;                fabSize = 64,&#10;                navBarWidth = 0.8f,&#10;                horizontalPadding = 16&#10;            )&#10;        }&#10;    ) { innerPaddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .background(Color.Black)&#10;                .padding(paddingValues) // Apply outer padding from Activity&#10;                .padding(innerPaddingValues), // Apply inner padding from Scaffold&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            // &quot;LEARN&quot; Text&#10;            Text(&#10;                text = &quot;LEARN&quot;,&#10;                fontSize = 18.sp,&#10;                fontWeight = FontWeight.Medium,&#10;                color = Color(0xFF737373), // This color matches the grey in the image&#10;                modifier = Modifier.padding(top = 20.dp, bottom = 40.dp)&#10;            )&#10;&#10;            val pagerState = rememberPagerState(initialPage = 0)&#10;&#10;            // Carousel / Horizontal Pager&#10;            HorizontalPager(&#10;                count = tumors.size,&#10;                state = pagerState,&#10;                contentPadding = PaddingValues(horizontal = 32.dp),&#10;                itemSpacing = 16.dp,&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(300.dp)&#10;            ) { page -&gt;&#10;                val tumor = tumors[page]&#10;&#10;                Card(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .aspectRatio(1f)&#10;                        .background(Color.Transparent, RoundedCornerShape(16.dp))&#10;                        .clickable {&#10;                            onNavigateToTumorDetail(tumor.name)&#10;                        },&#10;                    shape = RoundedCornerShape(16.dp),&#10;                    colors = CardDefaults.cardColors(containerColor = Color.Transparent),&#10;                    elevation = CardDefaults.cardElevation(defaultElevation = 0.dp)&#10;                ) {&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .fillMaxSize()&#10;                            .background( Color(0xFF0B0B0B)) // This is the background of the box containing the border and content&#10;                            .padding(2.dp) // This creates the white border&#10;                            .background( Color(0xFF0B0B0B), RoundedCornerShape(16.dp)) // This is the actual white border and background for content&#10;                            .clip(RoundedCornerShape(16.dp))&#10;                    ) {&#10;                        Column(&#10;                            modifier = Modifier.fillMaxSize()&#10;                        ) {&#10;                            Image(&#10;                                painter = painterResource(id = tumor.imageResource),&#10;                                contentDescription = &quot;${tumor.name} image&quot;,&#10;                                contentScale = ContentScale.Crop,&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .weight(1f)&#10;                                    .clip(RoundedCornerShape(topStart = 16.dp, topEnd = 16.dp))&#10;                            )&#10;&#10;                            Column(&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .background(Color.White)&#10;                                    .padding(horizontal = 16.dp, vertical = 12.dp)&#10;                                    .weight(0.3f),&#10;                                horizontalAlignment = Alignment.Start,&#10;                                verticalArrangement = Arrangement.Center&#10;                            ) {&#10;                                Row(&#10;                                    modifier = Modifier.fillMaxWidth(),&#10;                                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                                    verticalAlignment = Alignment.CenterVertically&#10;                                ) {&#10;                                    Text(&#10;                                        text = tumor.name,&#10;                                        fontSize = 20.sp,&#10;                                        fontWeight = FontWeight.Bold,&#10;                                        color = Color.Black&#10;                                    )&#10;                                    Icon(&#10;                                        painter = painterResource(id = R.drawable.ic_readmore),&#10;                                        contentDescription = &quot;Go to details&quot;,&#10;                                        tint = Color.Black,&#10;                                        modifier = Modifier.size(24.dp)&#10;                                    )&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(30.dp)) // Space between pager and indicator&#10;&#10;            // Pager Indicator&#10;            HorizontalPagerIndicator(&#10;                pagerState = pagerState,&#10;                modifier = Modifier&#10;                    .align(Alignment.CenterHorizontally),&#10;                activeColor = Color.White,&#10;                inactiveColor = Color.Gray,&#10;                indicatorWidth = 8.dp,&#10;                indicatorHeight = 8.dp,&#10;                spacing = 8.dp&#10;            )&#10;&#10;            // --- ADDED TEXTS BELOW PAGER INDICATOR ---&#10;            Spacer(modifier = Modifier.height(50.dp)) // Space after indicator before new texts&#10;&#10;            // &quot;Our brain is one of the most important and complex parts of the human body.&quot;&#10;            Text(&#10;                text = buildAnnotatedString {&#10;                    append(&quot;Our brain is one of the most &quot;)&#10;                    withStyle(style = SpanStyle(fontWeight = FontWeight.Bold)) {&#10;                        append(&quot;important and complex parts of the human body.&quot;)&#10;                    }&#10;                },&#10;                fontSize = 20.sp, // Adjusted font size&#10;                fontWeight = FontWeight.SemiBold, // Adjust font weight as per image&#10;                color = Color.White,&#10;                textAlign = TextAlign.Center, // Centered text as in image&#10;                modifier = Modifier&#10;                    .fillMaxWidth(0.85f) // Adjust width to match image visually&#10;                    .padding(horizontal = 16.dp)&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(20.dp)) // Space between sentences&#10;&#10;            // &quot;It controls how we think, feel, move, and live. That's why taking care of it isn't optional — it's essential.&quot;&#10;            Text(&#10;                text = buildAnnotatedString {&#10;                    append(&quot;It controls how we think, feel, move, and live. That's why taking care of it isn't optional — it's &quot;)&#10;                    withStyle(style = SpanStyle(fontWeight = FontWeight.Bold)) {&#10;                        append(&quot;essential.&quot;)&#10;                    }&#10;                },&#10;                fontSize = 20.sp, // Consistent font size&#10;                fontWeight = FontWeight.SemiBold,&#10;                color = Color.White,&#10;                textAlign = TextAlign.Center, // Centered text&#10;                modifier = Modifier&#10;                    .fillMaxWidth(0.85f) // Consistent width with the text above&#10;                    .padding(horizontal = 16.dp)&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(32.dp)) // Bottom padding&#10;        }&#10;    }&#10;}&#10;&#10;// Preview function for DashboardScreen&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun DashboardScreenPreview() {&#10;    DashboardScreen(&#10;        paddingValues = PaddingValues(0.dp),&#10;        onNavigateToHome = {},&#10;        onNavigateToUpload = {},&#10;        onNavigateToPastRecords = {},&#10;        onNavigateToTumorDetail = {}&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/neuroview/screens/HomeScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/neuroview/screens/HomeScreen.kt" />
              <option name="originalContent" value="package com.example.neuroview.screens&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import com.example.neuroview.Routes&#10;import androidx.compose.ui.draw.paint&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.painterResource&#10;import com.example.neuroview.R&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import com.example.neuroview.ui.theme.NeuroViewTheme&#10;&#10;@Composable&#10;fun HomeScreen(&#10;    onNavigateToDashboard: () -&gt; Unit,&#10;    onNavigateToUpload: () -&gt; Unit,&#10;    onNavigateToPastRecords: () -&gt; Unit&#10;) {&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .paint(&#10;                painter = painterResource(id = R.drawable.home),&#10;                contentScale = ContentScale.Crop&#10;            )&#10;            .padding(24.dp)&#10;    ) {&#10;        Image(&#10;            painter = painterResource(id = R.drawable.home_logo),&#10;            contentDescription = &quot;Home Logo&quot;,&#10;            modifier = Modifier&#10;                .size(360.dp)&#10;                .align(Alignment.Center)&#10;                .offset(y = (-60).dp)&#10;        )&#10;&#10;        Column(&#10;            horizontalAlignment = Alignment.Start,&#10;            modifier = Modifier&#10;                .align(Alignment.BottomCenter)&#10;                .fillMaxWidth()&#10;        ) {&#10;            Text(&#10;                text = &quot;Welcome to&quot;,&#10;                style = MaterialTheme.typography.titleMedium,&#10;                color = Color.White,&#10;                modifier = Modifier.padding(bottom = 4.dp)&#10;            )&#10;            Text(&#10;                text = &quot;NeuroView&quot;,&#10;                style = MaterialTheme.typography.headlineLarge,&#10;                fontWeight = FontWeight.Bold,&#10;                color = Color.White,&#10;                modifier = Modifier.padding(bottom = 16.dp)&#10;            )&#10;            Text(&#10;                text = &quot;Revolutionizing brain tumor diagnosis with advanced AI technology for faster, more accurate results.&quot;,&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                color = Color.White,&#10;                modifier = Modifier.padding(bottom = 32.dp)&#10;            )&#10;&#10;            Button(&#10;                onClick = { onNavigateToDashboard() },&#10;                colors = ButtonDefaults.buttonColors(containerColor = Color.White),&#10;                shape = RoundedCornerShape(8.dp),&#10;                modifier = Modifier.fillMaxWidth()&#10;            ) {&#10;                Text(&#10;                    text = &quot;Get Started&quot;,&#10;                    color = Color.Black,&#10;                    fontSize = 16.sp,&#10;                    fontWeight = FontWeight.SemiBold&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true, name = &quot;Home Screen Preview&quot;)&#10;@Composable&#10;fun HomeScreenPreview() {&#10;    NeuroViewTheme {&#10;        HomeScreen(&#10;            onNavigateToDashboard = {},&#10;            onNavigateToUpload = {},&#10;            onNavigateToPastRecords = {}&#10;        )&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.neuroview.screens&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import com.example.neuroview.Routes&#10;import androidx.compose.ui.draw.paint&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.painterResource&#10;import com.example.neuroview.R&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import com.example.neuroview.ui.theme.NeuroViewTheme&#10;&#10;@Composable&#10;fun HomeScreen(&#10;    paddingValues: PaddingValues,&#10;    onNavigateToDashboard: () -&gt; Unit,&#10;    onNavigateToUpload: () -&gt; Unit,&#10;    onNavigateToPastRecords: () -&gt; Unit&#10;) {&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .paint(&#10;                painter = painterResource(id = R.drawable.home),&#10;                contentScale = ContentScale.Crop&#10;            )&#10;            .padding(paddingValues) // Apply the padding values here&#10;            .padding(24.dp)&#10;    ) {&#10;        Image(&#10;            painter = painterResource(id = R.drawable.home_logo),&#10;            contentDescription = &quot;Home Logo&quot;,&#10;            modifier = Modifier&#10;                .size(360.dp)&#10;                .align(Alignment.Center)&#10;                .offset(y = (-60).dp)&#10;        )&#10;&#10;        Column(&#10;            horizontalAlignment = Alignment.Start,&#10;            modifier = Modifier&#10;                .align(Alignment.BottomCenter)&#10;                .fillMaxWidth()&#10;        ) {&#10;            Text(&#10;                text = &quot;Welcome to&quot;,&#10;                style = MaterialTheme.typography.titleMedium,&#10;                color = Color.White,&#10;                modifier = Modifier.padding(bottom = 4.dp)&#10;            )&#10;            Text(&#10;                text = &quot;NeuroView&quot;,&#10;                style = MaterialTheme.typography.headlineLarge,&#10;                fontWeight = FontWeight.Bold,&#10;                color = Color.White,&#10;                modifier = Modifier.padding(bottom = 16.dp)&#10;            )&#10;            Text(&#10;                text = &quot;Revolutionizing brain tumor diagnosis with advanced AI technology for faster, more accurate results.&quot;,&#10;                style = MaterialTheme.typography.bodyMedium,&#10;                color = Color.White,&#10;                modifier = Modifier.padding(bottom = 32.dp)&#10;            )&#10;&#10;            Button(&#10;                onClick = { onNavigateToDashboard() },&#10;                colors = ButtonDefaults.buttonColors(containerColor = Color.White),&#10;                shape = RoundedCornerShape(8.dp),&#10;                modifier = Modifier.fillMaxWidth()&#10;            ) {&#10;                Text(&#10;                    text = &quot;Get Started&quot;,&#10;                    color = Color.Black,&#10;                    fontSize = 16.sp,&#10;                    fontWeight = FontWeight.SemiBold&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true, name = &quot;Home Screen Preview&quot;)&#10;@Composable&#10;fun HomeScreenPreview() {&#10;    NeuroViewTheme {&#10;        HomeScreen(&#10;            paddingValues = PaddingValues(0.dp),&#10;            onNavigateToDashboard = {},&#10;            onNavigateToUpload = {},&#10;            onNavigateToPastRecords = {}&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/neuroview/screens/PastRecordsScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/neuroview/screens/PastRecordsScreen.kt" />
              <option name="originalContent" value="package com.example.neuroview.screens&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import coil.compose.rememberAsyncImagePainter&#10;import com.example.neuroview.components.BottomNavigationBar&#10;import com.example.neuroview.components.TopAppBar&#10;import com.example.neuroview.network.ApiService&#10;import com.example.neuroview.network.ImageData&#10;import kotlinx.coroutines.launch&#10;import java.net.URLEncoder&#10;import java.nio.charset.StandardCharsets&#10;import java.text.SimpleDateFormat&#10;import java.util.*&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import kotlinx.serialization.encodeToString&#10;import kotlinx.serialization.json.Json&#10;&#10;@Composable&#10;fun PastRecordsScreen(&#10;    paddingValues: PaddingValues,&#10;    onNavigateToHome: () -&gt; Unit,&#10;    onNavigateToDashboard: () -&gt; Unit,&#10;    onNavigateToUpload: () -&gt; Unit,&#10;    onNavigateToResult: (String, String) -&gt; Unit&#10;) {&#10;    val apiService = remember { ApiService() }&#10;    var pastRecords by remember { mutableStateOf&lt;List&lt;ImageData&gt;&gt;(emptyList()) }&#10;    var isLoading by remember { mutableStateOf(true) }&#10;    var errorMessage by remember { mutableStateOf&lt;String?&gt;(null) }&#10;    var selectedFilter by remember { mutableStateOf&lt;String?&gt;(null) }&#10;&#10;    val coroutineScope = rememberCoroutineScope()&#10;&#10;    LaunchedEffect(Unit) {&#10;        launch {&#10;            val result = apiService.getPastRecords()&#10;            isLoading = false&#10;            result.onSuccess { response -&gt;&#10;                pastRecords = response.data&#10;                errorMessage = null&#10;            }.onFailure { e -&gt;&#10;                errorMessage = &quot;Failed to fetch records: ${e.message}&quot;&#10;                pastRecords = emptyList()&#10;            }&#10;        }&#10;    }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                backgroundColor = Color.Black,&#10;                textColor = Color.White,&#10;                logoSize = 42,&#10;                titleFontSize = 28&#10;            )&#10;        },&#10;        bottomBar = {&#10;            BottomNavigationBar(&#10;                currentRoute = &quot;past_records&quot;,&#10;                onNavigateToHome = onNavigateToHome,&#10;                onNavigateToDashboard = onNavigateToDashboard,&#10;                onNavigateToUpload = onNavigateToUpload,&#10;                onNavigateToPastRecords = { /* Already on this screen */ },&#10;                bottomPadding = 18,&#10;                navBarHeight = 80,&#10;                regularIconSize = 32,&#10;                fabIconSize = 32,&#10;                fabSize = 64,&#10;                navBarWidth = 0.8f,&#10;                horizontalPadding = 16&#10;            )&#10;        }&#10;    ) { innerPaddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .background(Color.Black)&#10;                .padding(paddingValues) // Apply outer padding from Activity&#10;                .padding(innerPaddingValues) // Apply inner padding from Scaffold&#10;                .padding(horizontal = 16.dp, vertical = 8.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            Text(&#10;                text = &quot;COLLECTIONS&quot;,&#10;                fontSize = 18.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                color = Color(0xFF737373),&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(vertical = 4.dp),&#10;                textAlign = TextAlign.Center&#10;            )&#10;&#10;            Text(&#10;                text = &quot;Repository of NeuroView&quot;,&#10;                fontSize = 22.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                color = Color.White,&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(bottom = 16.dp),&#10;                textAlign = TextAlign.Center&#10;            )&#10;&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(bottom = 16.dp),&#10;                horizontalArrangement = Arrangement.SpaceAround,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                FilterChip(&#10;                    text = &quot;Glioma&quot;,&#10;                    isSelected = selectedFilter == &quot;glioma&quot;&#10;                ) {&#10;                    selectedFilter = if (selectedFilter == &quot;glioma&quot;) null else &quot;glioma&quot;&#10;                }&#10;                FilterChip(&#10;                    text = &quot;No Tumor&quot;,&#10;                    isSelected = selectedFilter == &quot;notumor&quot;&#10;                ) {&#10;                    selectedFilter = if (selectedFilter == &quot;notumor&quot;) null else &quot;notumor&quot;&#10;                }&#10;                FilterChip(&#10;                    text = &quot;Pituitary&quot;,&#10;                    isSelected = selectedFilter == &quot;pituitary&quot;&#10;                ) {&#10;                    selectedFilter = if (selectedFilter == &quot;pituitary&quot;) null else &quot;pituitary&quot;&#10;                }&#10;                FilterChip(&#10;                    text = &quot;Meningioma&quot;,&#10;                    isSelected = selectedFilter == &quot;meningioma&quot;&#10;                ) {&#10;                    selectedFilter = if (selectedFilter == &quot;meningioma&quot;) null else &quot;meningioma&quot;&#10;                }&#10;            }&#10;&#10;            if (isLoading) {&#10;                CircularProgressIndicator(color = Color.White)&#10;                Text(&quot;Loading records...&quot;, color = Color.White, modifier = Modifier.padding(top = 16.dp))&#10;            } else if (errorMessage != null) {&#10;                Text(&#10;                    text = errorMessage ?: &quot;An unknown error occurred.&quot;,&#10;                    color = Color.Red,&#10;                    modifier = Modifier.padding(top = 16.dp)&#10;                )&#10;                Button(onClick = {&#10;                    isLoading = true&#10;                    errorMessage = null&#10;                    coroutineScope.launch {&#10;                        val result = apiService.getPastRecords()&#10;                        isLoading = false&#10;                        result.onSuccess { response -&gt;&#10;                            pastRecords = response.data&#10;                            errorMessage = null&#10;                        }.onFailure { e -&gt;&#10;                            errorMessage = &quot;Failed to fetch records: ${e.message}&quot;&#10;                            pastRecords = emptyList()&#10;                        }&#10;                    }&#10;                }) {&#10;                    Text(&quot;Retry&quot;)&#10;                }&#10;            } else {&#10;                val filteredRecords = remember(pastRecords, selectedFilter) {&#10;                    if (selectedFilter == null) {&#10;                        pastRecords&#10;                    } else {&#10;                        pastRecords.filter { it.information?.tumor_type?.lowercase(Locale.getDefault()) == selectedFilter?.lowercase(Locale.getDefault()) }&#10;                    }&#10;                }&#10;&#10;                if (filteredRecords.isEmpty()) {&#10;                    Column(&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        horizontalAlignment = Alignment.CenterHorizontally,&#10;                        verticalArrangement = Arrangement.Center&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;No records found for the selected filter.&quot;,&#10;                            color = Color.White,&#10;                            fontSize = 16.sp,&#10;                            textAlign = TextAlign.Center,&#10;                            modifier = Modifier.padding(16.dp)&#10;                        )&#10;                        if (selectedFilter != null) {&#10;                            Button(onClick = { selectedFilter = null }) {&#10;                                Text(&quot;Show All Records&quot;)&#10;                            }&#10;                        }&#10;                    }&#10;                } else {&#10;                    LazyColumn(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        contentPadding = PaddingValues(bottom = 16.dp),&#10;                        verticalArrangement = Arrangement.spacedBy(16.dp),&#10;                        horizontalAlignment = Alignment.CenterHorizontally&#10;                    ) {&#10;                        // Re-introducing the chunked(2) logic for 2 columns&#10;                        val chunkedRecords = filteredRecords.chunked(2)&#10;                        items(chunkedRecords) { rowItems -&gt;&#10;                            Row(&#10;                                modifier = Modifier.fillMaxWidth(),&#10;                                horizontalArrangement = Arrangement.SpaceAround // Space out items in the row&#10;                            ) {&#10;                                rowItems.forEach { record -&gt;&#10;                                    // Each card takes half the width, with padding in between&#10;                                    // We use `weight(1f)` and `fillMaxHeight()` to make them share space and maintain height&#10;                                    Box(modifier = Modifier.weight(1f).padding(horizontal = 8.dp)) {&#10;                                        RecordCard(&#10;                                            record = record,&#10;                                            onCardClick = { clickedRecord -&gt;&#10;                                                // Convert ImageData to PredictionData format for ResultScreen&#10;                                                clickedRecord.information?.let { predictionInfo -&gt;&#10;                                                    try {&#10;                                                        val json = Json {&#10;                                                            ignoreUnknownKeys = true&#10;                                                            isLenient = true&#10;                                                        }&#10;                                                        val predictionJson = json.encodeToString(predictionInfo)&#10;                                                        onNavigateToResult(predictionJson, clickedRecord.url)&#10;                                                    } catch (e: Exception) {&#10;                                                        println(&quot;NeuroView: Failed to encode data for navigation: ${e.message}&quot;)&#10;                                                    }&#10;                                                }&#10;                                            }&#10;                                        )&#10;                                    }&#10;                                }&#10;                                // If there's only one item in the last row, add an empty box to balance&#10;                                if (rowItems.size == 1) {&#10;                                    Spacer(modifier = Modifier.weight(1f).padding(horizontal = 8.dp))&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun FilterChip(text: String, isSelected: Boolean, onClick: () -&gt; Unit) {&#10;    Surface(&#10;        shape = RoundedCornerShape(20.dp),&#10;        color = if (isSelected) Color.White else Color.DarkGray,&#10;        modifier = Modifier&#10;            .padding(horizontal = 4.dp)&#10;            .clickable(onClick = onClick)&#10;    ) {&#10;        Text(&#10;            text = text,&#10;            color = if (isSelected) Color.Black else Color.White,&#10;            fontSize = 14.sp,&#10;            modifier = Modifier.padding(horizontal = 12.dp, vertical = 8.dp)&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun RecordCard(record: ImageData, onCardClick: (ImageData) -&gt; Unit) {&#10;    // Keep fixed sizes for the card and image as per the previous successful iteration&#10;    val cardSize = 180.dp&#10;    val imageHeight = 100.dp&#10;&#10;    Card(&#10;        modifier = Modifier&#10;            .width(cardSize) // Fixed width for each card&#10;            .height(cardSize) // Fixed height for each card, making it square&#10;            .clickable { onCardClick(record) }, // Make entire card clickable&#10;        shape = RoundedCornerShape(16.dp),&#10;        colors = CardDefaults.cardColors(containerColor = Color(0xFF1C1C1E)),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(12.dp),&#10;            horizontalAlignment = Alignment.Start,&#10;            verticalArrangement = Arrangement.SpaceBetween&#10;        ) {&#10;            // Image Box with fixed height&#10;            Box(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(imageHeight)&#10;                    .clip(RoundedCornerShape(8.dp))&#10;                    .background(Color.Black),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Image(&#10;                    painter = rememberAsyncImagePainter(model = record.url),&#10;                    contentDescription = &quot;Brain Scan Image&quot;,&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    contentScale = ContentScale.Fit,&#10;                    alignment = Alignment.Center&#10;                )&#10;            }&#10;&#10;            // Text elements&#10;            Text(&#10;                text = record.information?.tumor_type?.replaceFirstChar { if (it.isLowerCase()) it.titlecase(Locale.getDefault()) else it.toString() } ?: &quot;N/A&quot;,&#10;                color = Color.White,&#10;                fontSize = 16.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                maxLines = 1,&#10;                overflow = TextOverflow.Ellipsis&#10;            )&#10;&#10;            Text(&#10;                text = record.information?.confidence?.let { &quot;%.2f&quot;.format(it * 100) + &quot;%&quot; } ?: &quot;N/A&quot;,&#10;                color = Color.LightGray,&#10;                fontSize = 12.sp&#10;            )&#10;&#10;            // Date and View &gt; in a Row&#10;            val inputFormat = SimpleDateFormat(&quot;yyyy-MM-dd'T'HH:mm:ss.SSSSSSXXX&quot;, Locale.getDefault())&#10;            val outputFormat = SimpleDateFormat(&quot;MMMM d, yyyy&quot;, Locale.getDefault())&#10;            val date = try {&#10;                record.uploaded_at?.let { inputFormat.parse(it) }&#10;            } catch (_: Exception) {&#10;                null&#10;            }&#10;            val formattedDate = date?.let { outputFormat.format(it) } ?: &quot;N/A&quot;&#10;&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Text(&#10;                    text = formattedDate,&#10;                    color = Color.Gray,&#10;                    fontSize = 10.sp&#10;                )&#10;                Text(&#10;                    text = &quot;View &gt;&quot;,&#10;                    color = Color.White,&#10;                    fontSize = 12.sp,&#10;                    fontWeight = FontWeight.SemiBold,&#10;                    modifier = Modifier.padding(4.dp)&#10;                )&#10;            }&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.neuroview.screens&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import coil.compose.rememberAsyncImagePainter&#10;import com.example.neuroview.components.BottomNavigationBar&#10;import com.example.neuroview.components.TopAppBar&#10;import com.example.neuroview.network.ApiService&#10;import com.example.neuroview.network.ImageData&#10;import kotlinx.coroutines.launch&#10;import java.net.URLEncoder&#10;import java.nio.charset.StandardCharsets&#10;import java.text.SimpleDateFormat&#10;import java.util.*&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import kotlinx.serialization.encodeToString&#10;import kotlinx.serialization.json.Json&#10;&#10;@Composable&#10;fun PastRecordsScreen(&#10;    paddingValues: PaddingValues,&#10;    onNavigateToHome: () -&gt; Unit,&#10;    onNavigateToDashboard: () -&gt; Unit,&#10;    onNavigateToUpload: () -&gt; Unit,&#10;    onNavigateToResult: (String, String) -&gt; Unit&#10;) {&#10;    val apiService = remember { ApiService() }&#10;    var pastRecords by remember { mutableStateOf&lt;List&lt;ImageData&gt;&gt;(emptyList()) }&#10;    var isLoading by remember { mutableStateOf(true) }&#10;    var errorMessage by remember { mutableStateOf&lt;String?&gt;(null) }&#10;    var selectedFilter by remember { mutableStateOf&lt;String?&gt;(null) }&#10;&#10;    val coroutineScope = rememberCoroutineScope()&#10;&#10;    LaunchedEffect(Unit) {&#10;        launch {&#10;            val result = apiService.getPastRecords()&#10;            isLoading = false&#10;            result.onSuccess { response -&gt;&#10;                pastRecords = response.data&#10;                errorMessage = null&#10;&#10;                // Debug logging to see what data we're getting&#10;                println(&quot;NeuroView: Fetched ${response.data.size} records&quot;)&#10;                response.data.forEachIndexed { index, record -&gt;&#10;                    println(&quot;NeuroView: Record $index:&quot;)&#10;                    println(&quot;  - ID: ${record.id}&quot;)&#10;                    println(&quot;  - Name: ${record.name}&quot;)&#10;                    println(&quot;  - URL: ${record.url}&quot;)&#10;                    println(&quot;  - Uploaded: ${record.uploaded_at}&quot;)&#10;                    println(&quot;  - Information: ${record.information}&quot;)&#10;                    if (record.information != null) {&#10;                        println(&quot;    - Tumor Type: ${record.information.tumor_type}&quot;)&#10;                        println(&quot;    - Confidence: ${record.information.confidence}&quot;)&#10;                        println(&quot;    - Success: ${record.information.success}&quot;)&#10;                    } else {&#10;                        println(&quot;    - Information is NULL&quot;)&#10;                    }&#10;                }&#10;            }.onFailure { e -&gt;&#10;                errorMessage = &quot;Failed to fetch records: ${e.message}&quot;&#10;                pastRecords = emptyList()&#10;            }&#10;        }&#10;    }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                backgroundColor = Color.Black,&#10;                textColor = Color.White,&#10;                logoSize = 42,&#10;                titleFontSize = 28&#10;            )&#10;        },&#10;        bottomBar = {&#10;            BottomNavigationBar(&#10;                currentRoute = &quot;past_records&quot;,&#10;                onNavigateToHome = onNavigateToHome,&#10;                onNavigateToDashboard = onNavigateToDashboard,&#10;                onNavigateToUpload = onNavigateToUpload,&#10;                onNavigateToPastRecords = { /* Already on this screen */ },&#10;                bottomPadding = 18,&#10;                navBarHeight = 80,&#10;                regularIconSize = 32,&#10;                fabIconSize = 32,&#10;                fabSize = 64,&#10;                navBarWidth = 0.8f,&#10;                horizontalPadding = 16&#10;            )&#10;        }&#10;    ) { innerPaddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .background(Color.Black)&#10;                .padding(paddingValues) // Apply outer padding from Activity&#10;                .padding(innerPaddingValues) // Apply inner padding from Scaffold&#10;                .padding(horizontal = 16.dp, vertical = 8.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            Text(&#10;                text = &quot;COLLECTIONS&quot;,&#10;                fontSize = 18.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                color = Color(0xFF737373),&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(vertical = 4.dp),&#10;                textAlign = TextAlign.Center&#10;            )&#10;&#10;            Text(&#10;                text = &quot;Repository of NeuroView&quot;,&#10;                fontSize = 22.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                color = Color.White,&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(bottom = 16.dp),&#10;                textAlign = TextAlign.Center&#10;            )&#10;&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(bottom = 16.dp),&#10;                horizontalArrangement = Arrangement.SpaceAround,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                FilterChip(&#10;                    text = &quot;Glioma&quot;,&#10;                    isSelected = selectedFilter == &quot;glioma&quot;&#10;                ) {&#10;                    selectedFilter = if (selectedFilter == &quot;glioma&quot;) null else &quot;glioma&quot;&#10;                }&#10;                FilterChip(&#10;                    text = &quot;No Tumor&quot;,&#10;                    isSelected = selectedFilter == &quot;notumor&quot;&#10;                ) {&#10;                    selectedFilter = if (selectedFilter == &quot;notumor&quot;) null else &quot;notumor&quot;&#10;                }&#10;                FilterChip(&#10;                    text = &quot;Pituitary&quot;,&#10;                    isSelected = selectedFilter == &quot;pituitary&quot;&#10;                ) {&#10;                    selectedFilter = if (selectedFilter == &quot;pituitary&quot;) null else &quot;pituitary&quot;&#10;                }&#10;                FilterChip(&#10;                    text = &quot;Meningioma&quot;,&#10;                    isSelected = selectedFilter == &quot;meningioma&quot;&#10;                ) {&#10;                    selectedFilter = if (selectedFilter == &quot;meningioma&quot;) null else &quot;meningioma&quot;&#10;                }&#10;            }&#10;&#10;            if (isLoading) {&#10;                CircularProgressIndicator(color = Color.White)&#10;                Text(&quot;Loading records...&quot;, color = Color.White, modifier = Modifier.padding(top = 16.dp))&#10;            } else if (errorMessage != null) {&#10;                Text(&#10;                    text = errorMessage ?: &quot;An unknown error occurred.&quot;,&#10;                    color = Color.Red,&#10;                    modifier = Modifier.padding(top = 16.dp)&#10;                )&#10;                Button(onClick = {&#10;                    isLoading = true&#10;                    errorMessage = null&#10;                    coroutineScope.launch {&#10;                        val result = apiService.getPastRecords()&#10;                        isLoading = false&#10;                        result.onSuccess { response -&gt;&#10;                            pastRecords = response.data&#10;                            errorMessage = null&#10;                        }.onFailure { e -&gt;&#10;                            errorMessage = &quot;Failed to fetch records: ${e.message}&quot;&#10;                            pastRecords = emptyList()&#10;                        }&#10;                    }&#10;                }) {&#10;                    Text(&quot;Retry&quot;)&#10;                }&#10;            } else {&#10;                val filteredRecords = remember(pastRecords, selectedFilter) {&#10;                    if (selectedFilter == null) {&#10;                        pastRecords&#10;                    } else {&#10;                        pastRecords.filter { it.information?.tumor_type?.lowercase(Locale.getDefault()) == selectedFilter?.lowercase(Locale.getDefault()) }&#10;                    }&#10;                }&#10;&#10;                if (filteredRecords.isEmpty()) {&#10;                    Column(&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        horizontalAlignment = Alignment.CenterHorizontally,&#10;                        verticalArrangement = Arrangement.Center&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;No records found for the selected filter.&quot;,&#10;                            color = Color.White,&#10;                            fontSize = 16.sp,&#10;                            textAlign = TextAlign.Center,&#10;                            modifier = Modifier.padding(16.dp)&#10;                        )&#10;                        if (selectedFilter != null) {&#10;                            Button(onClick = { selectedFilter = null }) {&#10;                                Text(&quot;Show All Records&quot;)&#10;                            }&#10;                        }&#10;                    }&#10;                } else {&#10;                    LazyColumn(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        contentPadding = PaddingValues(bottom = 16.dp),&#10;                        verticalArrangement = Arrangement.spacedBy(16.dp),&#10;                        horizontalAlignment = Alignment.CenterHorizontally&#10;                    ) {&#10;                        // Re-introducing the chunked(2) logic for 2 columns&#10;                        val chunkedRecords = filteredRecords.chunked(2)&#10;                        items(chunkedRecords) { rowItems -&gt;&#10;                            Row(&#10;                                modifier = Modifier.fillMaxWidth(),&#10;                                horizontalArrangement = Arrangement.SpaceAround // Space out items in the row&#10;                            ) {&#10;                                rowItems.forEach { record -&gt;&#10;                                    // Each card takes half the width, with padding in between&#10;                                    // We use `weight(1f)` and `fillMaxHeight()` to make them share space and maintain height&#10;                                    Box(modifier = Modifier.weight(1f).padding(horizontal = 8.dp)) {&#10;                                        RecordCard(&#10;                                            record = record,&#10;                                            onCardClick = { clickedRecord -&gt;&#10;                                                // Convert ImageData to PredictionData format for ResultScreen&#10;                                                clickedRecord.information?.let { predictionInfo -&gt;&#10;                                                    try {&#10;                                                        val json = Json {&#10;                                                            ignoreUnknownKeys = true&#10;                                                            isLenient = true&#10;                                                        }&#10;                                                        val predictionJson = json.encodeToString(predictionInfo)&#10;                                                        onNavigateToResult(predictionJson, clickedRecord.url)&#10;                                                    } catch (e: Exception) {&#10;                                                        println(&quot;NeuroView: Failed to encode data for navigation: ${e.message}&quot;)&#10;                                                    }&#10;                                                }&#10;                                            }&#10;                                        )&#10;                                    }&#10;                                }&#10;                                // If there's only one item in the last row, add an empty box to balance&#10;                                if (rowItems.size == 1) {&#10;                                    Spacer(modifier = Modifier.weight(1f).padding(horizontal = 8.dp))&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun FilterChip(text: String, isSelected: Boolean, onClick: () -&gt; Unit) {&#10;    Surface(&#10;        shape = RoundedCornerShape(20.dp),&#10;        color = if (isSelected) Color.White else Color.DarkGray,&#10;        modifier = Modifier&#10;            .padding(horizontal = 4.dp)&#10;            .clickable(onClick = onClick)&#10;    ) {&#10;        Text(&#10;            text = text,&#10;            color = if (isSelected) Color.Black else Color.White,&#10;            fontSize = 14.sp,&#10;            modifier = Modifier.padding(horizontal = 12.dp, vertical = 8.dp)&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun RecordCard(record: ImageData, onCardClick: (ImageData) -&gt; Unit) {&#10;    // Keep fixed sizes for the card and image as per the previous successful iteration&#10;    val cardSize = 180.dp&#10;    val imageHeight = 100.dp&#10;&#10;    Card(&#10;        modifier = Modifier&#10;            .width(cardSize) // Fixed width for each card&#10;            .height(cardSize) // Fixed height for each card, making it square&#10;            .clickable { onCardClick(record) }, // Make entire card clickable&#10;        shape = RoundedCornerShape(16.dp),&#10;        colors = CardDefaults.cardColors(containerColor = Color(0xFF1C1C1E)),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(12.dp),&#10;            horizontalAlignment = Alignment.Start,&#10;            verticalArrangement = Arrangement.SpaceBetween&#10;        ) {&#10;            // Image Box with fixed height&#10;            Box(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(imageHeight)&#10;                    .clip(RoundedCornerShape(8.dp))&#10;                    .background(Color.Black),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Image(&#10;                    painter = rememberAsyncImagePainter(model = record.url),&#10;                    contentDescription = &quot;Brain Scan Image&quot;,&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    contentScale = ContentScale.Fit,&#10;                    alignment = Alignment.Center&#10;                )&#10;            }&#10;&#10;            // Text elements&#10;            val tumorType = record.information?.tumor_type?.replaceFirstChar { &#10;                if (it.isLowerCase()) it.titlecase(Locale.getDefault()) else it.toString() &#10;            } ?: run {&#10;                // Fallback: Show &quot;Analysis Pending&quot; instead of N/A for missing predictions&#10;                &quot;Analysis Pending&quot;&#10;            }&#10;            &#10;            Text(&#10;                text = tumorType,&#10;                color = if (tumorType == &quot;Analysis Pending&quot;) Color.Gray else Color.White,&#10;                fontSize = 16.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                maxLines = 1,&#10;                overflow = TextOverflow.Ellipsis&#10;            )&#10;&#10;            val confidenceText = record.information?.confidence?.let { &#10;                &quot;%.2f&quot;.format(it * 100) + &quot;%&quot; &#10;            } ?: run {&#10;                // Show different message instead of N/A&#10;                if (record.information == null) &quot;Pending&quot; else &quot;N/A&quot;&#10;            }&#10;            &#10;            Text(&#10;                text = confidenceText,&#10;                color = Color.LightGray,&#10;                fontSize = 12.sp&#10;            )&#10;&#10;            // Date and View &gt; in a Row&#10;            val inputFormat = SimpleDateFormat(&quot;yyyy-MM-dd'T'HH:mm:ss.SSSSSSXXX&quot;, Locale.getDefault())&#10;            val outputFormat = SimpleDateFormat(&quot;MMMM d, yyyy&quot;, Locale.getDefault())&#10;            val date = try {&#10;                record.uploaded_at?.let { inputFormat.parse(it) }&#10;            } catch (_: Exception) {&#10;                null&#10;            }&#10;            val formattedDate = date?.let { outputFormat.format(it) } ?: &quot;N/A&quot;&#10;&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Text(&#10;                    text = formattedDate,&#10;                    color = Color.Gray,&#10;                    fontSize = 10.sp&#10;                )&#10;                Text(&#10;                    text = &quot;View &gt;&quot;,&#10;                    color = Color.White,&#10;                    fontSize = 12.sp,&#10;                    fontWeight = FontWeight.SemiBold,&#10;                    modifier = Modifier.padding(4.dp)&#10;                )&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/neuroview/screens/ResultScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/neuroview/screens/ResultScreen.kt" />
              <option name="originalContent" value="package com.example.neuroview.screens&#10;&#10;import android.net.Uri&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import coil.compose.rememberAsyncImagePainter&#10;import androidx.navigation.NavController&#10;import androidx.navigation.compose.rememberNavController&#10;import com.example.neuroview.Routes&#10;import com.example.neuroview.components.BottomNavigationBar&#10;import com.example.neuroview.components.TopAppBar&#10;import com.example.neuroview.network.PredictionData&#10;import kotlinx.serialization.json.Json&#10;import java.net.URLDecoder&#10;&#10;@Composable&#10;fun ResultScreen(&#10;    predictionJson: String? = null,&#10;    imageUri: String? = null,&#10;    paddingValues: PaddingValues,&#10;    onNavigateToHome: () -&gt; Unit,&#10;    onNavigateToDashboard: () -&gt; Unit,&#10;    onNavigateToUpload: () -&gt; Unit,&#10;    onNavigateToPastRecords: () -&gt; Unit&#10;) {&#10;&#10;    val predictionData = remember(predictionJson) {&#10;        predictionJson?.let { json -&gt;&#10;            try {&#10;                println(&quot;NeuroView: Raw prediction JSON: $json&quot;)&#10;                &#10;                // Try different decoding approaches&#10;                val decodedJson = when {&#10;                    json.startsWith(&quot;{&quot;) -&gt; {&#10;                        // Already decoded JSON&#10;                        println(&quot;NeuroView: JSON appears to be already decoded&quot;)&#10;                        json&#10;                    }&#10;                    else -&gt; {&#10;                        // URL encoded JSON, decode it&#10;                        println(&quot;NeuroView: Decoding URL encoded JSON&quot;)&#10;                        URLDecoder.decode(json, &quot;UTF-8&quot;)&#10;                    }&#10;                }&#10;                &#10;                println(&quot;NeuroView: Decoded JSON: $decodedJson&quot;)&#10;                &#10;                val jsonParser = Json {&#10;                    ignoreUnknownKeys = true&#10;                    isLenient = true&#10;                    coerceInputValues = true&#10;                }&#10;                jsonParser.decodeFromString&lt;PredictionData&gt;(decodedJson)&#10;            } catch (e: Exception) {&#10;                println(&quot;NeuroView: Error parsing prediction data: ${e.message}&quot;)&#10;                e.printStackTrace()&#10;                null&#10;            }&#10;        }&#10;    }&#10;&#10;    // Process the image URI&#10;    val decodedImageUri = remember(imageUri) {&#10;        imageUri?.let { uri -&gt;&#10;            try {&#10;                val decodedUri = URLDecoder.decode(uri, &quot;UTF-8&quot;)&#10;                println(&quot;NeuroView: Decoded image URI: $decodedUri&quot;)&#10;                Uri.parse(decodedUri)&#10;            } catch (e: Exception) {&#10;                println(&quot;NeuroView: Failed to decode image URI: ${e.message}&quot;)&#10;                null&#10;            }&#10;        }&#10;    }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                backgroundColor = Color.Black,&#10;                textColor = Color.White,&#10;                logoSize = 42,&#10;                titleFontSize = 28&#10;            )&#10;        },&#10;        bottomBar = {&#10;            BottomNavigationBar(&#10;                currentRoute = &quot;result&quot;,&#10;                onNavigateToHome = onNavigateToHome,&#10;                onNavigateToDashboard = onNavigateToDashboard,&#10;                onNavigateToUpload = onNavigateToUpload,&#10;                onNavigateToPastRecords = onNavigateToPastRecords,&#10;                bottomPadding = 18,&#10;                navBarHeight = 80,&#10;                regularIconSize = 32,&#10;                fabIconSize = 32,&#10;                fabSize = 64,&#10;                navBarWidth = 0.8f,&#10;                horizontalPadding = 16&#10;            )&#10;        }&#10;    ) { innerPaddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .background(Color.Black)&#10;                .padding(paddingValues) // Apply outer padding from Activity&#10;                .padding(innerPaddingValues) // Apply inner padding from Scaffold&#10;                .padding(16.dp)&#10;                .verticalScroll(rememberScrollState()),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Text(&#10;                text = &quot;RESULT&quot;,&#10;                fontSize = 20.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                color = Color(0xFF737373),&#10;                textAlign = TextAlign.Center&#10;            )&#10;            &#10;            Spacer(modifier = Modifier.height(2.dp))&#10;            &#10;            if (predictionData != null &amp;&amp; predictionData.success) {&#10;                PredictionResultContent(&#10;                    predictionData = predictionData,&#10;                    imageUri = decodedImageUri&#10;                )&#10;            } else {&#10;                NoResultContent(&#10;                    predictionData = predictionData,&#10;                    rawJson = predictionJson,&#10;                    hasRawJson = predictionJson != null,&#10;                    imageUri = decodedImageUri,&#10;                    debugInfo = mapOf(&#10;                        &quot;PredictionJson&quot; to predictionJson&#10;                    )&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun PredictionResultContent(&#10;    predictionData: PredictionData,&#10;    imageUri: Uri? = null&#10;) {&#10;    val tumorType = predictionData.tumor_type ?: &quot;Unknown&quot;&#10;    val confidence = predictionData.confidence ?: 0.0&#10;    val classProbs = predictionData.class_probabilities ?: emptyMap()&#10;&#10;    // Main prediction result card&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(vertical = 2.dp),&#10;        colors = CardDefaults.cardColors(containerColor = Color.Black)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(20.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Box(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Text(&#10;                    text = tumorType.replaceFirstChar { it.uppercase() },&#10;                    fontSize = 24.sp,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = Color.White,&#10;                    textAlign = TextAlign.Center&#10;                )&#10;            }&#10;        }&#10;    }&#10;&#10;    Spacer(modifier = Modifier.height(8.dp))&#10;&#10;    imageUri?.let { uri -&gt;&#10;        Card(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(vertical = 8.dp),&#10;            colors = CardDefaults.cardColors(containerColor = Color.Black),&#10;            shape = RoundedCornerShape(12.dp)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.padding(16.dp),&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                Text(&#10;                    text = &quot;INPUT IMAGE&quot;,&#10;                    fontSize = 16.sp,&#10;                    fontWeight = FontWeight.SemiBold,&#10;                    color = Color(0xFF737373),&#10;                    textAlign = TextAlign.Center&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(12.dp))&#10;&#10;                Image(&#10;                    painter = rememberAsyncImagePainter(model = uri),&#10;                    contentDescription = &quot;Uploaded brain scan&quot;,&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .aspectRatio(1f)&#10;                        .clip(RoundedCornerShape(8.dp)),&#10;                    contentScale = ContentScale.Crop&#10;                )&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;    }&#10;&#10;    // Class probabilities&#10;    if (classProbs.isNotEmpty()) {&#10;        Column(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Text(&#10;                text = &quot;CONFIDENCE SCORES&quot;,&#10;                fontSize = 16.sp,&#10;                fontWeight = FontWeight.SemiBold,&#10;                color = Color(0xFF737373),&#10;                modifier = Modifier.padding(bottom = 8.dp)&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(12.dp))&#10;&#10;            classProbs.toList().sortedByDescending { it.second }&#10;                .forEachIndexed { index, (className, probability) -&gt;&#10;                    ProbabilityBar(&#10;                        className = className,&#10;                        probability = probability&#10;                    )&#10;                    if (index &lt; classProbs.size - 1) {&#10;                        Spacer(modifier = Modifier.height(8.dp))&#10;                    }&#10;                }&#10;        }&#10;    }&#10;&#10;    Spacer(modifier = Modifier.height(32.dp))&#10;&#10;    // Insights section&#10;    InsightsSection(tumorType = tumorType, confidence = confidence)&#10;&#10;    Spacer(modifier = Modifier.height(32.dp))&#10;}&#10;&#10;&#10;@Composable&#10;fun ProbabilityBar(className: String, probability: Double) {&#10;    Column(modifier = Modifier.fillMaxWidth()) {&#10;&#10;&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Text(&#10;                text = className.uppercase(),&#10;                fontSize = 14.sp,&#10;                fontWeight = FontWeight.Medium,&#10;                color = Color.White,&#10;                modifier = Modifier.width(100.dp)&#10;            )&#10;&#10;            Spacer(modifier = Modifier.width(12.dp))&#10;&#10;            Box(&#10;                modifier = Modifier&#10;                    .weight(1f)&#10;                    .height(20.dp)&#10;                    .clip(RoundedCornerShape(10.dp))&#10;                    .background(Color(0xFF2A2A2A))&#10;            ) {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .fillMaxHeight()&#10;                        .fillMaxWidth(probability.toFloat())&#10;                        .clip(RoundedCornerShape(10.dp))&#10;                        .background(Color.White)&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.width(8.dp))&#10;&#10;            Text(&#10;                text = &quot;${(probability * 100).toInt()}%&quot;,&#10;                fontSize = 12.sp,&#10;                fontWeight = FontWeight.Medium,&#10;                color = Color(0xFF737373),&#10;                modifier = Modifier.width(40.dp)&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;&#10;@Composable&#10;fun InsightsSection(tumorType: String, confidence: Double) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(containerColor = Color.Black),&#10;        shape = RoundedCornerShape(12.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Text(&#10;                text = &quot;INSIGHTS&quot;,&#10;                fontSize = 16.sp,&#10;                fontWeight = FontWeight.SemiBold,&#10;                color = Color(0xFF737373),&#10;                textAlign = TextAlign.Center&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(12.dp))&#10;&#10;            val insights = getInsightsForTumorType(tumorType, confidence)&#10;            insights.forEach { insight -&gt;&#10;                Text(&#10;                    text = insight,&#10;                    fontSize = 14.sp,&#10;                    fontWeight = FontWeight.Normal,&#10;                    color = Color.White,&#10;                    textAlign = TextAlign.Center,&#10;                    lineHeight = 20.sp,&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;&#10;@Composable&#10;fun NoResultContent(&#10;    predictionData: PredictionData? = null,&#10;    rawJson: String? = null,&#10;    hasRawJson: Boolean = false,&#10;    imageUri: Uri? = null,&#10;    debugInfo: Map&lt;String, String?&gt; = emptyMap()&#10;) {&#10;    Column(&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        modifier = Modifier.fillMaxWidth()&#10;    ) {&#10;        Text(&#10;            text = &quot;No Analysis Available&quot;,&#10;            fontSize = 18.sp,&#10;            fontWeight = FontWeight.SemiBold,&#10;            color = Color.White&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        // Show uploaded image even if analysis failed&#10;        imageUri?.let { uri -&gt;&#10;            Card(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(vertical = 8.dp),&#10;                colors = CardDefaults.cardColors(containerColor = Color(0xFF1A1A1A)),&#10;                shape = RoundedCornerShape(12.dp)&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.padding(16.dp),&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Your Uploaded Image&quot;,&#10;                        fontSize = 16.sp,&#10;                        fontWeight = FontWeight.SemiBold,&#10;                        color = Color(0xFF737373),&#10;                        textAlign = TextAlign.Center&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(12.dp))&#10;&#10;                    Image(&#10;                        painter = rememberAsyncImagePainter(model = uri),&#10;                        contentDescription = &quot;Uploaded brain scan&quot;,&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .aspectRatio(1f)&#10;                            .clip(RoundedCornerShape(8.dp)),&#10;                        contentScale = ContentScale.Crop&#10;                    )&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;        }&#10;&#10;        // Show different messages based on what data we have&#10;        when {&#10;            !hasRawJson -&gt; {&#10;                Text(&#10;                    text = &quot;No prediction data was received.\n\nThis means the navigation parameter was not passed correctly from the upload screen.\n\nCheck the debug info below to see what data was attempted to be passed.&quot;,&#10;                    fontSize = 14.sp,&#10;                    fontWeight = FontWeight.Normal,&#10;                    color = Color(0xFF737373),&#10;                    textAlign = TextAlign.Center&#10;                )&#10;            }&#10;            predictionData == null &amp;&amp; hasRawJson -&gt; {&#10;                Text(&#10;                    text = &quot;Prediction data was received but failed to parse.\n\nThe JSON format may be corrupted or invalid.&quot;,&#10;                    fontSize = 14.sp,&#10;                    fontWeight = FontWeight.Normal,&#10;                    color = Color(0xFFFF9800),&#10;                    textAlign = TextAlign.Center&#10;                )&#10;            }&#10;            predictionData != null &amp;&amp; !predictionData.success -&gt; {&#10;                Text(&#10;                    text = &quot;Analysis failed on the backend: ${predictionData.error ?: predictionData.message ?: &quot;Unknown error&quot;}&quot;,&#10;                    fontSize = 14.sp,&#10;                    fontWeight = FontWeight.Normal,&#10;                    color = Color(0xFFFF5722),&#10;                    textAlign = TextAlign.Center&#10;                )&#10;            }&#10;            else -&gt; {&#10;                Text(&#10;                    text = &quot;Unable to analyze the uploaded image.\n\nPlease try uploading a clear brain scan image.&quot;,&#10;                    fontSize = 14.sp,&#10;                    fontWeight = FontWeight.Normal,&#10;                    color = Color(0xFF737373),&#10;                    textAlign = TextAlign.Center&#10;                )&#10;            }&#10;        }&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        // Debug info card&#10;        Card(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            colors = CardDefaults.cardColors(containerColor = Color(0xFF1A1A1A)),&#10;            shape = RoundedCornerShape(8.dp)&#10;        ) {&#10;            Column(modifier = Modifier.padding(12.dp)) {&#10;                Text(&#10;                    text = &quot;Debug Information:&quot;,&#10;                    fontSize = 12.sp,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = Color(0xFF737373)&#10;                )&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;&#10;                debugInfo.forEach { (source, value) -&gt;&#10;                    val hasValue = !value.isNullOrBlank()&#10;                    Text(&#10;                        text = &quot;$source: ${if (hasValue) &quot;✓ (${value?.take(20)}...)&quot; else &quot;✗ No data&quot;}&quot;,&#10;                        fontSize = 10.sp,&#10;                        color = if (hasValue) Color(0xFF4CAF50) else Color(0xFFFF5722)&#10;                    )&#10;                }&#10;&#10;                if (hasRawJson) {&#10;                    Text(&#10;                        text = &quot;JSON Length: ${rawJson?.length ?: 0}&quot;,&#10;                        fontSize = 10.sp,&#10;                        color = Color(0xFF737373)&#10;                    )&#10;                }&#10;&#10;                predictionData?.let { data -&gt;&#10;                    Text(&#10;                        text = &quot;Parsed Success: ${data.success}&quot;,&#10;                        fontSize = 10.sp,&#10;                        color = if (data.success) Color(0xFF4CAF50) else Color(0xFFFF5722)&#10;                    )&#10;                    data.error?.let {&#10;                        Text(&#10;                            text = &quot;Error: $it&quot;,&#10;                            fontSize = 10.sp,&#10;                            color = Color(0xFFFF5722)&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;&#10;&#10;fun getInsightsForTumorType(tumorType: String, confidence: Double): List&lt;String&gt; {&#10;    val baseInsights = when (tumorType.lowercase()) {&#10;        &quot;glioma&quot; -&gt; listOf(&#10;            &quot;Gliomas are tumors that arise from glial cells in the brain&quot;,&#10;            &quot;They account for about 80% of malignant brain tumors&quot;,&#10;            &quot;Treatment typically involves surgery, radiation, and chemotherapy&quot;&#10;        )&#10;        &quot;meningioma&quot; -&gt; listOf(&#10;            &quot;Meningiomas arise from the meninges that cover the brain&quot;,&#10;            &quot;Most meningiomas are benign and grow slowly&quot;,&#10;            &quot;Treatment options include observation, surgery, or radiation therapy&quot;&#10;        )&#10;        &quot;pituitary&quot; -&gt; listOf(&#10;            &quot;Pituitary tumors occur in the pituitary gland&quot;,&#10;            &quot;Most are benign and may affect hormone production&quot;,&#10;            &quot;Treatment may include medication, surgery, or radiation&quot;&#10;        )&#10;        &quot;notumor&quot; -&gt; listOf(&#10;            &quot;No tumor detected in the brain scan&quot;,&#10;            &quot;The brain tissue appears normal&quot;,&#10;            &quot;Regular monitoring may still be recommended&quot;&#10;        )&#10;        else -&gt; listOf(&quot;Unable to provide specific insights for this classification&quot;)&#10;    }&#10;&#10;    val confidenceInsight = when {&#10;        confidence &gt;= 0.9 -&gt; &quot;Very high confidence in this prediction&quot;&#10;        confidence &gt;= 0.8 -&gt; &quot;High confidence in this prediction&quot;&#10;        confidence &gt;= 0.7 -&gt; &quot;Moderate confidence in this prediction&quot;&#10;        confidence &gt;= 0.6 -&gt; &quot;Fair confidence in this prediction&quot;&#10;        else -&gt; &quot;Low confidence - further analysis recommended&quot;&#10;    }&#10;&#10;    return baseInsights + confidenceInsight&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun ResultScreenPreview() {&#10;    val mockNavController = rememberNavController()&#10;    MaterialTheme {&#10;        ResultScreen(&#10;            navController = mockNavController,&#10;            predictionJson = null,&#10;            imageUri = null,&#10;            paddingValues = PaddingValues(0.dp)&#10;        )&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.neuroview.screens&#10;&#10;import android.net.Uri&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import coil.compose.rememberAsyncImagePainter&#10;import androidx.navigation.NavController&#10;import androidx.navigation.compose.rememberNavController&#10;import com.example.neuroview.Routes&#10;import com.example.neuroview.components.BottomNavigationBar&#10;import com.example.neuroview.components.TopAppBar&#10;import com.example.neuroview.network.PredictionData&#10;import kotlinx.serialization.json.Json&#10;import java.net.URLDecoder&#10;&#10;@Composable&#10;fun ResultScreen(&#10;    predictionJson: String? = null,&#10;    imageUri: String? = null,&#10;    paddingValues: PaddingValues,&#10;    onNavigateToHome: () -&gt; Unit,&#10;    onNavigateToDashboard: () -&gt; Unit,&#10;    onNavigateToUpload: () -&gt; Unit,&#10;    onNavigateToPastRecords: () -&gt; Unit&#10;) {&#10;&#10;    val predictionData = remember(predictionJson) {&#10;        predictionJson?.let { json -&gt;&#10;            try {&#10;                println(&quot;NeuroView: Raw prediction JSON: $json&quot;)&#10;                &#10;                // Try different decoding approaches&#10;                val decodedJson = when {&#10;                    json.startsWith(&quot;{&quot;) -&gt; {&#10;                        // Already decoded JSON&#10;                        println(&quot;NeuroView: JSON appears to be already decoded&quot;)&#10;                        json&#10;                    }&#10;                    else -&gt; {&#10;                        // URL encoded JSON, decode it&#10;                        println(&quot;NeuroView: Decoding URL encoded JSON&quot;)&#10;                        URLDecoder.decode(json, &quot;UTF-8&quot;)&#10;                    }&#10;                }&#10;                &#10;                println(&quot;NeuroView: Decoded JSON: $decodedJson&quot;)&#10;                &#10;                val jsonParser = Json {&#10;                    ignoreUnknownKeys = true&#10;                    isLenient = true&#10;                    coerceInputValues = true&#10;                }&#10;                jsonParser.decodeFromString&lt;PredictionData&gt;(decodedJson)&#10;            } catch (e: Exception) {&#10;                println(&quot;NeuroView: Error parsing prediction data: ${e.message}&quot;)&#10;                e.printStackTrace()&#10;                null&#10;            }&#10;        }&#10;    }&#10;&#10;    // Process the image URI&#10;    val decodedImageUri = remember(imageUri) {&#10;        imageUri?.let { uri -&gt;&#10;            try {&#10;                val decodedUri = URLDecoder.decode(uri, &quot;UTF-8&quot;)&#10;                println(&quot;NeuroView: Decoded image URI: $decodedUri&quot;)&#10;                Uri.parse(decodedUri)&#10;            } catch (e: Exception) {&#10;                println(&quot;NeuroView: Failed to decode image URI: ${e.message}&quot;)&#10;                null&#10;            }&#10;        }&#10;    }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                backgroundColor = Color.Black,&#10;                textColor = Color.White,&#10;                logoSize = 42,&#10;                titleFontSize = 28&#10;            )&#10;        },&#10;        bottomBar = {&#10;            BottomNavigationBar(&#10;                currentRoute = &quot;result&quot;,&#10;                onNavigateToHome = onNavigateToHome,&#10;                onNavigateToDashboard = onNavigateToDashboard,&#10;                onNavigateToUpload = onNavigateToUpload,&#10;                onNavigateToPastRecords = onNavigateToPastRecords,&#10;                bottomPadding = 18,&#10;                navBarHeight = 80,&#10;                regularIconSize = 32,&#10;                fabIconSize = 32,&#10;                fabSize = 64,&#10;                navBarWidth = 0.8f,&#10;                horizontalPadding = 16&#10;            )&#10;        }&#10;    ) { innerPaddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .background(Color.Black)&#10;                .padding(paddingValues) // Apply outer padding from Activity&#10;                .padding(innerPaddingValues) // Apply inner padding from Scaffold&#10;                .padding(16.dp)&#10;                .verticalScroll(rememberScrollState()),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Text(&#10;                text = &quot;RESULT&quot;,&#10;                fontSize = 20.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                color = Color(0xFF737373),&#10;                textAlign = TextAlign.Center&#10;            )&#10;            &#10;            Spacer(modifier = Modifier.height(2.dp))&#10;            &#10;            if (predictionData != null &amp;&amp; predictionData.success) {&#10;                PredictionResultContent(&#10;                    predictionData = predictionData,&#10;                    imageUri = decodedImageUri&#10;                )&#10;            } else {&#10;                NoResultContent(&#10;                    predictionData = predictionData,&#10;                    rawJson = predictionJson,&#10;                    hasRawJson = predictionJson != null,&#10;                    imageUri = decodedImageUri,&#10;                    debugInfo = mapOf(&#10;                        &quot;PredictionJson&quot; to predictionJson&#10;                    )&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun PredictionResultContent(&#10;    predictionData: PredictionData,&#10;    imageUri: Uri? = null&#10;) {&#10;    val tumorType = predictionData.tumor_type ?: &quot;Unknown&quot;&#10;    val confidence = predictionData.confidence ?: 0.0&#10;    val classProbs = predictionData.class_probabilities ?: emptyMap()&#10;&#10;    // Main prediction result card&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(vertical = 2.dp),&#10;        colors = CardDefaults.cardColors(containerColor = Color.Black)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(20.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Box(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Text(&#10;                    text = tumorType.replaceFirstChar { it.uppercase() },&#10;                    fontSize = 24.sp,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = Color.White,&#10;                    textAlign = TextAlign.Center&#10;                )&#10;            }&#10;        }&#10;    }&#10;&#10;    Spacer(modifier = Modifier.height(8.dp))&#10;&#10;    imageUri?.let { uri -&gt;&#10;        Card(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(vertical = 8.dp),&#10;            colors = CardDefaults.cardColors(containerColor = Color.Black),&#10;            shape = RoundedCornerShape(12.dp)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.padding(16.dp),&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                Text(&#10;                    text = &quot;INPUT IMAGE&quot;,&#10;                    fontSize = 16.sp,&#10;                    fontWeight = FontWeight.SemiBold,&#10;                    color = Color(0xFF737373),&#10;                    textAlign = TextAlign.Center&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(12.dp))&#10;&#10;                Image(&#10;                    painter = rememberAsyncImagePainter(model = uri),&#10;                    contentDescription = &quot;Uploaded brain scan&quot;,&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .aspectRatio(1f)&#10;                        .clip(RoundedCornerShape(8.dp)),&#10;                    contentScale = ContentScale.Crop&#10;                )&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;    }&#10;&#10;    // Class probabilities&#10;    if (classProbs.isNotEmpty()) {&#10;        Column(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Text(&#10;                text = &quot;CONFIDENCE SCORES&quot;,&#10;                fontSize = 16.sp,&#10;                fontWeight = FontWeight.SemiBold,&#10;                color = Color(0xFF737373),&#10;                modifier = Modifier.padding(bottom = 8.dp)&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(12.dp))&#10;&#10;            classProbs.toList().sortedByDescending { it.second }&#10;                .forEachIndexed { index, (className, probability) -&gt;&#10;                    ProbabilityBar(&#10;                        className = className,&#10;                        probability = probability&#10;                    )&#10;                    if (index &lt; classProbs.size - 1) {&#10;                        Spacer(modifier = Modifier.height(8.dp))&#10;                    }&#10;                }&#10;        }&#10;    }&#10;&#10;    Spacer(modifier = Modifier.height(32.dp))&#10;&#10;    // Insights section&#10;    InsightsSection(tumorType = tumorType, confidence = confidence)&#10;&#10;    Spacer(modifier = Modifier.height(32.dp))&#10;}&#10;&#10;&#10;@Composable&#10;fun ProbabilityBar(className: String, probability: Double) {&#10;    Column(modifier = Modifier.fillMaxWidth()) {&#10;&#10;&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Text(&#10;                text = className.uppercase(),&#10;                fontSize = 14.sp,&#10;                fontWeight = FontWeight.Medium,&#10;                color = Color.White,&#10;                modifier = Modifier.width(100.dp)&#10;            )&#10;&#10;            Spacer(modifier = Modifier.width(12.dp))&#10;&#10;            Box(&#10;                modifier = Modifier&#10;                    .weight(1f)&#10;                    .height(20.dp)&#10;                    .clip(RoundedCornerShape(10.dp))&#10;                    .background(Color(0xFF2A2A2A))&#10;            ) {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .fillMaxHeight()&#10;                        .fillMaxWidth(probability.toFloat())&#10;                        .clip(RoundedCornerShape(10.dp))&#10;                        .background(Color.White)&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.width(8.dp))&#10;&#10;            Text(&#10;                text = &quot;${(probability * 100).toInt()}%&quot;,&#10;                fontSize = 12.sp,&#10;                fontWeight = FontWeight.Medium,&#10;                color = Color(0xFF737373),&#10;                modifier = Modifier.width(40.dp)&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;&#10;@Composable&#10;fun InsightsSection(tumorType: String, confidence: Double) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(containerColor = Color.Black),&#10;        shape = RoundedCornerShape(12.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Text(&#10;                text = &quot;INSIGHTS&quot;,&#10;                fontSize = 16.sp,&#10;                fontWeight = FontWeight.SemiBold,&#10;                color = Color(0xFF737373),&#10;                textAlign = TextAlign.Center&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(12.dp))&#10;&#10;            val insights = getInsightsForTumorType(tumorType, confidence)&#10;            insights.forEach { insight -&gt;&#10;                Text(&#10;                    text = insight,&#10;                    fontSize = 14.sp,&#10;                    fontWeight = FontWeight.Normal,&#10;                    color = Color.White,&#10;                    textAlign = TextAlign.Center,&#10;                    lineHeight = 20.sp,&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;&#10;@Composable&#10;fun NoResultContent(&#10;    predictionData: PredictionData? = null,&#10;    rawJson: String? = null,&#10;    hasRawJson: Boolean = false,&#10;    imageUri: Uri? = null,&#10;    debugInfo: Map&lt;String, String?&gt; = emptyMap()&#10;) {&#10;    Column(&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        modifier = Modifier.fillMaxWidth()&#10;    ) {&#10;        Text(&#10;            text = &quot;No Analysis Available&quot;,&#10;            fontSize = 18.sp,&#10;            fontWeight = FontWeight.SemiBold,&#10;            color = Color.White&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        // Show uploaded image even if analysis failed&#10;        imageUri?.let { uri -&gt;&#10;            Card(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(vertical = 8.dp),&#10;                colors = CardDefaults.cardColors(containerColor = Color(0xFF1A1A1A)),&#10;                shape = RoundedCornerShape(12.dp)&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.padding(16.dp),&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Your Uploaded Image&quot;,&#10;                        fontSize = 16.sp,&#10;                        fontWeight = FontWeight.SemiBold,&#10;                        color = Color(0xFF737373),&#10;                        textAlign = TextAlign.Center&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(12.dp))&#10;&#10;                    Image(&#10;                        painter = rememberAsyncImagePainter(model = uri),&#10;                        contentDescription = &quot;Uploaded brain scan&quot;,&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .aspectRatio(1f)&#10;                            .clip(RoundedCornerShape(8.dp)),&#10;                        contentScale = ContentScale.Crop&#10;                    )&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;        }&#10;&#10;        // Show different messages based on what data we have&#10;        when {&#10;            !hasRawJson -&gt; {&#10;                Text(&#10;                    text = &quot;No prediction data was received.\n\nThis means the navigation parameter was not passed correctly from the upload screen.\n\nCheck the debug info below to see what data was attempted to be passed.&quot;,&#10;                    fontSize = 14.sp,&#10;                    fontWeight = FontWeight.Normal,&#10;                    color = Color(0xFF737373),&#10;                    textAlign = TextAlign.Center&#10;                )&#10;            }&#10;            predictionData == null &amp;&amp; hasRawJson -&gt; {&#10;                Text(&#10;                    text = &quot;Prediction data was received but failed to parse.\n\nThe JSON format may be corrupted or invalid.&quot;,&#10;                    fontSize = 14.sp,&#10;                    fontWeight = FontWeight.Normal,&#10;                    color = Color(0xFFFF9800),&#10;                    textAlign = TextAlign.Center&#10;                )&#10;            }&#10;            predictionData != null &amp;&amp; !predictionData.success -&gt; {&#10;                Text(&#10;                    text = &quot;Analysis failed on the backend: ${predictionData.error ?: predictionData.message ?: &quot;Unknown error&quot;}&quot;,&#10;                    fontSize = 14.sp,&#10;                    fontWeight = FontWeight.Normal,&#10;                    color = Color(0xFFFF5722),&#10;                    textAlign = TextAlign.Center&#10;                )&#10;            }&#10;            else -&gt; {&#10;                Text(&#10;                    text = &quot;Unable to analyze the uploaded image.\n\nPlease try uploading a clear brain scan image.&quot;,&#10;                    fontSize = 14.sp,&#10;                    fontWeight = FontWeight.Normal,&#10;                    color = Color(0xFF737373),&#10;                    textAlign = TextAlign.Center&#10;                )&#10;            }&#10;        }&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        // Debug info card&#10;        Card(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            colors = CardDefaults.cardColors(containerColor = Color(0xFF1A1A1A)),&#10;            shape = RoundedCornerShape(8.dp)&#10;        ) {&#10;            Column(modifier = Modifier.padding(12.dp)) {&#10;                Text(&#10;                    text = &quot;Debug Information:&quot;,&#10;                    fontSize = 12.sp,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = Color(0xFF737373)&#10;                )&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;&#10;                debugInfo.forEach { (source, value) -&gt;&#10;                    val hasValue = !value.isNullOrBlank()&#10;                    Text(&#10;                        text = &quot;$source: ${if (hasValue) &quot;✓ (${value?.take(20)}...)&quot; else &quot;✗ No data&quot;}&quot;,&#10;                        fontSize = 10.sp,&#10;                        color = if (hasValue) Color(0xFF4CAF50) else Color(0xFFFF5722)&#10;                    )&#10;                }&#10;&#10;                if (hasRawJson) {&#10;                    Text(&#10;                        text = &quot;JSON Length: ${rawJson?.length ?: 0}&quot;,&#10;                        fontSize = 10.sp,&#10;                        color = Color(0xFF737373)&#10;                    )&#10;                }&#10;&#10;                predictionData?.let { data -&gt;&#10;                    Text(&#10;                        text = &quot;Parsed Success: ${data.success}&quot;,&#10;                        fontSize = 10.sp,&#10;                        color = if (data.success) Color(0xFF4CAF50) else Color(0xFFFF5722)&#10;                    )&#10;                    data.error?.let {&#10;                        Text(&#10;                            text = &quot;Error: $it&quot;,&#10;                            fontSize = 10.sp,&#10;                            color = Color(0xFFFF5722)&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;&#10;&#10;fun getInsightsForTumorType(tumorType: String, confidence: Double): List&lt;String&gt; {&#10;    val baseInsights = when (tumorType.lowercase()) {&#10;        &quot;glioma&quot; -&gt; listOf(&#10;            &quot;Gliomas are tumors that arise from glial cells in the brain&quot;,&#10;            &quot;They account for about 80% of malignant brain tumors&quot;,&#10;            &quot;Treatment typically involves surgery, radiation, and chemotherapy&quot;&#10;        )&#10;        &quot;meningioma&quot; -&gt; listOf(&#10;            &quot;Meningiomas arise from the meninges that cover the brain&quot;,&#10;            &quot;Most meningiomas are benign and grow slowly&quot;,&#10;            &quot;Treatment options include observation, surgery, or radiation therapy&quot;&#10;        )&#10;        &quot;pituitary&quot; -&gt; listOf(&#10;            &quot;Pituitary tumors occur in the pituitary gland&quot;,&#10;            &quot;Most are benign and may affect hormone production&quot;,&#10;            &quot;Treatment may include medication, surgery, or radiation&quot;&#10;        )&#10;        &quot;notumor&quot; -&gt; listOf(&#10;            &quot;No tumor detected in the brain scan&quot;,&#10;            &quot;The brain tissue appears normal&quot;,&#10;            &quot;Regular monitoring may still be recommended&quot;&#10;        )&#10;        else -&gt; listOf(&quot;Unable to provide specific insights for this classification&quot;)&#10;    }&#10;&#10;    val confidenceInsight = when {&#10;        confidence &gt;= 0.9 -&gt; &quot;Very high confidence in this prediction&quot;&#10;        confidence &gt;= 0.8 -&gt; &quot;High confidence in this prediction&quot;&#10;        confidence &gt;= 0.7 -&gt; &quot;Moderate confidence in this prediction&quot;&#10;        confidence &gt;= 0.6 -&gt; &quot;Fair confidence in this prediction&quot;&#10;        else -&gt; &quot;Low confidence - further analysis recommended&quot;&#10;    }&#10;&#10;    return baseInsights + confidenceInsight&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun ResultScreenPreview() {&#10;    MaterialTheme {&#10;        ResultScreen(&#10;            predictionJson = null,&#10;            imageUri = null,&#10;            paddingValues = PaddingValues(0.dp),&#10;            onNavigateToHome = {},&#10;            onNavigateToDashboard = {},&#10;            onNavigateToUpload = {},&#10;            onNavigateToPastRecords = {}&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/neuroview/screens/TumorDetailScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/neuroview/screens/TumorDetailScreen.kt" />
              <option name="originalContent" value="package com.example.neuroview.screens&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.graphicsLayer // Import for alpha&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import com.example.neuroview.R // Assuming your resources are in the 'R' class&#10;import com.example.neuroview.Routes&#10;import com.example.neuroview.data.TumorData&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun TumorDetailScreen(&#10;    tumorName: String?,&#10;    onNavigateToHome: () -&gt; Unit,&#10;    onNavigateToDashboard: () -&gt; Unit,&#10;    onNavigateToUpload: () -&gt; Unit,&#10;    onNavigateToPastRecords: () -&gt; Unit&#10;) {&#10;    val tumor = tumorName?.let { TumorData.getTumorByName(it) }&#10;&#10;    if (tumor == null) {&#10;        // Handle case where tumor is not found&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .background(Color.Black),&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            Column(&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                Text(&#10;                    text = &quot;Tumor information not found&quot;,&#10;                    color = Color.White,&#10;                    fontSize = 18.sp&#10;                )&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;                Button(&#10;                    onClick = { onNavigateToDashboard() },&#10;                    colors = ButtonDefaults.buttonColors(containerColor = Color.White)&#10;                ) {&#10;                    Text(&quot;Back to Dashboard&quot;, color = Color.Black)&#10;                }&#10;            }&#10;        }&#10;        return&#10;    }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = {&#10;                    Text(&#10;                        text = &quot;LEARN&quot;,&#10;                        fontSize = 18.sp, // Adjusted font size as per previous attempt, maintain for consistency&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = Color(0xFF737373),&#10;                        modifier = Modifier.fillMaxWidth(), // Fill width to allow centering&#10;                        textAlign = TextAlign.Center // Center the text within the available space&#10;                    )&#10;                },&#10;                navigationIcon = {&#10;                    IconButton(onClick = { /* Handle back navigation */ }) {&#10;                        Icon(&#10;                            imageVector = Icons.AutoMirrored.Filled.ArrowBack,&#10;                            contentDescription = &quot;Back&quot;,&#10;                            tint = Color(0xFF737373)&#10;                        )&#10;                    }&#10;                },&#10;                actions = {&#10;                    // Add an invisible icon to balance the space taken by the navigation icon&#10;                    // This creates a symmetrical layout for the title to truly center&#10;                    IconButton(onClick = { /* Do nothing, this is just for spacing */ }) {&#10;                        Icon(&#10;                            imageVector = Icons.AutoMirrored.Filled.ArrowBack, // Use the same icon for size consistency&#10;                            contentDescription = null, // No content description needed for an invisible icon&#10;                            tint = Color.Transparent, // Make it invisible&#10;                            modifier = Modifier.graphicsLayer(alpha = 0f) // Ensure it's fully transparent&#10;                        )&#10;                    }&#10;                },&#10;                colors = TopAppBarDefaults.topAppBarColors(&#10;                    containerColor = Color.Black&#10;                )&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .background(Color.Black)&#10;                .padding(paddingValues)&#10;                .verticalScroll(rememberScrollState())&#10;                .padding(horizontal = 14.dp) // Adjusted horizontal padding&#10;        ) {&#10;            Spacer(modifier = Modifier.height(16.dp)) // Spacer to push content down from top bar&#10;&#10;            // Glioma Title (centered and larger)&#10;            Text(&#10;                text = tumor.name,&#10;                fontSize = 32.sp, // Increased font size for title&#10;                fontWeight = FontWeight.Bold,&#10;                color = Color.White,&#10;                textAlign = TextAlign.Center,&#10;                modifier = Modifier.fillMaxWidth()&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(24.dp))&#10;&#10;            // Tumor Image&#10;            Card(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(350.dp),&#10;                shape = RoundedCornerShape(16.dp),&#10;                colors = CardDefaults.cardColors(containerColor = Color(0xFF0B0B0B))&#10;            ) {&#10;                Image(&#10;                    painter = painterResource(id = tumor.imageResource), // Make sure tumor.imageResource is correctly set to your drawable resource&#10;                    contentDescription = &quot;${tumor.name} image&quot;,&#10;                    contentScale = ContentScale.Crop,&#10;                    modifier = Modifier&#10;                        .fillMaxSize()&#10;                        .clip(RoundedCornerShape(16.dp))&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(24.dp))&#10;&#10;            // Short Description (the main description as in the image)&#10;            Text(&#10;                text = tumor.detailedDescription, // This should contain the &quot;Gliomas are a type of tumor...&quot; text&#10;                fontSize = 16.sp, // Adjusted font size&#10;                fontWeight = FontWeight.Normal, // Adjusted font weight&#10;                color = Color(0xFF737373),&#10;                textAlign = TextAlign.Center, // Centered the text&#10;                lineHeight = 24.sp,&#10;                modifier = Modifier.fillMaxWidth()&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(36.dp))&#10;&#10;            // Common Symptoms Section&#10;            Column(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalAlignment = Alignment.CenterHorizontally // Center the content within this column&#10;            ) {&#10;                // Icon for Common Symptoms (Placeholder, replace with actual icon resource if available)&#10;                Icon(&#10;                    painter = painterResource(id = R.drawable.ic_symptoms), // Replace with your actual symptom icon&#10;                    contentDescription = &quot;Symptoms Icon&quot;,&#10;                    tint = Color.White,&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                Text(&#10;                    text = &quot;Common Symptoms&quot;,&#10;                    fontSize = 20.sp,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = Color.White,&#10;                    textAlign = TextAlign.Center,&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                Text(&#10;                    text = tumor.symptoms.joinToString(separator = &quot;, &quot;), // Join symptoms with a comma&#10;                    fontSize = 16.sp,&#10;                    color = Color(0xFF737373),&#10;                    textAlign = TextAlign.Center,&#10;                    lineHeight = 24.sp,&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(36.dp))&#10;&#10;            // Treatment Section&#10;            Column(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalAlignment = Alignment.CenterHorizontally // Center the content within this column&#10;            ) {&#10;                // Icon for Treatment (Placeholder, replace with actual icon resource if available)&#10;                Icon(&#10;                    painter = painterResource(id = R.drawable.ic_treatment), // Replace with your actual treatment icon&#10;                    contentDescription = &quot;Treatment Icon&quot;,&#10;                    tint = Color.White,&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                Text(&#10;                    text = &quot;Treatment&quot;,&#10;                    fontSize = 20.sp,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = Color.White,&#10;                    textAlign = TextAlign.Center,&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                Text(&#10;                    text = tumor.treatment,&#10;                    fontSize = 16.sp,&#10;                    color = Color(0xFF737373),&#10;                    textAlign = TextAlign.Center,&#10;                    lineHeight = 24.sp,&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(32.dp))&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.neuroview.screens&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.graphicsLayer // Import for alpha&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import com.example.neuroview.R // Assuming your resources are in the 'R' class&#10;import com.example.neuroview.Routes&#10;import com.example.neuroview.data.TumorData&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun TumorDetailScreen(&#10;    tumorName: String?,&#10;    paddingValues: PaddingValues,&#10;    onNavigateToHome: () -&gt; Unit,&#10;    onNavigateToDashboard: () -&gt; Unit,&#10;    onNavigateToUpload: () -&gt; Unit,&#10;    onNavigateToPastRecords: () -&gt; Unit&#10;) {&#10;    val tumor = tumorName?.let { TumorData.getTumorByName(it) }&#10;&#10;    if (tumor == null) {&#10;        // Handle case where tumor is not found&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .background(Color.Black)&#10;                .padding(paddingValues), // Apply padding values here&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            Column(&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                Text(&#10;                    text = &quot;Tumor information not found&quot;,&#10;                    color = Color.White,&#10;                    fontSize = 18.sp&#10;                )&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;                Button(&#10;                    onClick = { onNavigateToDashboard() },&#10;                    colors = ButtonDefaults.buttonColors(containerColor = Color.White)&#10;                ) {&#10;                    Text(&quot;Back to Dashboard&quot;, color = Color.Black)&#10;                }&#10;            }&#10;        }&#10;        return&#10;    }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = {&#10;                    Text(&#10;                        text = &quot;LEARN&quot;,&#10;                        fontSize = 18.sp,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = Color(0xFF737373),&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        textAlign = TextAlign.Center&#10;                    )&#10;                },&#10;                navigationIcon = {&#10;                    IconButton(onClick = { onNavigateToDashboard() }) {&#10;                        Icon(&#10;                            imageVector = Icons.AutoMirrored.Filled.ArrowBack,&#10;                            contentDescription = &quot;Back&quot;,&#10;                            tint = Color(0xFF737373)&#10;                        )&#10;                    }&#10;                },&#10;                actions = {&#10;                    IconButton(onClick = { /* Do nothing, this is just for spacing */ }) {&#10;                        Icon(&#10;                            imageVector = Icons.AutoMirrored.Filled.ArrowBack,&#10;                            contentDescription = null,&#10;                            tint = Color.Transparent,&#10;                            modifier = Modifier.graphicsLayer(alpha = 0f)&#10;                        )&#10;                    }&#10;                },&#10;                colors = TopAppBarDefaults.topAppBarColors(&#10;                    containerColor = Color.Black&#10;                )&#10;            )&#10;        }&#10;    ) { innerPaddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .background(Color.Black)&#10;                .padding(paddingValues) // Apply outer padding from Activity&#10;                .padding(innerPaddingValues) // Apply inner padding from Scaffold&#10;                .verticalScroll(rememberScrollState())&#10;                .padding(horizontal = 14.dp)&#10;        ) {&#10;            Spacer(modifier = Modifier.height(16.dp)) // Spacer to push content down from top bar&#10;&#10;            // Glioma Title (centered and larger)&#10;            Text(&#10;                text = tumor.name,&#10;                fontSize = 32.sp, // Increased font size for title&#10;                fontWeight = FontWeight.Bold,&#10;                color = Color.White,&#10;                textAlign = TextAlign.Center,&#10;                modifier = Modifier.fillMaxWidth()&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(24.dp))&#10;&#10;            // Tumor Image&#10;            Card(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(350.dp),&#10;                shape = RoundedCornerShape(16.dp),&#10;                colors = CardDefaults.cardColors(containerColor = Color(0xFF0B0B0B))&#10;            ) {&#10;                Image(&#10;                    painter = painterResource(id = tumor.imageResource), // Make sure tumor.imageResource is correctly set to your drawable resource&#10;                    contentDescription = &quot;${tumor.name} image&quot;,&#10;                    contentScale = ContentScale.Crop,&#10;                    modifier = Modifier&#10;                        .fillMaxSize()&#10;                        .clip(RoundedCornerShape(16.dp))&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(24.dp))&#10;&#10;            // Short Description (the main description as in the image)&#10;            Text(&#10;                text = tumor.detailedDescription, // This should contain the &quot;Gliomas are a type of tumor...&quot; text&#10;                fontSize = 16.sp, // Adjusted font size&#10;                fontWeight = FontWeight.Normal, // Adjusted font weight&#10;                color = Color(0xFF737373),&#10;                textAlign = TextAlign.Center, // Centered the text&#10;                lineHeight = 24.sp,&#10;                modifier = Modifier.fillMaxWidth()&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(36.dp))&#10;&#10;            // Common Symptoms Section&#10;            Column(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalAlignment = Alignment.CenterHorizontally // Center the content within this column&#10;            ) {&#10;                // Icon for Common Symptoms (Placeholder, replace with actual icon resource if available)&#10;                Icon(&#10;                    painter = painterResource(id = R.drawable.ic_symptoms), // Replace with your actual symptom icon&#10;                    contentDescription = &quot;Symptoms Icon&quot;,&#10;                    tint = Color.White,&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                Text(&#10;                    text = &quot;Common Symptoms&quot;,&#10;                    fontSize = 20.sp,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = Color.White,&#10;                    textAlign = TextAlign.Center,&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                Text(&#10;                    text = tumor.symptoms.joinToString(separator = &quot;, &quot;), // Join symptoms with a comma&#10;                    fontSize = 16.sp,&#10;                    color = Color(0xFF737373),&#10;                    textAlign = TextAlign.Center,&#10;                    lineHeight = 24.sp,&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(36.dp))&#10;&#10;            // Treatment Section&#10;            Column(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalAlignment = Alignment.CenterHorizontally // Center the content within this column&#10;            ) {&#10;                // Icon for Treatment (Placeholder, replace with actual icon resource if available)&#10;                Icon(&#10;                    painter = painterResource(id = R.drawable.ic_treatment), // Replace with your actual treatment icon&#10;                    contentDescription = &quot;Treatment Icon&quot;,&#10;                    tint = Color.White,&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                Text(&#10;                    text = &quot;Treatment&quot;,&#10;                    fontSize = 20.sp,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = Color.White,&#10;                    textAlign = TextAlign.Center,&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                Text(&#10;                    text = tumor.treatment,&#10;                    fontSize = 16.sp,&#10;                    color = Color(0xFF737373),&#10;                    textAlign = TextAlign.Center,&#10;                    lineHeight = 24.sp,&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(32.dp))&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/neuroview/screens/UploadImageScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/neuroview/screens/UploadImageScreen.kt" />
              <option name="originalContent" value="package com.example.neuroview.screens&#10;&#10;import android.net.Uri&#10;import android.provider.OpenableColumns&#10;import android.widget.Toast&#10;import androidx.activity.compose.rememberLauncherForActivityResult&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.compose.foundation.Canvas&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Delete&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.geometry.CornerRadius&#10;import androidx.compose.ui.geometry.Size&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.PathEffect&#10;import androidx.compose.ui.graphics.drawscope.Stroke&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import com.example.neuroview.R&#10;import com.example.neuroview.components.TopAppBar&#10;import com.example.neuroview.network.ApiService&#10;import com.example.neuroview.ui.theme.NeuroViewTheme&#10;import kotlinx.coroutines.launch&#10;import java.net.URLEncoder&#10;import kotlinx.serialization.encodeToString&#10;import kotlinx.serialization.json.Json&#10;&#10;@Composable&#10;fun UploadImageScreen(&#10;    paddingValues: PaddingValues,&#10;    onNavigateToHome: () -&gt; Unit,&#10;    onNavigateToDashboard: () -&gt; Unit,&#10;    onNavigateToPastRecords: () -&gt; Unit,&#10;    onNavigateToResult: (String, String) -&gt; Unit&#10;) {&#10;    val context = LocalContext.current&#10;    val coroutineScope = rememberCoroutineScope()&#10;    var selectedImageUri by remember { mutableStateOf&lt;Uri?&gt;(null) }&#10;    var isLoading by remember { mutableStateOf(false) }&#10;    val apiService = remember { ApiService() }&#10;&#10;    val imagePickerLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.GetContent()&#10;    ) { uri -&gt;&#10;        uri?.let {&#10;            selectedImageUri = it&#10;            Toast.makeText(context, &quot;Image selected&quot;, Toast.LENGTH_SHORT).show()&#10;        }&#10;    }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                backgroundColor = Color.Black,&#10;                textColor = Color.White,&#10;                logoSize = 42,&#10;                titleFontSize = 28&#10;            )&#10;        }&#10;    ) { innerPaddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .background(Color.Black)&#10;                .padding(paddingValues) // Apply outer padding from Activity&#10;                .padding(innerPaddingValues) // Apply inner padding from Scaffold&#10;                .padding(16.dp)&#10;                .verticalScroll(rememberScrollState()), // Add scrolling&#10;            verticalArrangement = Arrangement.Top,&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                modifier = Modifier.fillMaxWidth()&#10;            ) {&#10;                Box(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    Text(&#10;                        text = &quot;UPLOAD&quot;,&#10;                        fontSize = 20.sp,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = Color(0xFF737373)&#10;                    )&#10;                    IconButton(&#10;                        onClick = {&#10;                            onNavigateToDashboard()&#10;                        },&#10;                        modifier = Modifier.align(Alignment.CenterStart)&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.ArrowBack,&#10;                            contentDescription = &quot;Back&quot;,&#10;                            tint = Color(0xFF737373)&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            selectedImageUri?.let { uri -&gt;&#10;                ImageInfoBox(uri = uri, onDelete = { selectedImageUri = null })&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;            }&#10;&#10;            DashedBorderBox(&#10;                onClick = {&#10;                    imagePickerLauncher.launch(&quot;image/*&quot;)&#10;                },&#10;                hasSelectedImage = selectedImageUri != null // Pass whether image is selected&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(32.dp))&#10;&#10;            Button(&#10;                onClick = {&#10;                    selectedImageUri?.let { uri -&gt;&#10;                        // Get the file name from the URI&#10;                        val fileName = run {&#10;                            var name = &quot;Unknown Image&quot;&#10;                            val cursor = context.contentResolver.query(uri, null, null, null, null)&#10;                            cursor?.use {&#10;                                val nameIndex = it.getColumnIndex(OpenableColumns.DISPLAY_NAME)&#10;                                if (it.moveToFirst() &amp;&amp; nameIndex != -1) {&#10;                                    name = it.getString(nameIndex)&#10;                                }&#10;                            }&#10;                            name&#10;                        }&#10;&#10;                        isLoading = true&#10;                        coroutineScope.launch {&#10;                            try {&#10;                                val result = apiService.uploadImage(context, uri, fileName)&#10;                                result.fold(&#10;                                    onSuccess = { response -&gt;&#10;                                        if (response.prediction != null) {&#10;                                            try {&#10;                                                val jsonEncoder = Json {&#10;                                                    ignoreUnknownKeys = true&#10;                                                    isLenient = true&#10;                                                    coerceInputValues = true&#10;                                                }&#10;                                                val predictionJson = jsonEncoder.encodeToString(response.prediction)&#10;                                                println(&quot;NeuroView: Encoded prediction JSON: $predictionJson&quot;)&#10;                                                val encodedJson = URLEncoder.encode(predictionJson, &quot;UTF-8&quot;)&#10;                                                &#10;                                                // Also encode the image URI for display&#10;                                                val imageUriString = uri.toString()&#10;                                                val encodedImageUri = URLEncoder.encode(imageUriString, &quot;UTF-8&quot;)&#10;                                                println(&quot;NeuroView: Image URI: $imageUriString&quot;)&#10;                                                &#10;                                                onNavigateToResult(encodedJson, encodedImageUri)&#10;                                                selectedImageUri = null&#10;&#10;                                                if (response.prediction.success) {&#10;                                                    Toast.makeText(context, &quot;Analysis completed successfully!&quot;, Toast.LENGTH_SHORT).show()&#10;                                                } else {&#10;                                                    Toast.makeText(context, &quot;Analysis completed with issues: ${response.prediction.error}&quot;, Toast.LENGTH_LONG).show()&#10;                                                }&#10;                                            } catch (e: Exception) {&#10;                                                // Fallback to basic result screen if JSON encoding fails&#10;                                                val imageUriString = uri.toString()&#10;                                                val encodedImageUri = URLEncoder.encode(imageUriString, &quot;UTF-8&quot;)&#10;                                                onNavigateToResult(&quot;&quot;, encodedImageUri)&#10;                                                selectedImageUri = null&#10;                                                Toast.makeText(context, &quot;Analysis completed, but display issues occurred&quot;, Toast.LENGTH_LONG).show()&#10;                                            }&#10;                                        } else {&#10;                                            val errorMsg = response.prediction_error ?: &quot;No prediction data received from server&quot;&#10;                                            val imageUriString = uri.toString()&#10;                                            val encodedImageUri = URLEncoder.encode(imageUriString, &quot;UTF-8&quot;)&#10;                                            Toast.makeText(context, &quot;Upload successful, but analysis failed: $errorMsg&quot;, Toast.LENGTH_LONG).show()&#10;                                            onNavigateToResult(&quot;&quot;, encodedImageUri)&#10;                                            selectedImageUri = null&#10;                                        }&#10;                                    },&#10;                                    onFailure = { error -&gt;&#10;                                        Toast.makeText(context, &quot;Upload failed: ${error.message}&quot;, Toast.LENGTH_LONG).show()&#10;                                    }&#10;                                )&#10;                            } catch (e: Exception) {&#10;                                Toast.makeText(context, &quot;Unexpected error: ${e.message}&quot;, Toast.LENGTH_LONG).show()&#10;                            } finally {&#10;                                isLoading = false&#10;                            }&#10;                        }&#10;                    }&#10;                },&#10;                colors = ButtonDefaults.buttonColors(containerColor = Color.White),&#10;                modifier = Modifier.fillMaxWidth(),&#10;                enabled = selectedImageUri != null &amp;&amp; !isLoading&#10;            ) {&#10;                if (isLoading) {&#10;                    CircularProgressIndicator(&#10;                        modifier = Modifier.size(16.dp),&#10;                        color = Color.Black,&#10;                        strokeWidth = 2.dp&#10;                    )&#10;                    Spacer(modifier = Modifier.width(8.dp))&#10;                    Text(&quot;Analyzing...&quot;, color = Color.Black)&#10;                } else {&#10;                    Text(&quot;Upload &amp; Start Analysis&quot;, color = Color.Black)&#10;                }&#10;            }&#10;&#10;            // Add extra bottom spacing to ensure button is visible&#10;            Spacer(modifier = Modifier.height(32.dp))&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun DashedBorderBox(onClick: () -&gt; Unit, hasSelectedImage: Boolean) {&#10;    val cornerRadius = 12.dp&#10;    val boxHeight = 550.dp&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .height(boxHeight)&#10;            .padding(4.dp)&#10;            .clickable { onClick() },&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Canvas(modifier = Modifier.fillMaxSize()) {&#10;            val dashLength = 10.dp.toPx()&#10;            val gapLength = 10.dp.toPx()&#10;            drawRoundRect(&#10;                color = Color.White,&#10;                size = Size(size.width, size.height),&#10;                cornerRadius = CornerRadius(cornerRadius.toPx(), cornerRadius.toPx()),&#10;                style = Stroke(&#10;                    width = 2.dp.toPx(),&#10;                    pathEffect = PathEffect.dashPathEffect(&#10;                        floatArrayOf(dashLength, gapLength), 0f&#10;                    )&#10;                )&#10;            )&#10;        }&#10;&#10;        Column(&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            modifier = Modifier.padding(16.dp)&#10;        ) {&#10;            Icon(&#10;                painter = painterResource(id = R.drawable.ic_cloud_upload),&#10;                contentDescription = &quot;Upload Icon&quot;,&#10;                tint = Color.White,&#10;                modifier = Modifier.size(48.dp)&#10;            )&#10;            Text(&#10;                text = &quot;Browse Files&quot;,&#10;                fontSize = 16.sp,&#10;                color = Color.White,&#10;                fontWeight = FontWeight.SemiBold&#10;            )&#10;            Spacer(modifier = Modifier.height(4.dp))&#10;            Text(&#10;                text = &quot;Supported Formats: JPEG, PNG&quot;,&#10;                fontSize = 12.sp,&#10;                color = Color.White&#10;            )&#10;            Spacer(modifier = Modifier.height(2.dp))&#10;            Text(&#10;                text = &quot;Upload Limit: 1 image file only.&quot;,&#10;                fontSize = 12.sp,&#10;                color = Color.White&#10;            )&#10;&#10;            // Show selected image info if available&#10;            if (hasSelectedImage) {&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;                Text(&#10;                    text = &quot;Image selected. Tap to change.&quot;,&#10;                    fontSize = 14.sp,&#10;                    color = Color.White,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ImageInfoBox(uri: Uri, onDelete: () -&gt; Unit) {&#10;    val context = LocalContext.current&#10;&#10;    val fileName = remember(uri) {&#10;        var name = &quot;Unknown&quot;&#10;        val cursor = context.contentResolver.query(uri, null, null, null, null)&#10;        cursor?.use {&#10;            val nameIndex = it.getColumnIndex(OpenableColumns.DISPLAY_NAME)&#10;            if (it.moveToFirst() &amp;&amp; nameIndex != -1) {&#10;                name = it.getString(nameIndex)&#10;            }&#10;        }&#10;        name&#10;    }&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .height(80.dp)&#10;            .border(width = 2.dp, color = Color.White, shape = MaterialTheme.shapes.medium)&#10;            .padding(horizontal = 12.dp, vertical = 8.dp)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier.fillMaxSize(),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Text(&#10;                text = fileName,&#10;                color = Color.White,&#10;                fontSize = 14.sp,&#10;                maxLines = 1,&#10;                modifier = Modifier.weight(1f)&#10;            )&#10;            IconButton(onClick = { onDelete() }) {&#10;                Icon(&#10;                    imageVector = Icons.Default.Delete,&#10;                    contentDescription = &quot;Delete&quot;,&#10;                    tint = Color.White&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun UploadImageScreenPreview() {&#10;    NeuroViewTheme {&#10;        // Preview with dummy navigation callbacks&#10;        UploadImageScreen(&#10;            paddingValues = PaddingValues(0.dp),&#10;            onNavigateToHome = {},&#10;            onNavigateToDashboard = {},&#10;            onNavigateToPastRecords = {},&#10;            onNavigateToResult = { _, _ -&gt; }&#10;        )&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.neuroview.screens&#10;&#10;import android.net.Uri&#10;import android.provider.OpenableColumns&#10;import android.widget.Toast&#10;import androidx.activity.compose.rememberLauncherForActivityResult&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.compose.foundation.Canvas&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Delete&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.geometry.CornerRadius&#10;import androidx.compose.ui.geometry.Size&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.PathEffect&#10;import androidx.compose.ui.graphics.drawscope.Stroke&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import com.example.neuroview.R&#10;import com.example.neuroview.components.TopAppBar&#10;import com.example.neuroview.network.ApiService&#10;import com.example.neuroview.ui.theme.NeuroViewTheme&#10;import kotlinx.coroutines.launch&#10;import java.net.URLEncoder&#10;import kotlinx.serialization.encodeToString&#10;import kotlinx.serialization.json.Json&#10;&#10;@Composable&#10;fun UploadImageScreen(&#10;    paddingValues: PaddingValues,&#10;    onNavigateToHome: () -&gt; Unit,&#10;    onNavigateToDashboard: () -&gt; Unit,&#10;    onNavigateToPastRecords: () -&gt; Unit,&#10;    onNavigateToResult: (String, String) -&gt; Unit&#10;) {&#10;    val context = LocalContext.current&#10;    val coroutineScope = rememberCoroutineScope()&#10;    var selectedImageUri by remember { mutableStateOf&lt;Uri?&gt;(null) }&#10;    var isLoading by remember { mutableStateOf(false) }&#10;    val apiService = remember { ApiService() }&#10;&#10;    val imagePickerLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.GetContent()&#10;    ) { uri -&gt;&#10;        uri?.let {&#10;            selectedImageUri = it&#10;            Toast.makeText(context, &quot;Image selected&quot;, Toast.LENGTH_SHORT).show()&#10;        }&#10;    }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                backgroundColor = Color.Black,&#10;                textColor = Color.White,&#10;                logoSize = 42,&#10;                titleFontSize = 28&#10;            )&#10;        }&#10;    ) { innerPaddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .background(Color.Black)&#10;                .padding(paddingValues) // Apply outer padding from Activity&#10;                .padding(innerPaddingValues) // Apply inner padding from Scaffold&#10;                .padding(16.dp)&#10;                .verticalScroll(rememberScrollState()), // Add scrolling&#10;            verticalArrangement = Arrangement.Top,&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                modifier = Modifier.fillMaxWidth()&#10;            ) {&#10;                Box(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    Text(&#10;                        text = &quot;UPLOAD&quot;,&#10;                        fontSize = 20.sp,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = Color(0xFF737373)&#10;                    )&#10;                    IconButton(&#10;                        onClick = {&#10;                            onNavigateToDashboard()&#10;                        },&#10;                        modifier = Modifier.align(Alignment.CenterStart)&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.ArrowBack,&#10;                            contentDescription = &quot;Back&quot;,&#10;                            tint = Color(0xFF737373)&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            selectedImageUri?.let { uri -&gt;&#10;                ImageInfoBox(uri = uri, onDelete = { selectedImageUri = null })&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;            }&#10;&#10;            DashedBorderBox(&#10;                onClick = {&#10;                    imagePickerLauncher.launch(&quot;image/*&quot;)&#10;                },&#10;                hasSelectedImage = selectedImageUri != null // Pass whether image is selected&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(32.dp))&#10;&#10;            Button(&#10;                onClick = {&#10;                    selectedImageUri?.let { uri -&gt;&#10;                        // Get the file name from the URI&#10;                        val fileName = run {&#10;                            var name = &quot;Unknown Image&quot;&#10;                            val cursor = context.contentResolver.query(uri, null, null, null, null)&#10;                            cursor?.use {&#10;                                val nameIndex = it.getColumnIndex(OpenableColumns.DISPLAY_NAME)&#10;                                if (it.moveToFirst() &amp;&amp; nameIndex != -1) {&#10;                                    name = it.getString(nameIndex)&#10;                                }&#10;                            }&#10;                            name&#10;                        }&#10;&#10;                        isLoading = true&#10;                        coroutineScope.launch {&#10;                            try {&#10;                                val result = apiService.uploadImage(context, uri, fileName)&#10;                                result.fold(&#10;                                    onSuccess = { response -&gt;&#10;                                        if (response.prediction != null) {&#10;                                            try {&#10;                                                val jsonEncoder = Json {&#10;                                                    ignoreUnknownKeys = true&#10;                                                    isLenient = true&#10;                                                    coerceInputValues = true&#10;                                                }&#10;                                                val predictionJson = jsonEncoder.encodeToString(response.prediction)&#10;                                                println(&quot;NeuroView: Encoded prediction JSON: $predictionJson&quot;)&#10;                                                val encodedJson = URLEncoder.encode(predictionJson, &quot;UTF-8&quot;)&#10;                                                &#10;                                                // Also encode the image URI for display&#10;                                                val imageUriString = uri.toString()&#10;                                                val encodedImageUri = URLEncoder.encode(imageUriString, &quot;UTF-8&quot;)&#10;                                                println(&quot;NeuroView: Image URI: $imageUriString&quot;)&#10;                                                &#10;                                                onNavigateToResult(encodedJson, encodedImageUri)&#10;                                                selectedImageUri = null&#10;&#10;                                                if (response.prediction.success) {&#10;                                                    Toast.makeText(context, &quot;Analysis completed successfully!&quot;, Toast.LENGTH_SHORT).show()&#10;                                                } else {&#10;                                                    Toast.makeText(context, &quot;Analysis completed with issues: ${response.prediction.error}&quot;, Toast.LENGTH_LONG).show()&#10;                                                }&#10;                                            } catch (e: Exception) {&#10;                                                // Fallback to basic result screen if JSON encoding fails&#10;                                                val imageUriString = uri.toString()&#10;                                                val encodedImageUri = URLEncoder.encode(imageUriString, &quot;UTF-8&quot;)&#10;                                                onNavigateToResult(&quot;&quot;, encodedImageUri)&#10;                                                selectedImageUri = null&#10;                                                Toast.makeText(context, &quot;Analysis completed, but display issues occurred&quot;, Toast.LENGTH_LONG).show()&#10;                                            }&#10;                                        } else {&#10;                                            val errorMsg = response.prediction_error ?: &quot;No prediction data received from server&quot;&#10;                                            val imageUriString = uri.toString()&#10;                                            val encodedImageUri = URLEncoder.encode(imageUriString, &quot;UTF-8&quot;)&#10;                                            Toast.makeText(context, &quot;Upload successful, but analysis failed: $errorMsg&quot;, Toast.LENGTH_LONG).show()&#10;                                            onNavigateToResult(&quot;&quot;, encodedImageUri)&#10;                                            selectedImageUri = null&#10;                                        }&#10;                                    },&#10;                                    onFailure = { error -&gt;&#10;                                        Toast.makeText(context, &quot;Upload failed: ${error.message}&quot;, Toast.LENGTH_LONG).show()&#10;                                    }&#10;                                )&#10;                            } catch (e: Exception) {&#10;                                Toast.makeText(context, &quot;Unexpected error: ${e.message}&quot;, Toast.LENGTH_LONG).show()&#10;                            } finally {&#10;                                isLoading = false&#10;                            }&#10;                        }&#10;                    }&#10;                },&#10;                colors = ButtonDefaults.buttonColors(containerColor = Color.White),&#10;                modifier = Modifier.fillMaxWidth(),&#10;                enabled = selectedImageUri != null &amp;&amp; !isLoading&#10;            ) {&#10;                if (isLoading) {&#10;                    CircularProgressIndicator(&#10;                        modifier = Modifier.size(16.dp),&#10;                        color = Color.Black,&#10;                        strokeWidth = 2.dp&#10;                    )&#10;                    Spacer(modifier = Modifier.width(8.dp))&#10;                    Text(&quot;Analyzing...&quot;, color = Color.Black)&#10;                } else {&#10;                    Text(&quot;Upload &amp; Start Analysis&quot;, color = Color.Black)&#10;                }&#10;            }&#10;&#10;            // Add extra bottom spacing to ensure button is visible&#10;            Spacer(modifier = Modifier.height(32.dp))&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun DashedBorderBox(onClick: () -&gt; Unit, hasSelectedImage: Boolean) {&#10;    val cornerRadius = 12.dp&#10;    // Reduce height significantly when image is selected to make room for the button&#10;    val boxHeight = if (hasSelectedImage) 200.dp else 550.dp&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .height(boxHeight)&#10;            .padding(4.dp)&#10;            .clickable { onClick() },&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Canvas(modifier = Modifier.fillMaxSize()) {&#10;            val dashLength = 10.dp.toPx()&#10;            val gapLength = 10.dp.toPx()&#10;            drawRoundRect(&#10;                color = Color.White,&#10;                size = Size(size.width, size.height),&#10;                cornerRadius = CornerRadius(cornerRadius.toPx(), cornerRadius.toPx()),&#10;                style = Stroke(&#10;                    width = 2.dp.toPx(),&#10;                    pathEffect = PathEffect.dashPathEffect(&#10;                        floatArrayOf(dashLength, gapLength), 0f&#10;                    )&#10;                )&#10;            )&#10;        }&#10;&#10;        Column(&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            modifier = Modifier.padding(16.dp)&#10;        ) {&#10;            Icon(&#10;                painter = painterResource(id = R.drawable.ic_cloud_upload),&#10;                contentDescription = &quot;Upload Icon&quot;,&#10;                tint = Color.White,&#10;                modifier = Modifier.size(if (hasSelectedImage) 32.dp else 48.dp) // Smaller icon when image selected&#10;            )&#10;            &#10;            if (hasSelectedImage) {&#10;                // Compact text when image is selected&#10;                Text(&#10;                    text = &quot;Tap to change image&quot;,&#10;                    fontSize = 14.sp,&#10;                    color = Color.White,&#10;                    fontWeight = FontWeight.SemiBold&#10;                )&#10;            } else {&#10;                // Full text when no image selected&#10;                Text(&#10;                    text = &quot;Browse Files&quot;,&#10;                    fontSize = 16.sp,&#10;                    color = Color.White,&#10;                    fontWeight = FontWeight.SemiBold&#10;                )&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;                Text(&#10;                    text = &quot;Supported Formats: JPEG, PNG&quot;,&#10;                    fontSize = 12.sp,&#10;                    color = Color.White&#10;                )&#10;                Spacer(modifier = Modifier.height(2.dp))&#10;                Text(&#10;                    text = &quot;Upload Limit: 1 image file only.&quot;,&#10;                    fontSize = 12.sp,&#10;                    color = Color.White&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ImageInfoBox(uri: Uri, onDelete: () -&gt; Unit) {&#10;    val context = LocalContext.current&#10;&#10;    val fileName = remember(uri) {&#10;        var name = &quot;Unknown&quot;&#10;        val cursor = context.contentResolver.query(uri, null, null, null, null)&#10;        cursor?.use {&#10;            val nameIndex = it.getColumnIndex(OpenableColumns.DISPLAY_NAME)&#10;            if (it.moveToFirst() &amp;&amp; nameIndex != -1) {&#10;                name = it.getString(nameIndex)&#10;            }&#10;        }&#10;        name&#10;    }&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .height(80.dp)&#10;            .border(width = 2.dp, color = Color.White, shape = MaterialTheme.shapes.medium)&#10;            .padding(horizontal = 12.dp, vertical = 8.dp)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier.fillMaxSize(),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Text(&#10;                text = fileName,&#10;                color = Color.White,&#10;                fontSize = 14.sp,&#10;                maxLines = 1,&#10;                modifier = Modifier.weight(1f)&#10;            )&#10;            IconButton(onClick = { onDelete() }) {&#10;                Icon(&#10;                    imageVector = Icons.Default.Delete,&#10;                    contentDescription = &quot;Delete&quot;,&#10;                    tint = Color.White&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun UploadImageScreenPreview() {&#10;    NeuroViewTheme {&#10;        // Preview with dummy navigation callbacks&#10;        UploadImageScreen(&#10;            paddingValues = PaddingValues(0.dp),&#10;            onNavigateToHome = {},&#10;            onNavigateToDashboard = {},&#10;            onNavigateToPastRecords = {},&#10;            onNavigateToResult = { _, _ -&gt; }&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>