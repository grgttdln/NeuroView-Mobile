<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/neuroview/components/BottomNavigationBar.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/neuroview/components/BottomNavigationBar.kt" />
              <option name="originalContent" value="package com.example.neuroview.components&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.unit.dp&#10;import androidx.navigation.NavController&#10;import com.example.neuroview.Routes&#10;import com.example.neuroview.R&#10;&#10;data class BottomNavItem(&#10;    val route: String,&#10;    val icon: Int,&#10;    val isCentralButton: Boolean = false&#10;)&#10;&#10;@Composable&#10;fun BottomNavigationBar(&#10;    navController: NavController,&#10;    currentRoute: String?,&#10;    bottomPadding: Int = 16, // Add this parameter to control vertical position&#10;    navBarHeight: Int = 70, // Add this parameter to control navbar height&#10;    regularIconSize: Int = 24, // Size for regular nav icons&#10;    fabIconSize: Int = 28,     // Size for the elevated FAB icon&#10;    fabSize: Int = 64          // Size of the entire FAB button&#10;) {&#10;    val items = listOf(&#10;        BottomNavItem(Routes.DASHBOARD, R.drawable.ic_home),&#10;        BottomNavItem(Routes.UPLOAD_IMAGE, R.drawable.ic_cloud_upload, isCentralButton = true),&#10;        BottomNavItem(Routes.PAST_RECORDS, R.drawable.ic_folder)&#10;    )&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .height(navBarHeight.dp)&#10;            .background(Color.Transparent)&#10;            .padding(bottom = bottomPadding.dp), // Add bottom padding for positioning&#10;        contentAlignment = Alignment.BottomCenter&#10;    ) {&#10;        Surface(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(56.dp)&#10;                .align(Alignment.BottomCenter)&#10;                .padding(horizontal = 16.dp),&#10;            color = Color.White,&#10;            shape = RoundedCornerShape(28.dp),&#10;            shadowElevation = 8.dp&#10;        ) {&#10;            // Empty surface for background&#10;        }&#10;&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(horizontal = 16.dp)&#10;                .height(navBarHeight.dp),&#10;            horizontalArrangement = Arrangement.SpaceAround,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            items.forEach { item -&gt;&#10;                if (item.isCentralButton) {&#10;                    Spacer(modifier = Modifier.weight(0.5f))&#10;&#10;                    CustomElevatedFab(&#10;                        icon = item.icon,&#10;                        isSelected = currentRoute == item.route,&#10;                        fabSize = fabSize,&#10;                        iconSize = fabIconSize,&#10;                        onClick = {&#10;                            if (currentRoute != item.route) {&#10;                                navController.navigate(item.route) {&#10;                                    popUpTo(navController.graph.startDestinationId) {&#10;                                        saveState = true&#10;                                    }&#10;                                    launchSingleTop = true&#10;                                    restoreState = true&#10;                                }&#10;                            }&#10;                        }&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.weight(0.5f))&#10;                } else {&#10;                    CustomBottomNavItem(&#10;                        item = item,&#10;                        isSelected = currentRoute == item.route,&#10;                        iconSize = regularIconSize,&#10;                        onClick = {&#10;                            if (currentRoute != item.route) {&#10;                                navController.navigate(item.route) {&#10;                                    popUpTo(navController.graph.startDestinationId) {&#10;                                        saveState = true&#10;                                    }&#10;                                    launchSingleTop = true&#10;                                    restoreState = true&#10;                                }&#10;                            }&#10;                        },&#10;                        modifier = Modifier.weight(1f)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun CustomBottomNavItem(&#10;    item: BottomNavItem,&#10;    isSelected: Boolean,&#10;    onClick: () -&gt; Unit,&#10;    modifier: Modifier = Modifier,&#10;    iconSize: Int = 24 // Default size for regular nav icons&#10;) {&#10;    Column(&#10;        modifier = modifier&#10;            .clickable(onClick = onClick)&#10;            .padding(vertical = 8.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        verticalArrangement = Arrangement.Center&#10;    ) {&#10;        Icon(&#10;            painter = painterResource(id = item.icon),&#10;            contentDescription = null,&#10;            tint = if (isSelected) MaterialTheme.colorScheme.primary else Color.Black,&#10;            modifier = Modifier.size(iconSize.dp) // Set the icon size&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun CustomElevatedFab(&#10;    icon: Int,&#10;    isSelected: Boolean,&#10;    onClick: () -&gt; Unit,&#10;    fabSize: Int = 64,    // Size of the entire FAB button&#10;    iconSize: Int = 28    // Size for the icon inside the FAB&#10;) {&#10;    Card(&#10;        modifier = Modifier&#10;            .size(fabSize.dp)&#10;            .offset(y = (-20).dp),&#10;        shape = CircleShape,&#10;        colors = CardDefaults.cardColors(containerColor = Color.Black),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 10.dp)&#10;    ) {&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .clickable(onClick = onClick),&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            Icon(&#10;                painter = painterResource(id = icon),&#10;                contentDescription = null,&#10;                tint = Color.White,&#10;                modifier = Modifier.size(iconSize.dp) // Set the icon size&#10;            )&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.neuroview.components&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.unit.dp&#10;import androidx.navigation.NavController&#10;import com.example.neuroview.Routes&#10;import com.example.neuroview.R&#10;&#10;data class BottomNavItem(&#10;    val route: String,&#10;    val icon: Int,&#10;    val isCentralButton: Boolean = false&#10;)&#10;&#10;@Composable&#10;fun BottomNavigationBar(&#10;    navController: NavController,&#10;    currentRoute: String?,&#10;    bottomPadding: Int = 16, // Add this parameter to control vertical position&#10;    navBarHeight: Int = 70, // Add this parameter to control navbar height&#10;    regularIconSize: Int = 24, // Size for regular nav icons&#10;    fabIconSize: Int = 28,     // Size for the elevated FAB icon&#10;    fabSize: Int = 64,          // Size of the entire FAB button&#10;    navBarWidth: Float = 1f,      // Controls the width as a fraction (0.8f = 80% width)&#10;    horizontalPadding: Int = 16   // Controls the horizontal margins&#10;) {&#10;    val items = listOf(&#10;        BottomNavItem(Routes.DASHBOARD, R.drawable.ic_home),&#10;        BottomNavItem(Routes.UPLOAD_IMAGE, R.drawable.ic_cloud_upload, isCentralButton = true),&#10;        BottomNavItem(Routes.PAST_RECORDS, R.drawable.ic_folder)&#10;    )&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .height(navBarHeight.dp)&#10;            .background(Color.Transparent)&#10;            .padding(bottom = bottomPadding.dp),&#10;        contentAlignment = Alignment.BottomCenter&#10;    ) {&#10;        Surface(&#10;            modifier = Modifier&#10;                .fillMaxWidth(navBarWidth) // Apply width fraction here&#10;                .height(56.dp)&#10;                .align(Alignment.BottomCenter)&#10;                .padding(horizontal = horizontalPadding.dp), // Use adjustable horizontal padding&#10;            color = Color.White,&#10;            shape = RoundedCornerShape(28.dp),&#10;            shadowElevation = 8.dp&#10;        ) {&#10;            // Empty surface for background&#10;        }&#10;&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth(navBarWidth) // Apply width fraction here too&#10;                .padding(horizontal = horizontalPadding.dp) // Use adjustable horizontal padding&#10;                .height(navBarHeight.dp),&#10;            horizontalArrangement = Arrangement.SpaceAround,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            items.forEach { item -&gt;&#10;                if (item.isCentralButton) {&#10;                    Spacer(modifier = Modifier.weight(0.5f))&#10;&#10;                    CustomElevatedFab(&#10;                        icon = item.icon,&#10;                        isSelected = currentRoute == item.route,&#10;                        fabSize = fabSize,&#10;                        iconSize = fabIconSize,&#10;                        onClick = {&#10;                            if (currentRoute != item.route) {&#10;                                navController.navigate(item.route) {&#10;                                    popUpTo(navController.graph.startDestinationId) {&#10;                                        saveState = true&#10;                                    }&#10;                                    launchSingleTop = true&#10;                                    restoreState = true&#10;                                }&#10;                            }&#10;                        }&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.weight(0.5f))&#10;                } else {&#10;                    CustomBottomNavItem(&#10;                        item = item,&#10;                        isSelected = currentRoute == item.route,&#10;                        iconSize = regularIconSize,&#10;                        onClick = {&#10;                            if (currentRoute != item.route) {&#10;                                navController.navigate(item.route) {&#10;                                    popUpTo(navController.graph.startDestinationId) {&#10;                                        saveState = true&#10;                                    }&#10;                                    launchSingleTop = true&#10;                                    restoreState = true&#10;                                }&#10;                            }&#10;                        },&#10;                        modifier = Modifier.weight(1f)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun CustomBottomNavItem(&#10;    item: BottomNavItem,&#10;    isSelected: Boolean,&#10;    onClick: () -&gt; Unit,&#10;    modifier: Modifier = Modifier,&#10;    iconSize: Int = 24 // Default size for regular nav icons&#10;) {&#10;    Column(&#10;        modifier = modifier&#10;            .clickable(onClick = onClick)&#10;            .padding(vertical = 8.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        verticalArrangement = Arrangement.Center&#10;    ) {&#10;        Icon(&#10;            painter = painterResource(id = item.icon),&#10;            contentDescription = null,&#10;            tint = if (isSelected) MaterialTheme.colorScheme.primary else Color.Black,&#10;            modifier = Modifier.size(iconSize.dp) // Set the icon size&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun CustomElevatedFab(&#10;    icon: Int,&#10;    isSelected: Boolean,&#10;    onClick: () -&gt; Unit,&#10;    fabSize: Int = 64,    // Size of the entire FAB button&#10;    iconSize: Int = 28    // Size for the icon inside the FAB&#10;) {&#10;    Card(&#10;        modifier = Modifier&#10;            .size(fabSize.dp)&#10;            .offset(y = (-20).dp),&#10;        shape = CircleShape,&#10;        colors = CardDefaults.cardColors(containerColor = Color.Black),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 10.dp)&#10;    ) {&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .clickable(onClick = onClick),&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            Icon(&#10;                painter = painterResource(id = icon),&#10;                contentDescription = null,&#10;                tint = Color.White,&#10;                modifier = Modifier.size(iconSize.dp) // Set the icon size&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/neuroview/components/TopAppBar.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/neuroview/components/TopAppBar.kt" />
              <option name="originalContent" value="package com.example.neuroview.components&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import com.example.neuroview.R&#10;&#10;@Composable&#10;fun TopAppBar(&#10;    backgroundColor: Color = Color.Black, // Changed to black to match the image&#10;    textColor: Color = Color.White,     // Changed to white to match the image&#10;    logoSize: Int = 36,                 // Adjusted for a slightly larger logo relative to text&#10;    titleFontSize: Int = 24,            // Kept as is, matches visual&#10;    barHeight: Int = 64,&#10;    horizontalPadding: Int = 18&#10;) {&#10;    Surface(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .height(barHeight.dp),&#10;        color = backgroundColor,&#10;        shadowElevation = 0.dp&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(horizontal = horizontalPadding.dp),&#10;            verticalAlignment = Alignment.CenterVertically,&#10;            horizontalArrangement = Arrangement.Center&#10;        ) {&#10;            // Logo&#10;            Image(&#10;                painter = painterResource(id = R.drawable.topbar_logo), // You can change this to your app logo&#10;                contentDescription = &quot;NeuroView Logo&quot;,&#10;                modifier = Modifier&#10;                    .size(logoSize.dp)&#10;                    .padding(end = 8.dp)&#10;            )&#10;&#10;            // App Title&#10;            Text(&#10;                text = &quot;NeuroView&quot;,&#10;                fontSize = titleFontSize.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                color = textColor&#10;            )&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.neuroview.components&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import com.example.neuroview.R&#10;&#10;@Composable&#10;fun TopAppBar(&#10;    backgroundColor: Color = Color.Black, // Changed to black to match the image&#10;    textColor: Color = Color.White,     // Changed to white to match the image&#10;    logoSize: Int = 36,                 // Adjusted for a slightly larger logo relative to text&#10;    titleFontSize: Int = 24,            // Kept as is, matches visual&#10;    barHeight: Int = 64,&#10;    horizontalPadding: Int = 18,&#10;    topPadding: Int = 0,        // Add vertical padding from top&#10;    bottomPadding: Int = 0,     // Add vertical padding from bottom&#10;    verticalOffset: Int = 0     // Add vertical offset to move entire bar up/down&#10;) {&#10;    Surface(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .height((barHeight + topPadding + bottomPadding).dp)&#10;            .offset(y = verticalOffset.dp), // Apply vertical offset&#10;        color = backgroundColor,&#10;        shadowElevation = 0.dp&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(&#10;                    horizontal = horizontalPadding.dp,&#10;                    top = topPadding.dp,&#10;                    bottom = bottomPadding.dp&#10;                ),&#10;            verticalAlignment = Alignment.CenterVertically,&#10;            horizontalArrangement = Arrangement.Center&#10;        ) {&#10;            // Logo&#10;            Image(&#10;                painter = painterResource(id = R.drawable.topbar_logo), // You can change this to your app logo&#10;                contentDescription = &quot;NeuroView Logo&quot;,&#10;                modifier = Modifier&#10;                    .size(logoSize.dp)&#10;                    .padding(end = 8.dp)&#10;            )&#10;&#10;            // App Title&#10;            Text(&#10;                text = &quot;NeuroView&quot;,&#10;                fontSize = titleFontSize.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                color = textColor&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/neuroview/screens/DashboardScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/neuroview/screens/DashboardScreen.kt" />
              <option name="originalContent" value="package com.example.neuroview.screens&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;import com.example.neuroview.Routes&#10;import com.example.neuroview.components.BottomNavigationBar&#10;import kotlin.Int&#10;&#10;@Composable&#10;fun DashboardScreen(navController: NavController) {&#10;    Scaffold(&#10;        bottomBar = {&#10;            BottomNavigationBar(&#10;                navController = navController,&#10;                currentRoute = Routes.DASHBOARD,&#10;                bottomPadding = 18, // Adjust this value to move navbar up/down&#10;                navBarHeight = 80,   // Adjust this to change navbar height&#10;                regularIconSize = 32, // Size for regular nav icons&#10;                fabIconSize = 32,     // Size for the elevated FAB icon&#10;                fabSize = 64,          // Size of the entire FAB button&#10;                navBarWidth= 0.8f,      // Controls the width as a fraction (0.8f = 80% width)&#10;                horizontalPadding = 16   // Controls the horizontal margins&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .background(Color.Black)&#10;                .padding(paddingValues)&#10;                .padding(16.dp),&#10;            verticalArrangement = Arrangement.Center,&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Text(&#10;                text = &quot;Dashboard&quot;,&#10;                fontSize = 32.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                color = Color.White,&#10;                modifier = Modifier.padding(bottom = 32.dp)&#10;            )&#10;&#10;            Text(&#10;                text = &quot;This is the Dashboard screen where you can view your overview and statistics.&quot;,&#10;                fontSize = 16.sp,&#10;                color = Color.White,&#10;                modifier = Modifier.padding(bottom = 32.dp)&#10;            )&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.neuroview.screens&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;import com.example.neuroview.Routes&#10;import com.example.neuroview.components.BottomNavigationBar&#10;import com.example.neuroview.components.TopAppBar&#10;&#10;@Composable&#10;fun DashboardScreen(navController: NavController) {&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                backgroundColor = Color.Black,&#10;                textColor = Color.White,&#10;                logoSize = 36,&#10;                titleFontSize = 28&#10;            )&#10;        },&#10;        bottomBar = {&#10;            BottomNavigationBar(&#10;                navController = navController,&#10;                currentRoute = Routes.DASHBOARD,&#10;                bottomPadding = 18, // Adjust this value to move navbar up/down&#10;                navBarHeight = 80,   // Adjust this to change navbar height&#10;                regularIconSize = 32, // Size for regular nav icons&#10;                fabIconSize = 32,     // Size for the elevated FAB icon&#10;                fabSize = 64,          // Size of the entire FAB button&#10;                navBarWidth= 0.8f,      // Controls the width as a fraction (0.8f = 80% width)&#10;                horizontalPadding = 16   // Controls the horizontal margins&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .background(Color.Black)&#10;                .padding(paddingValues)&#10;                .padding(16.dp),&#10;            verticalArrangement = Arrangement.Center,&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Text(&#10;                text = &quot;Dashboard&quot;,&#10;                fontSize = 32.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                color = Color.White,&#10;                modifier = Modifier.padding(bottom = 32.dp)&#10;            )&#10;&#10;            Text(&#10;                text = &quot;This is the Dashboard screen where you can view your overview and statistics.&quot;,&#10;                fontSize = 16.sp,&#10;                color = Color.White,&#10;                modifier = Modifier.padding(bottom = 32.dp)&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/neuroview/screens/PastRecordsScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/neuroview/screens/PastRecordsScreen.kt" />
              <option name="originalContent" value="package com.example.neuroview.screens&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;import com.example.neuroview.Routes&#10;import com.example.neuroview.components.BottomNavigationBar&#10;&#10;@Composable&#10;fun PastRecordsScreen(navController: NavController) {&#10;    Scaffold(&#10;        bottomBar = {&#10;            BottomNavigationBar(&#10;                navController = navController,&#10;                currentRoute = Routes.PAST_RECORDS,&#10;                bottomPadding = 18, // Adjust this value to move navbar up/down&#10;                navBarHeight = 80,  // Adjust this to change navbar height&#10;                regularIconSize = 32, // Size for regular nav icons&#10;                fabIconSize = 32,     // Size for the elevated FAB icon&#10;                fabSize = 64,          // Size of the entire FAB button&#10;                navBarWidth= 0.8f,      // Controls the width as a fraction (0.8f = 80% width)&#10;                horizontalPadding = 16   // Controls the horizontal margins&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .background(Color.Black)&#10;                .padding(paddingValues)&#10;                .padding(16.dp),&#10;            verticalArrangement = Arrangement.Center,&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Text(&#10;                text = &quot;Past Records&quot;,&#10;                fontSize = 32.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                color = Color.White,&#10;                modifier = Modifier.padding(bottom = 32.dp)&#10;            )&#10;&#10;            Text(&#10;                text = &quot;This is the Past Records screen where you can view your historical data and previous analyses.&quot;,&#10;                fontSize = 16.sp,&#10;&#10;                color = Color.White,&#10;                modifier = Modifier.padding(bottom = 32.dp)&#10;            )&#10;&#10;            Button(&#10;                onClick = { navController.navigate(Routes.HOME) }&#10;            ) {&#10;                Text(&quot;Back to Home&quot;)&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.neuroview.screens&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;import com.example.neuroview.Routes&#10;import com.example.neuroview.components.BottomNavigationBar&#10;import com.example.neuroview.components.TopAppBar&#10;&#10;@Composable&#10;fun PastRecordsScreen(navController: NavController) {&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                backgroundColor = Color.Black,&#10;                textColor = Color.White,&#10;                logoSize = 36,&#10;                titleFontSize = 28&#10;            )&#10;        },&#10;        bottomBar = {&#10;            BottomNavigationBar(&#10;                navController = navController,&#10;                currentRoute = Routes.PAST_RECORDS,&#10;                bottomPadding = 18, // Adjust this value to move navbar up/down&#10;                navBarHeight = 80,  // Adjust this to change navbar height&#10;                regularIconSize = 32, // Size for regular nav icons&#10;                fabIconSize = 32,     // Size for the elevated FAB icon&#10;                fabSize = 64,          // Size of the entire FAB button&#10;                navBarWidth= 0.8f,      // Controls the width as a fraction (0.8f = 80% width)&#10;                horizontalPadding = 16   // Controls the horizontal margins&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .background(Color.Black)&#10;                .padding(paddingValues)&#10;                .padding(16.dp),&#10;            verticalArrangement = Arrangement.Center,&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Text(&#10;                text = &quot;Past Records&quot;,&#10;                fontSize = 32.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                color = Color.White,&#10;                modifier = Modifier.padding(bottom = 32.dp)&#10;            )&#10;&#10;            Text(&#10;                text = &quot;This is the Past Records screen where you can view your historical data and previous analyses.&quot;,&#10;                fontSize = 16.sp,&#10;&#10;                color = Color.White,&#10;                modifier = Modifier.padding(bottom = 32.dp)&#10;            )&#10;&#10;            Button(&#10;                onClick = { navController.navigate(Routes.HOME) }&#10;            ) {&#10;                Text(&quot;Back to Home&quot;)&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/neuroview/screens/UploadImageScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/neuroview/screens/UploadImageScreen.kt" />
              <option name="originalContent" value="package com.example.neuroview.screens&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;import com.example.neuroview.Routes&#10;import com.example.neuroview.components.BottomNavigationBar&#10;&#10;@Composable&#10;fun UploadImageScreen(navController: NavController) {&#10;    Scaffold(&#10;        bottomBar = {&#10;            BottomNavigationBar(&#10;                navController = navController,&#10;                currentRoute = Routes.UPLOAD_IMAGE,&#10;                bottomPadding = 18, // Adjust this value to move navbar up/down&#10;                navBarHeight = 80,   // Adjust this to change navbar height&#10;                regularIconSize = 32, // Size for regular nav icons&#10;                fabIconSize = 32,     // Size for the elevated FAB icon&#10;                fabSize = 64,          // Size of the entire FAB button&#10;                navBarWidth= 0.8f,      // Controls the width as a fraction (0.8f = 80% width)&#10;                horizontalPadding = 16   // Controls the horizontal margins&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .background(Color.Black)&#10;                .padding(paddingValues)&#10;                .padding(16.dp),&#10;&#10;            verticalArrangement = Arrangement.Center,&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Text(&#10;                text = &quot;Upload Image&quot;,&#10;                fontSize = 32.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                color = Color.White,&#10;                modifier = Modifier.padding(bottom = 32.dp)&#10;            )&#10;&#10;            Text(&#10;                text = &quot;This is the Upload Image screen where you can upload images for analysis.&quot;,&#10;                fontSize = 16.sp,&#10;                color = Color.White,&#10;                modifier = Modifier.padding(bottom = 32.dp)&#10;            )&#10;&#10;            Button(&#10;                onClick = { navController.navigate(Routes.HOME) }&#10;            ) {&#10;                Text(&quot;Back to Home&quot;)&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.neuroview.screens&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;import com.example.neuroview.Routes&#10;import com.example.neuroview.components.BottomNavigationBar&#10;import com.example.neuroview.components.TopAppBar&#10;&#10;@Composable&#10;fun UploadImageScreen(navController: NavController) {&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                backgroundColor = Color.Black,&#10;                textColor = Color.White,&#10;                logoSize = 36,&#10;                titleFontSize = 28&#10;            )&#10;        },&#10;        bottomBar = {&#10;            BottomNavigationBar(&#10;                navController = navController,&#10;                currentRoute = Routes.UPLOAD_IMAGE,&#10;                bottomPadding = 18, // Adjust this value to move navbar up/down&#10;                navBarHeight = 80,   // Adjust this to change navbar height&#10;                regularIconSize = 32, // Size for regular nav icons&#10;                fabIconSize = 32,     // Size for the elevated FAB icon&#10;                fabSize = 64,          // Size of the entire FAB button&#10;                navBarWidth= 0.8f,      // Controls the width as a fraction (0.8f = 80% width)&#10;                horizontalPadding = 16   // Controls the horizontal margins&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .background(Color.Black)&#10;                .padding(paddingValues)&#10;                .padding(16.dp),&#10;&#10;            verticalArrangement = Arrangement.Center,&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Text(&#10;                text = &quot;Upload Image&quot;,&#10;                fontSize = 32.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                color = Color.White,&#10;                modifier = Modifier.padding(bottom = 32.dp)&#10;            )&#10;&#10;            Text(&#10;                text = &quot;This is the Upload Image screen where you can upload images for analysis.&quot;,&#10;                fontSize = 16.sp,&#10;                color = Color.White,&#10;                modifier = Modifier.padding(bottom = 32.dp)&#10;            )&#10;&#10;            Button(&#10;                onClick = { navController.navigate(Routes.HOME) }&#10;            ) {&#10;                Text(&quot;Back to Home&quot;)&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>