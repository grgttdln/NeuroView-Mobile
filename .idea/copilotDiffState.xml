<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/neuroview/screens/PastRecordsScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/neuroview/screens/PastRecordsScreen.kt" />
              <option name="originalContent" value="package com.example.neuroview.screens&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;import coil.compose.rememberAsyncImagePainter&#10;import com.example.neuroview.Routes&#10;import com.example.neuroview.components.BottomNavigationBar&#10;import com.example.neuroview.components.TopAppBar&#10;import com.example.neuroview.network.ApiService&#10;import com.example.neuroview.network.ImageData&#10;import kotlinx.coroutines.launch&#10;import java.net.URLEncoder&#10;import java.nio.charset.StandardCharsets&#10;import java.text.SimpleDateFormat&#10;import java.util.*&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import kotlinx.serialization.encodeToString&#10;import kotlinx.serialization.json.Json&#10;&#10;@Composable&#10;fun PastRecordsScreen(navController: NavController) {&#10;    val apiService = remember { ApiService() }&#10;    var pastRecords by remember { mutableStateOf&lt;List&lt;ImageData&gt;&gt;(emptyList()) }&#10;    var isLoading by remember { mutableStateOf(true) }&#10;    var errorMessage by remember { mutableStateOf&lt;String?&gt;(null) }&#10;    var selectedFilter by remember { mutableStateOf&lt;String?&gt;(null) }&#10;&#10;    val coroutineScope = rememberCoroutineScope()&#10;&#10;    LaunchedEffect(Unit) {&#10;        launch {&#10;            val result = apiService.getPastRecords()&#10;            isLoading = false&#10;            result.onSuccess { response -&gt;&#10;                pastRecords = response.data&#10;                errorMessage = null&#10;            }.onFailure { e -&gt;&#10;                errorMessage = &quot;Failed to fetch records: ${e.message}&quot;&#10;                pastRecords = emptyList()&#10;            }&#10;        }&#10;    }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                backgroundColor = Color.Black,&#10;                textColor = Color.White,&#10;                logoSize = 42,&#10;                titleFontSize = 28&#10;            )&#10;        },&#10;        bottomBar = {&#10;            BottomNavigationBar(&#10;                navController = navController,&#10;                currentRoute = Routes.PAST_RECORDS,&#10;                bottomPadding = 18,&#10;                navBarHeight = 80,&#10;                regularIconSize = 32,&#10;                fabIconSize = 32,&#10;                fabSize = 64,&#10;                navBarWidth = 0.8f,&#10;                horizontalPadding = 16&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .background(Color.Black)&#10;                .padding(paddingValues)&#10;                .padding(horizontal = 16.dp, vertical = 8.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            Text(&#10;                text = &quot;COLLECTIONS&quot;,&#10;                fontSize = 18.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                color = Color(0xFF737373),&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(vertical = 4.dp),&#10;                textAlign = TextAlign.Center&#10;            )&#10;&#10;            Text(&#10;                text = &quot;Repository of NeuroView&quot;,&#10;                fontSize = 22.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                color = Color.White,&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(bottom = 16.dp),&#10;                textAlign = TextAlign.Center&#10;            )&#10;&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(bottom = 16.dp),&#10;                horizontalArrangement = Arrangement.SpaceAround,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                FilterChip(&#10;                    text = &quot;Glioma&quot;,&#10;                    isSelected = selectedFilter == &quot;glioma&quot;&#10;                ) {&#10;                    selectedFilter = if (selectedFilter == &quot;glioma&quot;) null else &quot;glioma&quot;&#10;                }&#10;                FilterChip(&#10;                    text = &quot;No Tumor&quot;,&#10;                    isSelected = selectedFilter == &quot;notumor&quot;&#10;                ) {&#10;                    selectedFilter = if (selectedFilter == &quot;notumor&quot;) null else &quot;notumor&quot;&#10;                }&#10;                FilterChip(&#10;                    text = &quot;Pituitary&quot;,&#10;                    isSelected = selectedFilter == &quot;pituitary&quot;&#10;                ) {&#10;                    selectedFilter = if (selectedFilter == &quot;pituitary&quot;) null else &quot;pituitary&quot;&#10;                }&#10;                FilterChip(&#10;                    text = &quot;Meningioma&quot;,&#10;                    isSelected = selectedFilter == &quot;meningioma&quot;&#10;                ) {&#10;                    selectedFilter = if (selectedFilter == &quot;meningioma&quot;) null else &quot;meningioma&quot;&#10;                }&#10;            }&#10;&#10;            if (isLoading) {&#10;                CircularProgressIndicator(color = Color.White)&#10;                Text(&quot;Loading records...&quot;, color = Color.White, modifier = Modifier.padding(top = 16.dp))&#10;            } else if (errorMessage != null) {&#10;                Text(&#10;                    text = errorMessage ?: &quot;An unknown error occurred.&quot;,&#10;                    color = Color.Red,&#10;                    modifier = Modifier.padding(top = 16.dp)&#10;                )&#10;                Button(onClick = {&#10;                    isLoading = true&#10;                    errorMessage = null&#10;                    coroutineScope.launch {&#10;                        val result = apiService.getPastRecords()&#10;                        isLoading = false&#10;                        result.onSuccess { response -&gt;&#10;                            pastRecords = response.data&#10;                            errorMessage = null&#10;                        }.onFailure { e -&gt;&#10;                            errorMessage = &quot;Failed to fetch records: ${e.message}&quot;&#10;                            pastRecords = emptyList()&#10;                        }&#10;                    }&#10;                }) {&#10;                    Text(&quot;Retry&quot;)&#10;                }&#10;            } else {&#10;                val filteredRecords = remember(pastRecords, selectedFilter) {&#10;                    if (selectedFilter == null) {&#10;                        pastRecords&#10;                    } else {&#10;                        pastRecords.filter { it.information?.tumor_type?.lowercase(Locale.getDefault()) == selectedFilter?.lowercase(Locale.getDefault()) }&#10;                    }&#10;                }&#10;&#10;                if (filteredRecords.isEmpty()) {&#10;                    Column(&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        horizontalAlignment = Alignment.CenterHorizontally,&#10;                        verticalArrangement = Arrangement.Center&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;No records found for the selected filter.&quot;,&#10;                            color = Color.White,&#10;                            fontSize = 16.sp,&#10;                            textAlign = TextAlign.Center,&#10;                            modifier = Modifier.padding(16.dp)&#10;                        )&#10;                        if (selectedFilter != null) {&#10;                            Button(onClick = { selectedFilter = null }) {&#10;                                Text(&quot;Show All Records&quot;)&#10;                            }&#10;                        }&#10;                    }&#10;                } else {&#10;                    LazyColumn(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        contentPadding = PaddingValues(bottom = 16.dp),&#10;                        verticalArrangement = Arrangement.spacedBy(16.dp),&#10;                        horizontalAlignment = Alignment.CenterHorizontally&#10;                    ) {&#10;                        // Re-introducing the chunked(2) logic for 2 columns&#10;                        val chunkedRecords = filteredRecords.chunked(2)&#10;                        items(chunkedRecords) { rowItems -&gt;&#10;                            Row(&#10;                                modifier = Modifier.fillMaxWidth(),&#10;                                horizontalArrangement = Arrangement.SpaceAround // Space out items in the row&#10;                            ) {&#10;                                rowItems.forEach { record -&gt;&#10;                                    // Each card takes half the width, with padding in between&#10;                                    // We use `weight(1f)` and `fillMaxHeight()` to make them share space and maintain height&#10;                                    Box(modifier = Modifier.weight(1f).padding(horizontal = 8.dp)) {&#10;                                        RecordCard(&#10;                                            record = record,&#10;                                            onCardClick = { clickedRecord -&gt;&#10;                                                // Convert ImageData to PredictionData format for ResultScreen&#10;                                                clickedRecord.information?.let { predictionInfo -&gt;&#10;                                                    try {&#10;                                                        val json = Json {&#10;                                                            ignoreUnknownKeys = true&#10;                                                            isLenient = true&#10;                                                        }&#10;                                                        val predictionJson = json.encodeToString(predictionInfo)&#10;                                                        val encodedPredictionJson = URLEncoder.encode(predictionJson, StandardCharsets.UTF_8.toString())&#10;                                                        val encodedImageUri = URLEncoder.encode(clickedRecord.url, StandardCharsets.UTF_8.toString())&#10;&#10;                                                        navController.navigate(&quot;result?predictionJson=$encodedPredictionJson&amp;imageUri=$encodedImageUri&quot;)&#10;                                                    } catch (e: Exception) {&#10;                                                        println(&quot;NeuroView: Failed to encode data for navigation: ${e.message}&quot;)&#10;                                                    }&#10;                                                }&#10;                                            }&#10;                                        )&#10;                                    }&#10;                                }&#10;                                // If there's only one item in the last row, add an empty box to balance&#10;                                if (rowItems.size == 1) {&#10;                                    Spacer(modifier = Modifier.weight(1f).padding(horizontal = 8.dp))&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun FilterChip(text: String, isSelected: Boolean, onClick: () -&gt; Unit) {&#10;    Surface(&#10;        shape = RoundedCornerShape(20.dp),&#10;        color = if (isSelected) Color.White else Color.DarkGray,&#10;        modifier = Modifier&#10;            .padding(horizontal = 4.dp)&#10;            .clickable(onClick = onClick)&#10;    ) {&#10;        Text(&#10;            text = text,&#10;            color = if (isSelected) Color.Black else Color.White,&#10;            fontSize = 14.sp,&#10;            modifier = Modifier.padding(horizontal = 12.dp, vertical = 8.dp)&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun RecordCard(record: ImageData, onCardClick: (ImageData) -&gt; Unit) {&#10;    // Keep fixed sizes for the card and image as per the previous successful iteration&#10;    val cardSize = 180.dp&#10;    val imageHeight = 100.dp&#10;&#10;    Card(&#10;        modifier = Modifier&#10;            .width(cardSize) // Fixed width for each card&#10;            .height(cardSize), // Fixed height for each card, making it square&#10;        shape = RoundedCornerShape(16.dp),&#10;        colors = CardDefaults.cardColors(containerColor = Color(0xFF1C1C1E)),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(12.dp),&#10;            horizontalAlignment = Alignment.Start,&#10;            verticalArrangement = Arrangement.SpaceBetween&#10;        ) {&#10;            // Image Box with fixed height&#10;            Box(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(imageHeight)&#10;                    .clip(RoundedCornerShape(8.dp))&#10;                    .background(Color.Black),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Image(&#10;                    painter = rememberAsyncImagePainter(model = record.url),&#10;                    contentDescription = &quot;Brain Scan Image&quot;,&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    contentScale = ContentScale.Fit,&#10;                    alignment = Alignment.Center&#10;                )&#10;            }&#10;&#10;            // Text elements&#10;            Text(&#10;                text = record.information?.tumor_type?.replaceFirstChar { if (it.isLowerCase()) it.titlecase(Locale.getDefault()) else it.toString() } ?: &quot;N/A&quot;,&#10;                color = Color.White,&#10;                fontSize = 16.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                maxLines = 1,&#10;                overflow = TextOverflow.Ellipsis&#10;            )&#10;&#10;            Text(&#10;                text = record.information?.confidence?.let { &quot;%.2f&quot;.format(it * 100) + &quot;%&quot; } ?: &quot;N/A&quot;,&#10;                color = Color.LightGray,&#10;                fontSize = 12.sp&#10;            )&#10;&#10;            // Date and View &gt; in a Row&#10;            val inputFormat = SimpleDateFormat(&quot;yyyy-MM-dd'T'HH:mm:ss.SSSSSSXXX&quot;, Locale.getDefault())&#10;            val outputFormat = SimpleDateFormat(&quot;MMMM d, yyyy&quot;, Locale.getDefault())&#10;            val date = try {&#10;                record.uploaded_at?.let { inputFormat.parse(it) }&#10;            } catch (e: Exception) {&#10;                null&#10;            }&#10;            val formattedDate = date?.let { outputFormat.format(it) } ?: &quot;N/A&quot;&#10;&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Text(&#10;                    text = formattedDate,&#10;                    color = Color.Gray,&#10;                    fontSize = 10.sp&#10;                )&#10;                Text(&#10;                    text = &quot;View &gt;&quot;,&#10;                    color = Color.White,&#10;                    fontSize = 12.sp,&#10;                    fontWeight = FontWeight.SemiBold,&#10;                    modifier = Modifier&#10;                        .clickable { onCardClick(record) }&#10;                        .padding(4.dp)&#10;                )&#10;            }&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.neuroview.screens&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;import coil.compose.rememberAsyncImagePainter&#10;import com.example.neuroview.Routes&#10;import com.example.neuroview.components.BottomNavigationBar&#10;import com.example.neuroview.components.TopAppBar&#10;import com.example.neuroview.network.ApiService&#10;import com.example.neuroview.network.ImageData&#10;import kotlinx.coroutines.launch&#10;import java.net.URLEncoder&#10;import java.nio.charset.StandardCharsets&#10;import java.text.SimpleDateFormat&#10;import java.util.*&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import kotlinx.serialization.encodeToString&#10;import kotlinx.serialization.json.Json&#10;&#10;@Composable&#10;fun PastRecordsScreen(navController: NavController) {&#10;    val apiService = remember { ApiService() }&#10;    var pastRecords by remember { mutableStateOf&lt;List&lt;ImageData&gt;&gt;(emptyList()) }&#10;    var isLoading by remember { mutableStateOf(true) }&#10;    var errorMessage by remember { mutableStateOf&lt;String?&gt;(null) }&#10;    var selectedFilter by remember { mutableStateOf&lt;String?&gt;(null) }&#10;&#10;    val coroutineScope = rememberCoroutineScope()&#10;&#10;    LaunchedEffect(Unit) {&#10;        launch {&#10;            val result = apiService.getPastRecords()&#10;            isLoading = false&#10;            result.onSuccess { response -&gt;&#10;                pastRecords = response.data&#10;                errorMessage = null&#10;            }.onFailure { e -&gt;&#10;                errorMessage = &quot;Failed to fetch records: ${e.message}&quot;&#10;                pastRecords = emptyList()&#10;            }&#10;        }&#10;    }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                backgroundColor = Color.Black,&#10;                textColor = Color.White,&#10;                logoSize = 42,&#10;                titleFontSize = 28&#10;            )&#10;        },&#10;        bottomBar = {&#10;            BottomNavigationBar(&#10;                navController = navController,&#10;                currentRoute = Routes.PAST_RECORDS,&#10;                bottomPadding = 18,&#10;                navBarHeight = 80,&#10;                regularIconSize = 32,&#10;                fabIconSize = 32,&#10;                fabSize = 64,&#10;                navBarWidth = 0.8f,&#10;                horizontalPadding = 16&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .background(Color.Black)&#10;                .padding(paddingValues)&#10;                .padding(horizontal = 16.dp, vertical = 8.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            Text(&#10;                text = &quot;COLLECTIONS&quot;,&#10;                fontSize = 18.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                color = Color(0xFF737373),&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(vertical = 4.dp),&#10;                textAlign = TextAlign.Center&#10;            )&#10;&#10;            Text(&#10;                text = &quot;Repository of NeuroView&quot;,&#10;                fontSize = 22.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                color = Color.White,&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(bottom = 16.dp),&#10;                textAlign = TextAlign.Center&#10;            )&#10;&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(bottom = 16.dp),&#10;                horizontalArrangement = Arrangement.SpaceAround,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                FilterChip(&#10;                    text = &quot;Glioma&quot;,&#10;                    isSelected = selectedFilter == &quot;glioma&quot;&#10;                ) {&#10;                    selectedFilter = if (selectedFilter == &quot;glioma&quot;) null else &quot;glioma&quot;&#10;                }&#10;                FilterChip(&#10;                    text = &quot;No Tumor&quot;,&#10;                    isSelected = selectedFilter == &quot;notumor&quot;&#10;                ) {&#10;                    selectedFilter = if (selectedFilter == &quot;notumor&quot;) null else &quot;notumor&quot;&#10;                }&#10;                FilterChip(&#10;                    text = &quot;Pituitary&quot;,&#10;                    isSelected = selectedFilter == &quot;pituitary&quot;&#10;                ) {&#10;                    selectedFilter = if (selectedFilter == &quot;pituitary&quot;) null else &quot;pituitary&quot;&#10;                }&#10;                FilterChip(&#10;                    text = &quot;Meningioma&quot;,&#10;                    isSelected = selectedFilter == &quot;meningioma&quot;&#10;                ) {&#10;                    selectedFilter = if (selectedFilter == &quot;meningioma&quot;) null else &quot;meningioma&quot;&#10;                }&#10;            }&#10;&#10;            if (isLoading) {&#10;                CircularProgressIndicator(color = Color.White)&#10;                Text(&quot;Loading records...&quot;, color = Color.White, modifier = Modifier.padding(top = 16.dp))&#10;            } else if (errorMessage != null) {&#10;                Text(&#10;                    text = errorMessage ?: &quot;An unknown error occurred.&quot;,&#10;                    color = Color.Red,&#10;                    modifier = Modifier.padding(top = 16.dp)&#10;                )&#10;                Button(onClick = {&#10;                    isLoading = true&#10;                    errorMessage = null&#10;                    coroutineScope.launch {&#10;                        val result = apiService.getPastRecords()&#10;                        isLoading = false&#10;                        result.onSuccess { response -&gt;&#10;                            pastRecords = response.data&#10;                            errorMessage = null&#10;                        }.onFailure { e -&gt;&#10;                            errorMessage = &quot;Failed to fetch records: ${e.message}&quot;&#10;                            pastRecords = emptyList()&#10;                        }&#10;                    }&#10;                }) {&#10;                    Text(&quot;Retry&quot;)&#10;                }&#10;            } else {&#10;                val filteredRecords = remember(pastRecords, selectedFilter) {&#10;                    if (selectedFilter == null) {&#10;                        pastRecords&#10;                    } else {&#10;                        pastRecords.filter { it.information?.tumor_type?.lowercase(Locale.getDefault()) == selectedFilter?.lowercase(Locale.getDefault()) }&#10;                    }&#10;                }&#10;&#10;                if (filteredRecords.isEmpty()) {&#10;                    Column(&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        horizontalAlignment = Alignment.CenterHorizontally,&#10;                        verticalArrangement = Arrangement.Center&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;No records found for the selected filter.&quot;,&#10;                            color = Color.White,&#10;                            fontSize = 16.sp,&#10;                            textAlign = TextAlign.Center,&#10;                            modifier = Modifier.padding(16.dp)&#10;                        )&#10;                        if (selectedFilter != null) {&#10;                            Button(onClick = { selectedFilter = null }) {&#10;                                Text(&quot;Show All Records&quot;)&#10;                            }&#10;                        }&#10;                    }&#10;                } else {&#10;                    LazyColumn(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        contentPadding = PaddingValues(bottom = 16.dp),&#10;                        verticalArrangement = Arrangement.spacedBy(16.dp),&#10;                        horizontalAlignment = Alignment.CenterHorizontally&#10;                    ) {&#10;                        // Re-introducing the chunked(2) logic for 2 columns&#10;                        val chunkedRecords = filteredRecords.chunked(2)&#10;                        items(chunkedRecords) { rowItems -&gt;&#10;                            Row(&#10;                                modifier = Modifier.fillMaxWidth(),&#10;                                horizontalArrangement = Arrangement.SpaceAround // Space out items in the row&#10;                            ) {&#10;                                rowItems.forEach { record -&gt;&#10;                                    // Each card takes half the width, with padding in between&#10;                                    // We use `weight(1f)` and `fillMaxHeight()` to make them share space and maintain height&#10;                                    Box(modifier = Modifier.weight(1f).padding(horizontal = 8.dp)) {&#10;                                        RecordCard(&#10;                                            record = record,&#10;                                            onCardClick = { clickedRecord -&gt;&#10;                                                // Convert ImageData to PredictionData format for ResultScreen&#10;                                                clickedRecord.information?.let { predictionInfo -&gt;&#10;                                                    try {&#10;                                                        val json = Json { &#10;                                                            ignoreUnknownKeys = true&#10;                                                            isLenient = true &#10;                                                        }&#10;                                                        val predictionJson = json.encodeToString(predictionInfo)&#10;                                                        val encodedPredictionJson = URLEncoder.encode(predictionJson, StandardCharsets.UTF_8.toString())&#10;                                                        val encodedImageUri = URLEncoder.encode(clickedRecord.url, StandardCharsets.UTF_8.toString())&#10;                                                        &#10;                                                        navController.navigate(&quot;result?predictionJson=$encodedPredictionJson&amp;imageUri=$encodedImageUri&quot;)&#10;                                                    } catch (e: Exception) {&#10;                                                        println(&quot;NeuroView: Failed to encode data for navigation: ${e.message}&quot;)&#10;                                                    }&#10;                                                }&#10;                                            }&#10;                                        )&#10;                                    }&#10;                                }&#10;                                // If there's only one item in the last row, add an empty box to balance&#10;                                if (rowItems.size == 1) {&#10;                                    Spacer(modifier = Modifier.weight(1f).padding(horizontal = 8.dp))&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun FilterChip(text: String, isSelected: Boolean, onClick: () -&gt; Unit) {&#10;    Surface(&#10;        shape = RoundedCornerShape(20.dp),&#10;        color = if (isSelected) Color.White else Color.DarkGray,&#10;        modifier = Modifier&#10;            .padding(horizontal = 4.dp)&#10;            .clickable(onClick = onClick)&#10;    ) {&#10;        Text(&#10;            text = text,&#10;            color = if (isSelected) Color.Black else Color.White,&#10;            fontSize = 14.sp,&#10;            modifier = Modifier.padding(horizontal = 12.dp, vertical = 8.dp)&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun RecordCard(record: ImageData, onCardClick: (ImageData) -&gt; Unit) {&#10;    // Keep fixed sizes for the card and image as per the previous successful iteration&#10;    val cardSize = 180.dp&#10;    val imageHeight = 100.dp&#10;&#10;    Card(&#10;        modifier = Modifier&#10;            .width(cardSize) // Fixed width for each card&#10;            .height(cardSize) // Fixed height for each card, making it square&#10;            .clickable { onCardClick(record) }, // Make entire card clickable&#10;        shape = RoundedCornerShape(16.dp),&#10;        colors = CardDefaults.cardColors(containerColor = Color(0xFF1C1C1E)),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(12.dp),&#10;            horizontalAlignment = Alignment.Start,&#10;            verticalArrangement = Arrangement.SpaceBetween&#10;        ) {&#10;            // Image Box with fixed height&#10;            Box(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(imageHeight)&#10;                    .clip(RoundedCornerShape(8.dp))&#10;                    .background(Color.Black),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Image(&#10;                    painter = rememberAsyncImagePainter(model = record.url),&#10;                    contentDescription = &quot;Brain Scan Image&quot;,&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    contentScale = ContentScale.Fit,&#10;                    alignment = Alignment.Center&#10;                )&#10;            }&#10;&#10;            // Text elements&#10;            Text(&#10;                text = record.information?.tumor_type?.replaceFirstChar { if (it.isLowerCase()) it.titlecase(Locale.getDefault()) else it.toString() } ?: &quot;N/A&quot;,&#10;                color = Color.White,&#10;                fontSize = 16.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                maxLines = 1,&#10;                overflow = TextOverflow.Ellipsis&#10;            )&#10;&#10;            Text(&#10;                text = record.information?.confidence?.let { &quot;%.2f&quot;.format(it * 100) + &quot;%&quot; } ?: &quot;N/A&quot;,&#10;                color = Color.LightGray,&#10;                fontSize = 12.sp&#10;            )&#10;&#10;            // Date and View &gt; in a Row&#10;            val inputFormat = SimpleDateFormat(&quot;yyyy-MM-dd'T'HH:mm:ss.SSSSSSXXX&quot;, Locale.getDefault())&#10;            val outputFormat = SimpleDateFormat(&quot;MMMM d, yyyy&quot;, Locale.getDefault())&#10;            val date = try {&#10;                record.uploaded_at?.let { inputFormat.parse(it) }&#10;            } catch (_: Exception) {&#10;                null&#10;            }&#10;            val formattedDate = date?.let { outputFormat.format(it) } ?: &quot;N/A&quot;&#10;&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Text(&#10;                    text = formattedDate,&#10;                    color = Color.Gray,&#10;                    fontSize = 10.sp&#10;                )&#10;                Text(&#10;                    text = &quot;View &gt;&quot;,&#10;                    color = Color.White,&#10;                    fontSize = 12.sp,&#10;                    fontWeight = FontWeight.SemiBold,&#10;                    modifier = Modifier.padding(4.dp)&#10;                )&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>