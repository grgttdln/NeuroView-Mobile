<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/neuroview/Navigation.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/neuroview/Navigation.kt" />
              <option name="originalContent" value="package com.example.neuroview&#10;&#10;import androidx.compose.runtime.Composable&#10;import androidx.navigation.NavHostController&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import com.example.neuroview.screens.DashboardScreen&#10;import com.example.neuroview.screens.DetailsScreen&#10;import com.example.neuroview.screens.HomeScreen&#10;import com.example.neuroview.screens.PastRecordsScreen&#10;import com.example.neuroview.screens.UploadImageScreen&#10;&#10;object Routes {&#10;    const val HOME = &quot;home&quot;&#10;    const val DASHBOARD = &quot;dashboard&quot;&#10;    const val UPLOAD_IMAGE = &quot;upload_image&quot;&#10;    const val DETAILS = &quot;details&quot;&#10;    const val PAST_RECORDS = &quot;past_records&quot;&#10;}&#10;&#10;@Composable&#10;fun NeuroViewNavigation(navController: NavHostController) {&#10;    NavHost(&#10;        navController = navController,&#10;        startDestination = Routes.HOME&#10;    ) {&#10;        composable(Routes.HOME) {&#10;            HomeScreen(navController = navController)&#10;        }&#10;        composable(Routes.DASHBOARD) {&#10;            DashboardScreen(navController = navController)&#10;        }&#10;        composable(Routes.UPLOAD_IMAGE) {&#10;            UploadImageScreen(&#10;                onBackClick = {&#10;                    navController.popBackStack()&#10;                }&#10;            )&#10;        }&#10;        composable(Routes.DETAILS) {&#10;            DetailsScreen(navController = navController)&#10;        }&#10;        composable(Routes.PAST_RECORDS) {&#10;            PastRecordsScreen(navController = navController)&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.neuroview&#10;&#10;import androidx.compose.runtime.Composable&#10;import androidx.navigation.NavHostController&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import com.example.neuroview.screens.DashboardScreen&#10;import com.example.neuroview.screens.DetailsScreen&#10;import com.example.neuroview.screens.HomeScreen&#10;import com.example.neuroview.screens.PastRecordsScreen&#10;import com.example.neuroview.screens.UploadImageScreen&#10;&#10;object Routes {&#10;    const val HOME = &quot;home&quot;&#10;    const val DASHBOARD = &quot;dashboard&quot;&#10;    const val UPLOAD_IMAGE = &quot;upload_image&quot;&#10;    const val DETAILS = &quot;details&quot;&#10;    const val PAST_RECORDS = &quot;past_records&quot;&#10;}&#10;&#10;@Composable&#10;fun NeuroViewNavigation(navController: NavHostController) {&#10;    NavHost(&#10;        navController = navController,&#10;        startDestination = Routes.HOME&#10;    ) {&#10;        composable(Routes.HOME) {&#10;            HomeScreen(navController = navController)&#10;        }&#10;        composable(Routes.DASHBOARD) {&#10;            DashboardScreen(navController = navController)&#10;        }&#10;        composable(Routes.UPLOAD_IMAGE) {&#10;            UploadImageScreen(navController = navController)&#10;        }&#10;        composable(Routes.DETAILS) {&#10;            DetailsScreen(navController = navController)&#10;        }&#10;        composable(Routes.PAST_RECORDS) {&#10;            PastRecordsScreen(navController = navController)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/neuroview/components/BottomNavigationBar.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/neuroview/components/BottomNavigationBar.kt" />
              <option name="originalContent" value="package com.example.neuroview.components&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.unit.Dp&#10;import androidx.compose.ui.unit.dp&#10;import androidx.navigation.NavController&#10;import com.example.neuroview.Routes&#10;import com.example.neuroview.R&#10;&#10;&#10;data class BottomNavItem(&#10;    val route: String,&#10;    val unselectedIcon: Int,&#10;    val selectedIcon: Int,&#10;    val isCentralButton: Boolean = false&#10;)&#10;&#10;@Composable&#10;fun BottomNavigationBar(&#10;    navController: NavController,&#10;    currentRoute: String?,&#10;    bottomPadding: Int = 16,&#10;    navBarHeight: Int = 80,&#10;    regularIconSize: Int = 32,&#10;    fabIconSize: Int = 32,&#10;    fabSize: Int = 64,&#10;    navBarWidth: Float = 0.6f,&#10;    horizontalPadding: Int = 16&#10;) {&#10;    val items = listOf(&#10;        BottomNavItem(Routes.DASHBOARD, R.drawable.ic_home, R.drawable.ic_home_filled),&#10;        BottomNavItem(Routes.UPLOAD_IMAGE, R.drawable.ic_cloud_upload, R.drawable.ic_cloud_upload, isCentralButton = true),&#10;        BottomNavItem(Routes.PAST_RECORDS, R.drawable.ic_folder, R.drawable.ic_folder_filled)&#10;    )&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .height(navBarHeight.dp)&#10;            .background(Color.Transparent)&#10;            .padding(bottom = bottomPadding.dp),&#10;        contentAlignment = Alignment.BottomCenter&#10;    ) {&#10;        Surface(&#10;            modifier = Modifier&#10;                .fillMaxWidth(navBarWidth)&#10;                .height(56.dp)&#10;                .align(Alignment.BottomCenter)&#10;                .padding(horizontal = horizontalPadding.dp),&#10;            color = Color.White,&#10;            shape = RoundedCornerShape(28.dp),&#10;            shadowElevation = 8.dp&#10;        ) {&#10;            // Empty surface for background&#10;        }&#10;&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth(navBarWidth)&#10;                .padding(horizontal = horizontalPadding.dp)&#10;                .height(navBarHeight.dp),&#10;            horizontalArrangement = Arrangement.SpaceAround,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            items.forEach { item -&gt;&#10;                if (item.isCentralButton) {&#10;                    Spacer(modifier = Modifier.weight(0.5f))&#10;&#10;                    CustomElevatedFab(&#10;                        icon = item.unselectedIcon, // Central button's icon doesn't change&#10;                        isSelected = currentRoute == item.route,&#10;                        fabSize = fabSize,&#10;                        iconSize = fabIconSize,&#10;                        onClick = {&#10;                            if (currentRoute != item.route) {&#10;                                navController.navigate(item.route) {&#10;                                    // Only pop up to the current screen and replace it&#10;                                    popUpTo(currentRoute ?: Routes.DASHBOARD) { &#10;                                        inclusive = true &#10;                                    }&#10;                                    launchSingleTop = true&#10;                                    restoreState = true&#10;                                }&#10;                            }&#10;                        }&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.weight(0.5f))&#10;                } else {&#10;                    CustomBottomNavItem(&#10;                        item = item,&#10;                        isSelected = currentRoute == item.route,&#10;                        iconSize = regularIconSize,&#10;                        onClick = {&#10;                            if (currentRoute != item.route) {&#10;                                navController.navigate(item.route) {&#10;                                    popUpTo(navController.graph.startDestinationId) {&#10;                                        saveState = true&#10;                                    }&#10;                                    launchSingleTop = true&#10;                                    restoreState = true&#10;                                }&#10;                            }&#10;                        },&#10;                        modifier = Modifier.weight(1f)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun CustomBottomNavItem(&#10;    item: BottomNavItem,&#10;    isSelected: Boolean,&#10;    onClick: () -&gt; Unit,&#10;    modifier: Modifier = Modifier,&#10;    iconSize: Int = 24&#10;) {&#10;    Column(&#10;        modifier = modifier&#10;            .clickable(onClick = onClick)&#10;            .padding(vertical = 8.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        verticalArrangement = Arrangement.Center&#10;    ) {&#10;        val iconToDisplay = if (isSelected) item.selectedIcon else item.unselectedIcon&#10;        Icon(&#10;            painter = painterResource(id = iconToDisplay),&#10;            contentDescription = null,&#10;            tint = if (isSelected) Color.Black else Color.Black,&#10;            modifier = Modifier.size(iconSize.dp)&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun CustomElevatedFab(&#10;    icon: Int,&#10;    isSelected: Boolean,&#10;    onClick: () -&gt; Unit,&#10;    fabSize: Int = 64,&#10;    iconSize: Int = 28,&#10;    strokeColor: Color = Color.White,&#10;    strokeWidth: Dp = 2.dp&#10;) {&#10;    Card(&#10;        modifier = Modifier&#10;            .size(fabSize.dp)&#10;            .offset(y = (-20).dp)&#10;            .border(&#10;                width = strokeWidth,&#10;                color = strokeColor,&#10;                shape = CircleShape&#10;            ),&#10;        shape = CircleShape,&#10;        colors = CardDefaults.cardColors(containerColor = Color.Black),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 10.dp)&#10;    ) {&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .clickable(onClick = onClick),&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            Icon(&#10;                painter = painterResource(id = icon),&#10;                contentDescription = null,&#10;                tint = Color.White,&#10;                modifier = Modifier.size(iconSize.dp)&#10;            )&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.neuroview.components&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.unit.Dp&#10;import androidx.compose.ui.unit.dp&#10;import androidx.navigation.NavController&#10;import com.example.neuroview.Routes&#10;import com.example.neuroview.R&#10;&#10;&#10;data class BottomNavItem(&#10;    val route: String,&#10;    val unselectedIcon: Int,&#10;    val selectedIcon: Int,&#10;    val isCentralButton: Boolean = false&#10;)&#10;&#10;@Composable&#10;fun BottomNavigationBar(&#10;    navController: NavController,&#10;    currentRoute: String?,&#10;    bottomPadding: Int = 16,&#10;    navBarHeight: Int = 80,&#10;    regularIconSize: Int = 32,&#10;    fabIconSize: Int = 32,&#10;    fabSize: Int = 64,&#10;    navBarWidth: Float = 0.6f,&#10;    horizontalPadding: Int = 16&#10;) {&#10;    val items = listOf(&#10;        BottomNavItem(Routes.DASHBOARD, R.drawable.ic_home, R.drawable.ic_home_filled),&#10;        BottomNavItem(Routes.UPLOAD_IMAGE, R.drawable.ic_cloud_upload, R.drawable.ic_cloud_upload, isCentralButton = true),&#10;        BottomNavItem(Routes.PAST_RECORDS, R.drawable.ic_folder, R.drawable.ic_folder_filled)&#10;    )&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .height(navBarHeight.dp)&#10;            .background(Color.Transparent)&#10;            .padding(bottom = bottomPadding.dp),&#10;        contentAlignment = Alignment.BottomCenter&#10;    ) {&#10;        Surface(&#10;            modifier = Modifier&#10;                .fillMaxWidth(navBarWidth)&#10;                .height(56.dp)&#10;                .align(Alignment.BottomCenter)&#10;                .padding(horizontal = horizontalPadding.dp),&#10;            color = Color.White,&#10;            shape = RoundedCornerShape(28.dp),&#10;            shadowElevation = 8.dp&#10;        ) {&#10;            // Empty surface for background&#10;        }&#10;&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth(navBarWidth)&#10;                .padding(horizontal = horizontalPadding.dp)&#10;                .height(navBarHeight.dp),&#10;            horizontalArrangement = Arrangement.SpaceAround,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            items.forEach { item -&gt;&#10;                if (item.isCentralButton) {&#10;                    Spacer(modifier = Modifier.weight(0.5f))&#10;&#10;                    CustomElevatedFab(&#10;                        icon = item.unselectedIcon, // Central button's icon doesn't change&#10;                        isSelected = currentRoute == item.route,&#10;                        fabSize = fabSize,&#10;                        iconSize = fabIconSize,&#10;                        onClick = {&#10;                            if (currentRoute != item.route) {&#10;                                navController.navigate(item.route) {&#10;                                    // Only pop up to the current screen and replace it&#10;                                    popUpTo(currentRoute ?: Routes.DASHBOARD) { &#10;                                        inclusive = true &#10;                                    }&#10;                                    launchSingleTop = true&#10;                                    restoreState = true&#10;                                }&#10;                            }&#10;                        }&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.weight(0.5f))&#10;                } else {&#10;                    CustomBottomNavItem(&#10;                        item = item,&#10;                        isSelected = currentRoute == item.route,&#10;                        iconSize = regularIconSize,&#10;                        onClick = {&#10;                            if (currentRoute != item.route) {&#10;                                navController.navigate(item.route) {&#10;                                    // Only pop up to the current screen and replace it&#10;                                    popUpTo(currentRoute ?: Routes.DASHBOARD) { &#10;                                        inclusive = true &#10;                                    }&#10;                                    launchSingleTop = true&#10;                                    restoreState = true&#10;                                }&#10;                            }&#10;                        },&#10;                        modifier = Modifier.weight(1f)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun CustomBottomNavItem(&#10;    item: BottomNavItem,&#10;    isSelected: Boolean,&#10;    onClick: () -&gt; Unit,&#10;    modifier: Modifier = Modifier,&#10;    iconSize: Int = 24&#10;) {&#10;    Column(&#10;        modifier = modifier&#10;            .clickable(onClick = onClick)&#10;            .padding(vertical = 8.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        verticalArrangement = Arrangement.Center&#10;    ) {&#10;        val iconToDisplay = if (isSelected) item.selectedIcon else item.unselectedIcon&#10;        Icon(&#10;            painter = painterResource(id = iconToDisplay),&#10;            contentDescription = null,&#10;            tint = if (isSelected) Color.Black else Color.Black,&#10;            modifier = Modifier.size(iconSize.dp)&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;fun CustomElevatedFab(&#10;    icon: Int,&#10;    isSelected: Boolean,&#10;    onClick: () -&gt; Unit,&#10;    fabSize: Int = 64,&#10;    iconSize: Int = 28,&#10;    strokeColor: Color = Color.White,&#10;    strokeWidth: Dp = 2.dp&#10;) {&#10;    Card(&#10;        modifier = Modifier&#10;            .size(fabSize.dp)&#10;            .offset(y = (-20).dp)&#10;            .border(&#10;                width = strokeWidth,&#10;                color = strokeColor,&#10;                shape = CircleShape&#10;            ),&#10;        shape = CircleShape,&#10;        colors = CardDefaults.cardColors(containerColor = Color.Black),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 10.dp)&#10;    ) {&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .clickable(onClick = onClick),&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            Icon(&#10;                painter = painterResource(id = icon),&#10;                contentDescription = null,&#10;                tint = Color.White,&#10;                modifier = Modifier.size(iconSize.dp)&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/neuroview/components/TopAppBar.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/neuroview/components/TopAppBar.kt" />
              <option name="originalContent" value="package com.example.neuroview.components&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import com.example.neuroview.R&#10;&#10;@Composable&#10;fun TopAppBar(&#10;    backgroundColor: Color = Color.Black, // Changed to black to match the image&#10;    textColor: Color = Color.White,     // Changed to white to match the image&#10;    logoSize: Int = 36,                 // Adjusted for a slightly larger logo relative to text&#10;    titleFontSize: Int = 24,            // Kept as is, matches visual&#10;    barHeight: Int = 64,&#10;    horizontalPadding: Int = 18&#10;) {&#10;    Surface(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .height(barHeight.dp),&#10;        color = backgroundColor,&#10;        shadowElevation = 0.dp&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(horizontal = horizontalPadding.dp),&#10;            verticalAlignment = Alignment.CenterVertically,&#10;            horizontalArrangement = Arrangement.Center&#10;        ) {&#10;            // Logo&#10;            Image(&#10;                painter = painterResource(id = R.drawable.topbar_logo), // You can change this to your app logo&#10;                contentDescription = &quot;NeuroView Logo&quot;,&#10;                modifier = Modifier&#10;                    .size(logoSize.dp)&#10;                    .padding(end = 8.dp)&#10;            )&#10;&#10;            // App Title&#10;            Text(&#10;                text = &quot;NeuroView&quot;,&#10;                fontSize = titleFontSize.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                color = textColor&#10;            )&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.neuroview.components&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import com.example.neuroview.R&#10;&#10;@Composable&#10;fun TopAppBar(&#10;    backgroundColor: Color = Color.Black, // Changed to black to match the image&#10;    textColor: Color = Color.White,     // Changed to white to match the image&#10;    logoSize: Int = 36,                 // Adjusted for a slightly larger logo relative to text&#10;    titleFontSize: Int = 24,            // Kept as is, matches visual&#10;    barHeight: Int = 64,&#10;    horizontalPadding: Int = 18,&#10;    topPadding: Int = 0,        // Add vertical padding from top&#10;    bottomPadding: Int = 0,     // Add vertical padding from bottom&#10;    verticalOffset: Int = 0     // Add vertical offset to move entire bar up/down&#10;) {&#10;    Surface(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .height((barHeight + topPadding + bottomPadding).dp)&#10;            .offset(y = verticalOffset.dp), // Apply vertical offset&#10;        color = backgroundColor,&#10;        shadowElevation = 0.dp&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(&#10;                    horizontal = horizontalPadding.dp,&#10;                    top = topPadding.dp,&#10;                    bottom = bottomPadding.dp&#10;                ),&#10;            verticalAlignment = Alignment.CenterVertically,&#10;            horizontalArrangement = Arrangement.Center&#10;        ) {&#10;            // Logo&#10;            Image(&#10;                painter = painterResource(id = R.drawable.topbar_logo), // You can change this to your app logo&#10;                contentDescription = &quot;NeuroView Logo&quot;,&#10;                modifier = Modifier&#10;                    .size(logoSize.dp)&#10;                    .padding(end = 8.dp)&#10;            )&#10;&#10;            // App Title&#10;            Text(&#10;                text = &quot;NeuroView&quot;,&#10;                fontSize = titleFontSize.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                color = textColor&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/neuroview/screens/DashboardScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/neuroview/screens/DashboardScreen.kt" />
              <option name="originalContent" value="package com.example.neuroview.screens&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;import com.example.neuroview.Routes&#10;import com.example.neuroview.components.BottomNavigationBar&#10;import com.example.neuroview.components.TopAppBar&#10;import com.example.neuroview.R // Make sure R is imported to access drawables&#10;&#10;// Accompanist Pager imports&#10;import com.google.accompanist.pager.ExperimentalPagerApi&#10;import com.google.accompanist.pager.HorizontalPager&#10;import com.google.accompanist.pager.rememberPagerState&#10;import com.google.accompanist.pager.HorizontalPagerIndicator&#10;&#10;@OptIn(ExperimentalPagerApi::class) // Needed for Accompanist Pager&#10;@Composable&#10;fun DashboardScreen(navController: NavController) {&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                backgroundColor = Color.Black,&#10;                textColor = Color.White,&#10;                logoSize = 42,&#10;                titleFontSize = 28&#10;            )&#10;        },&#10;        bottomBar = {&#10;            BottomNavigationBar(&#10;                navController = navController,&#10;                currentRoute = Routes.DASHBOARD,&#10;                bottomPadding = 18,&#10;                navBarHeight = 80,&#10;                regularIconSize = 32,&#10;                fabIconSize = 32,&#10;                fabSize = 64,&#10;                navBarWidth = 0.8f,&#10;                horizontalPadding = 16&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .background(Color.Black)&#10;                .padding(paddingValues), // Apply scaffold padding&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            // &quot;LEARN&quot; Text - placed outside the padding of the carousel&#10;            Text(&#10;                text = &quot;LEARN&quot;,&#10;                fontSize = 18.sp,&#10;                fontWeight = FontWeight.Medium,&#10;                color = Color.White,&#10;                modifier = Modifier.padding(top = 16.dp, bottom = 8.dp) // Adjust padding as needed&#10;            )&#10;&#10;            // Placeholder image resources&#10;            // IMPORTANT: Replace these with your actual drawable resource IDs.&#10;            // For example, R.drawable.glioma_image, R.drawable.some_other_brain_scan, etc.&#10;            val carouselImages = listOf(&#10;                R.drawable.sample_glioma_image,&#10;                R.drawable.sample_glioma_image,&#10;                R.drawable.sample_glioma_image,// You'll need to add these drawables&#10;            )&#10;&#10;            val pagerState = rememberPagerState(initialPage = 0)&#10;&#10;            // Carousel / Horizontal Pager&#10;            HorizontalPager(&#10;                count = carouselImages.size,&#10;                state = pagerState,&#10;                // Adjust content padding to create space around the pager content&#10;                contentPadding = PaddingValues(horizontal = 32.dp),&#10;                itemSpacing = 16.dp, // Space between items&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(300.dp) // Adjust height as needed for your images&#10;            ) { page -&gt;&#10;                // Individual page content for the carousel&#10;                Card(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .aspectRatio(1f) // Maintain aspect ratio, adjust as needed&#10;                        .background(Color.Transparent, RoundedCornerShape(16.dp)), // Transparent background for Card&#10;                    shape = RoundedCornerShape(16.dp),&#10;                    colors = CardDefaults.cardColors(containerColor = Color.Transparent), // Transparent Card container&#10;                    elevation = CardDefaults.cardElevation(defaultElevation = 0.dp) // No elevation for the card itself, as the content has a border&#10;                ) {&#10;                    // This Box creates the white border effect&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .fillMaxSize()&#10;                            .background(Color.Black) // Background of the actual image container&#10;                            .padding(2.dp) // This creates the white border&#10;                            .background(Color.White, RoundedCornerShape(16.dp)) // White background for the border&#10;                            .clip(RoundedCornerShape(16.dp)) // Clip content to rounded corners&#10;                    ) {&#10;                        Column(&#10;                            modifier = Modifier.fillMaxSize()&#10;                        ) {&#10;                            // Image&#10;                            Image(&#10;                                painter = painterResource(id = carouselImages[page]),&#10;                                contentDescription = null,&#10;                                contentScale = ContentScale.Crop, // Crop to fill the bounds&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .weight(1f) // Take up available vertical space above text&#10;                                    .clip(RoundedCornerShape(topStart = 16.dp, topEnd = 16.dp)) // Only top corners rounded for image&#10;                            )&#10;&#10;                            // Text below the image, within the white border&#10;                            Column(&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .background(Color.White) // Background for the text section&#10;                                    .padding(horizontal = 16.dp, vertical = 12.dp)&#10;                                    .weight(0.3f), // Allocate some vertical space for text&#10;                                horizontalAlignment = Alignment.Start,&#10;                                verticalArrangement = Arrangement.Center&#10;                            ) {&#10;                                Row(&#10;                                    modifier = Modifier.fillMaxWidth(),&#10;                                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                                    verticalAlignment = Alignment.CenterVertically&#10;                                ) {&#10;                                    Text(&#10;                                        text = &quot;Glioma&quot;, // Example text, replace with actual data&#10;                                        fontSize = 20.sp,&#10;                                        fontWeight = FontWeight.Bold,&#10;                                        color = Color.Black&#10;                                    )&#10;                                    Icon(&#10;                                        painter = painterResource(id = R.drawable.ic_readmore), // Assuming you have an arrow icon&#10;                                        contentDescription = &quot;Go to details&quot;,&#10;                                        tint = Color.Black,&#10;                                        modifier = Modifier.size(24.dp)&#10;                                    )&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(16.dp)) // Space between pager and indicator&#10;&#10;            // Pager Indicator&#10;            HorizontalPagerIndicator(&#10;                pagerState = pagerState,&#10;                modifier = Modifier&#10;                    .align(Alignment.CenterHorizontally),&#10;                activeColor = Color.White, // Color of the current page indicator&#10;                inactiveColor = Color.Gray, // Color of inactive page indicators&#10;                indicatorWidth = 8.dp,&#10;                indicatorHeight = 8.dp,&#10;                spacing = 8.dp&#10;            )&#10;&#10;            // You can keep your existing dashboard texts if they are below the carousel&#10;            // Or remove them if the carousel is the primary content.&#10;            // For now, I'm assuming they are still part of the dashboard content&#10;            // below the carousel and indicator.&#10;            Text(&#10;                text = &quot;This is the Dashboard screen where you can view your overview and statistics.&quot;,&#10;                fontSize = 16.sp,&#10;                color = Color.White,&#10;                modifier = Modifier.padding(top = 32.dp, start = 16.dp, end = 16.dp)&#10;            )&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.neuroview.screens&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;import com.example.neuroview.Routes&#10;import com.example.neuroview.components.BottomNavigationBar&#10;import com.example.neuroview.components.TopAppBar&#10;import com.example.neuroview.R // Make sure R is imported to access drawables&#10;&#10;// Accompanist Pager imports&#10;import com.google.accompanist.pager.ExperimentalPagerApi&#10;import com.google.accompanist.pager.HorizontalPager&#10;import com.google.accompanist.pager.rememberPagerState&#10;import com.google.accompanist.pager.HorizontalPagerIndicator&#10;&#10;@OptIn(ExperimentalPagerApi::class) // Needed for Accompanist Pager&#10;@Composable&#10;fun DashboardScreen(navController: NavController) {&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                backgroundColor = Color.Black,&#10;                textColor = Color.White,&#10;                logoSize = 42,&#10;                titleFontSize = 28&#10;            )&#10;        },&#10;        bottomBar = {&#10;            BottomNavigationBar(&#10;                navController = navController,&#10;                currentRoute = Routes.DASHBOARD,&#10;                bottomPadding = 18,&#10;                navBarHeight = 80,&#10;                regularIconSize = 32,&#10;                fabIconSize = 32,&#10;                fabSize = 64,&#10;                navBarWidth = 0.8f,&#10;                horizontalPadding = 16&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .background(Color.Black)&#10;                .padding(paddingValues), // Apply scaffold padding&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            // &quot;LEARN&quot; Text - placed outside the padding of the carousel&#10;            Text(&#10;                text = &quot;LEARN&quot;,&#10;                fontSize = 18.sp,&#10;                fontWeight = FontWeight.Medium,&#10;                color = Color.White,&#10;                modifier = Modifier.padding(top = 16.dp, bottom = 8.dp) // Adjust padding as needed&#10;            )&#10;&#10;            // Placeholder image resources&#10;            // IMPORTANT: Replace these with your actual drawable resource IDs.&#10;            // For example, R.drawable.glioma_image, R.drawable.some_other_brain_scan, etc.&#10;            val carouselImages = listOf(&#10;                R.drawable.sample_glioma_image,&#10;                R.drawable.sample_glioma_image,&#10;                R.drawable.sample_glioma_image,// You'll need to add these drawables&#10;            )&#10;&#10;            val pagerState = rememberPagerState(initialPage = 0)&#10;&#10;            // Carousel / Horizontal Pager&#10;            HorizontalPager(&#10;                count = carouselImages.size,&#10;                state = pagerState,&#10;                // Adjust content padding to create space around the pager content&#10;                contentPadding = PaddingValues(horizontal = 32.dp),&#10;                itemSpacing = 16.dp, // Space between items&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(300.dp) // Adjust height as needed for your images&#10;            ) { page -&gt;&#10;                // Individual page content for the carousel&#10;                Card(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .aspectRatio(1f) // Maintain aspect ratio, adjust as needed&#10;                        .background(Color.Transparent, RoundedCornerShape(16.dp)), // Transparent background for Card&#10;                    shape = RoundedCornerShape(16.dp),&#10;                    colors = CardDefaults.cardColors(containerColor = Color.Transparent), // Transparent Card container&#10;                    elevation = CardDefaults.cardElevation(defaultElevation = 0.dp) // No elevation for the card itself, as the content has a border&#10;                ) {&#10;                    // This Box creates the white border effect&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .fillMaxSize()&#10;                            .background(Color.Black) // Background of the actual image container&#10;                            .padding(2.dp) // This creates the white border&#10;                            .background(Color.White, RoundedCornerShape(16.dp)) // White background for the border&#10;                            .clip(RoundedCornerShape(16.dp)) // Clip content to rounded corners&#10;                    ) {&#10;                        Column(&#10;                            modifier = Modifier.fillMaxSize()&#10;                        ) {&#10;                            // Image&#10;                            Image(&#10;                                painter = painterResource(id = carouselImages[page]),&#10;                                contentDescription = null,&#10;                                contentScale = ContentScale.Crop, // Crop to fill the bounds&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .weight(1f) // Take up available vertical space above text&#10;                                    .clip(RoundedCornerShape(topStart = 16.dp, topEnd = 16.dp)) // Only top corners rounded for image&#10;                            )&#10;&#10;                            // Text below the image, within the white border&#10;                            Column(&#10;                                modifier = Modifier&#10;                                    .fillMaxWidth()&#10;                                    .background(Color.White) // Background for the text section&#10;                                    .padding(horizontal = 16.dp, vertical = 12.dp)&#10;                                    .weight(0.3f), // Allocate some vertical space for text&#10;                                horizontalAlignment = Alignment.Start,&#10;                                verticalArrangement = Arrangement.Center&#10;                            ) {&#10;                                Row(&#10;                                    modifier = Modifier.fillMaxWidth(),&#10;                                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                                    verticalAlignment = Alignment.CenterVertically&#10;                                ) {&#10;                                    Text(&#10;                                        text = &quot;Glioma&quot;, // Example text, replace with actual data&#10;                                        fontSize = 20.sp,&#10;                                        fontWeight = FontWeight.Bold,&#10;                                        color = Color.Black&#10;                                    )&#10;                                    Icon(&#10;                                        painter = painterResource(id = R.drawable.ic_readmore), // Assuming you have an arrow icon&#10;                                        contentDescription = &quot;Go to details&quot;,&#10;                                        tint = Color.Black,&#10;                                        modifier = Modifier.size(24.dp)&#10;                                    )&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(16.dp)) // Space between pager and indicator&#10;&#10;            // Pager Indicator&#10;            HorizontalPagerIndicator(&#10;                pagerState = pagerState,&#10;                modifier = Modifier&#10;                    .align(Alignment.CenterHorizontally),&#10;                activeColor = Color.White, // Color of the current page indicator&#10;                inactiveColor = Color.Gray, // Color of inactive page indicators&#10;                indicatorWidth = 8.dp,&#10;                indicatorHeight = 8.dp,&#10;                spacing = 8.dp&#10;            )&#10;&#10;            // You can keep your existing dashboard texts if they are below the carousel&#10;            // Or remove them if the carousel is the primary content.&#10;            // For now, I'm assuming they are still part of the dashboard content&#10;            // below the carousel and indicator.&#10;            Text(&#10;                text = &quot;This is the Dashboard screen where you can view your overview and statistics.&quot;,&#10;                fontSize = 16.sp,&#10;                color = Color.White,&#10;                modifier = Modifier.padding(top = 32.dp, start = 16.dp, end = 16.dp)&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;// Preview function for DashboardScreen&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun DashboardScreenPreview() {&#10;    // Mock NavController for preview&#10;    val mockNavController = rememberNavController()&#10;    &#10;    DashboardScreen(navController = mockNavController)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/neuroview/screens/PastRecordsScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/neuroview/screens/PastRecordsScreen.kt" />
              <option name="originalContent" value="package com.example.neuroview.screens&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;import com.example.neuroview.Routes&#10;import com.example.neuroview.components.BottomNavigationBar&#10;&#10;@Composable&#10;fun PastRecordsScreen(navController: NavController) {&#10;    Scaffold(&#10;        bottomBar = {&#10;            BottomNavigationBar(&#10;                navController = navController,&#10;                currentRoute = Routes.PAST_RECORDS,&#10;                bottomPadding = 18, // Adjust this value to move navbar up/down&#10;                navBarHeight = 80,  // Adjust this to change navbar height&#10;                regularIconSize = 32, // Size for regular nav icons&#10;                fabIconSize = 32,     // Size for the elevated FAB icon&#10;                fabSize = 64,          // Size of the entire FAB button&#10;                navBarWidth= 0.8f,      // Controls the width as a fraction (0.8f = 80% width)&#10;                horizontalPadding = 16   // Controls the horizontal margins&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .background(Color.Black)&#10;                .padding(paddingValues)&#10;                .padding(16.dp),&#10;            verticalArrangement = Arrangement.Center,&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Text(&#10;                text = &quot;Past Records&quot;,&#10;                fontSize = 32.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                color = Color.White,&#10;                modifier = Modifier.padding(bottom = 32.dp)&#10;            )&#10;&#10;            Text(&#10;                text = &quot;This is the Past Records screen where you can view your historical data and previous analyses.&quot;,&#10;                fontSize = 16.sp,&#10;&#10;                color = Color.White,&#10;                modifier = Modifier.padding(bottom = 32.dp)&#10;            )&#10;&#10;            Button(&#10;                onClick = { navController.navigate(Routes.HOME) }&#10;            ) {&#10;                Text(&quot;Back to Home&quot;)&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.neuroview.screens&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;import com.example.neuroview.Routes&#10;import com.example.neuroview.components.BottomNavigationBar&#10;import com.example.neuroview.components.TopAppBar&#10;&#10;@Composable&#10;fun PastRecordsScreen(navController: NavController) {&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                backgroundColor = Color.Black,&#10;                textColor = Color.White,&#10;                logoSize = 36,&#10;                titleFontSize = 28&#10;            )&#10;        },&#10;        bottomBar = {&#10;            BottomNavigationBar(&#10;                navController = navController,&#10;                currentRoute = Routes.PAST_RECORDS,&#10;                bottomPadding = 18, // Adjust this value to move navbar up/down&#10;                navBarHeight = 80,  // Adjust this to change navbar height&#10;                regularIconSize = 32, // Size for regular nav icons&#10;                fabIconSize = 32,     // Size for the elevated FAB icon&#10;                fabSize = 64,          // Size of the entire FAB button&#10;                navBarWidth= 0.8f,      // Controls the width as a fraction (0.8f = 80% width)&#10;                horizontalPadding = 16   // Controls the horizontal margins&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .background(Color.Black)&#10;                .padding(paddingValues)&#10;                .padding(16.dp),&#10;            verticalArrangement = Arrangement.Center,&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Text(&#10;                text = &quot;Past Records&quot;,&#10;                fontSize = 32.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                color = Color.White,&#10;                modifier = Modifier.padding(bottom = 32.dp)&#10;            )&#10;&#10;            Text(&#10;                text = &quot;This is the Past Records screen where you can view your historical data and previous analyses.&quot;,&#10;                fontSize = 16.sp,&#10;&#10;                color = Color.White,&#10;                modifier = Modifier.padding(bottom = 32.dp)&#10;            )&#10;&#10;            Button(&#10;                onClick = { navController.navigate(Routes.HOME) }&#10;            ) {&#10;                Text(&quot;Back to Home&quot;)&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/neuroview/screens/UploadImageScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/neuroview/screens/UploadImageScreen.kt" />
              <option name="originalContent" value="package com.example.neuroview.screens&#10;&#10;import android.net.Uri&#10;import android.provider.OpenableColumns&#10;import android.widget.Toast&#10;import androidx.activity.compose.rememberLauncherForActivityResult&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.compose.foundation.Canvas&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Delete&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.geometry.CornerRadius&#10;import androidx.compose.ui.geometry.Size&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.PathEffect&#10;import androidx.compose.ui.graphics.drawscope.Stroke&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;import androidx.navigation.compose.rememberNavController&#10;import com.example.neuroview.R&#10;import com.example.neuroview.Routes&#10;import com.example.neuroview.components.TopAppBar&#10;import com.example.neuroview.ui.theme.NeuroViewTheme&#10;&#10;@Composable&#10;fun UploadImageScreen(navController: NavController) {&#10;    val context = LocalContext.current&#10;    var selectedImageUri by remember { mutableStateOf&lt;Uri?&gt;(null) }&#10;&#10;    val imagePickerLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.GetContent()&#10;    ) { uri -&gt;&#10;        uri?.let {&#10;            selectedImageUri = it&#10;            Toast.makeText(context, &quot;Image selected&quot;, Toast.LENGTH_SHORT).show()&#10;        }&#10;    }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                backgroundColor = Color.Black,&#10;                textColor = Color.White,&#10;                logoSize = 42,&#10;                titleFontSize = 28&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .background(Color.Black)&#10;                .padding(paddingValues)&#10;                .padding(16.dp)&#10;                .verticalScroll(rememberScrollState()),&#10;            verticalArrangement = Arrangement.Top,&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                modifier = Modifier.fillMaxWidth()&#10;            ) {&#10;                Box(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    Text(&#10;                        text = &quot;UPLOAD&quot;,&#10;                        fontSize = 20.sp,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = Color(0xFF737373)&#10;                    )&#10;                    IconButton(&#10;                        onClick = {&#10;                            navController.navigate(Routes.DASHBOARD) {&#10;                                popUpTo(Routes.DASHBOARD) { inclusive = false }&#10;                            }&#10;                        },&#10;                        modifier = Modifier.align(Alignment.CenterStart)&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.ArrowBack,&#10;                            contentDescription = &quot;Back&quot;,&#10;                            tint = Color(0xFF737373)&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            selectedImageUri?.let { uri -&gt;&#10;                ImageInfoBox(uri = uri, onDelete = { selectedImageUri = null })&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;            }&#10;&#10;            DashedBorderBox(onClick = {&#10;                imagePickerLauncher.launch(&quot;image/*&quot;)&#10;            })&#10;&#10;            Spacer(modifier = Modifier.height(32.dp))&#10;&#10;            Button(&#10;                onClick = { /* Start analysis */ },&#10;                colors = ButtonDefaults.buttonColors(containerColor = Color.White),&#10;                modifier = Modifier.fillMaxWidth(),&#10;                enabled = selectedImageUri != null&#10;            ) {&#10;                Text(&quot;Start Analysis&quot;, color = Color.Black)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun DashedBorderBox(onClick: () -&gt; Unit) {&#10;    val cornerRadius = 12.dp&#10;    val boxHeight = 550.dp&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .height(boxHeight)&#10;            .padding(4.dp)&#10;            .clickable { onClick() },&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Canvas(modifier = Modifier.fillMaxSize()) {&#10;            val dashLength = 10.dp.toPx()&#10;            val gapLength = 10.dp.toPx()&#10;            drawRoundRect(&#10;                color = Color.White,&#10;                size = Size(size.width, size.height),&#10;                cornerRadius = CornerRadius(cornerRadius.toPx(), cornerRadius.toPx()),&#10;                style = Stroke(&#10;                    width = 2.dp.toPx(),&#10;                    pathEffect = PathEffect.dashPathEffect(&#10;                        floatArrayOf(dashLength, gapLength), 0f&#10;                    )&#10;                )&#10;            )&#10;        }&#10;&#10;        Column(&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            modifier = Modifier.padding(16.dp)&#10;        ) {&#10;            Icon(&#10;                painter = painterResource(id = R.drawable.ic_cloud_upload),&#10;                contentDescription = &quot;Upload Icon&quot;,&#10;                tint = Color.White,&#10;                modifier = Modifier.size(48.dp)&#10;            )&#10;            Text(&#10;                text = &quot;Browse Files&quot;,&#10;                fontSize = 16.sp,&#10;                color = Color.White,&#10;                fontWeight = FontWeight.SemiBold&#10;            )&#10;            Spacer(modifier = Modifier.height(4.dp))&#10;            Text(&#10;                text = &quot;Supported Formats: JPEG, PNG&quot;,&#10;                fontSize = 12.sp,&#10;                color = Color.White&#10;            )&#10;            Spacer(modifier = Modifier.height(2.dp))&#10;            Text(&#10;                text = &quot;Upload Limit: 1 image file only.&quot;,&#10;                fontSize = 12.sp,&#10;                color = Color.White&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ImageInfoBox(uri: Uri, onDelete: () -&gt; Unit) {&#10;    val context = LocalContext.current&#10;&#10;    val fileName = remember(uri) {&#10;        var name = &quot;Unknown&quot;&#10;        val cursor = context.contentResolver.query(uri, null, null, null, null)&#10;        cursor?.use {&#10;            val nameIndex = it.getColumnIndex(OpenableColumns.DISPLAY_NAME)&#10;            if (it.moveToFirst() &amp;&amp; nameIndex != -1) {&#10;                name = it.getString(nameIndex)&#10;            }&#10;        }&#10;        name&#10;    }&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .height(80.dp)&#10;            .border(width = 2.dp, color = Color.White, shape = MaterialTheme.shapes.medium)&#10;            .padding(horizontal = 12.dp, vertical = 8.dp)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier.fillMaxSize(),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Text(&#10;                text = fileName,&#10;                color = Color.White,&#10;                fontSize = 14.sp,&#10;                maxLines = 1,&#10;                modifier = Modifier.weight(1f)&#10;            )&#10;            IconButton(onClick = { onDelete() }) {&#10;                Icon(&#10;                    imageVector = Icons.Default.Delete,&#10;                    contentDescription = &quot;Delete&quot;,&#10;                    tint = Color.White&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun UploadImageScreenPreview() {&#10;    NeuroViewTheme {&#10;        UploadImageScreen(rememberNavController())&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.neuroview.screens&#10;&#10;import android.net.Uri&#10;import android.provider.OpenableColumns&#10;import android.widget.Toast&#10;import androidx.activity.compose.rememberLauncherForActivityResult&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.compose.foundation.Canvas&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Delete&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.geometry.CornerRadius&#10;import androidx.compose.ui.geometry.Size&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.PathEffect&#10;import androidx.compose.ui.graphics.drawscope.Stroke&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;import androidx.navigation.compose.rememberNavController&#10;import com.example.neuroview.R&#10;import com.example.neuroview.Routes&#10;import com.example.neuroview.components.TopAppBar&#10;import com.example.neuroview.ui.theme.NeuroViewTheme&#10;&#10;@Composable&#10;fun UploadImageScreen(navController: NavController) {&#10;    val context = LocalContext.current&#10;    var selectedImageUri by remember { mutableStateOf&lt;Uri?&gt;(null) }&#10;&#10;    val imagePickerLauncher = rememberLauncherForActivityResult(&#10;        contract = ActivityResultContracts.GetContent()&#10;    ) { uri -&gt;&#10;        uri?.let {&#10;            selectedImageUri = it&#10;            Toast.makeText(context, &quot;Image selected&quot;, Toast.LENGTH_SHORT).show()&#10;        }&#10;    }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                backgroundColor = Color.Black,&#10;                textColor = Color.White,&#10;                logoSize = 42,&#10;                titleFontSize = 28&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .background(Color.Black)&#10;                .padding(paddingValues)&#10;                .padding(16.dp),&#10;            verticalArrangement = Arrangement.Top,&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                modifier = Modifier.fillMaxWidth()&#10;            ) {&#10;                Box(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    Text(&#10;                        text = &quot;UPLOAD&quot;,&#10;                        fontSize = 20.sp,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = Color(0xFF737373)&#10;                    )&#10;                    IconButton(&#10;                        onClick = {&#10;                            navController.navigate(Routes.DASHBOARD) {&#10;                                popUpTo(Routes.DASHBOARD) { inclusive = false }&#10;                            }&#10;                        },&#10;                        modifier = Modifier.align(Alignment.CenterStart)&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.ArrowBack,&#10;                            contentDescription = &quot;Back&quot;,&#10;                            tint = Color(0xFF737373)&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            selectedImageUri?.let { uri -&gt;&#10;                ImageInfoBox(uri = uri, onDelete = { selectedImageUri = null })&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;            }&#10;&#10;            DashedBorderBox(onClick = {&#10;                imagePickerLauncher.launch(&quot;image/*&quot;)&#10;            })&#10;&#10;            Spacer(modifier = Modifier.height(32.dp))&#10;&#10;            Button(&#10;                onClick = { /* Start analysis */ },&#10;                colors = ButtonDefaults.buttonColors(containerColor = Color.White),&#10;                modifier = Modifier.fillMaxWidth(),&#10;                enabled = selectedImageUri != null&#10;            ) {&#10;                Text(&quot;Start Analysis&quot;, color = Color.Black)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun DashedBorderBox(onClick: () -&gt; Unit) {&#10;    val cornerRadius = 12.dp&#10;    val boxHeight = 550.dp&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .height(boxHeight)&#10;            .padding(4.dp)&#10;            .clickable { onClick() },&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Canvas(modifier = Modifier.fillMaxSize()) {&#10;            val dashLength = 10.dp.toPx()&#10;            val gapLength = 10.dp.toPx()&#10;            drawRoundRect(&#10;                color = Color.White,&#10;                size = Size(size.width, size.height),&#10;                cornerRadius = CornerRadius(cornerRadius.toPx(), cornerRadius.toPx()),&#10;                style = Stroke(&#10;                    width = 2.dp.toPx(),&#10;                    pathEffect = PathEffect.dashPathEffect(&#10;                        floatArrayOf(dashLength, gapLength), 0f&#10;                    )&#10;                )&#10;            )&#10;        }&#10;&#10;        Column(&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            modifier = Modifier.padding(16.dp)&#10;        ) {&#10;            Icon(&#10;                painter = painterResource(id = R.drawable.ic_cloud_upload),&#10;                contentDescription = &quot;Upload Icon&quot;,&#10;                tint = Color.White,&#10;                modifier = Modifier.size(48.dp)&#10;            )&#10;            Text(&#10;                text = &quot;Browse Files&quot;,&#10;                fontSize = 16.sp,&#10;                color = Color.White,&#10;                fontWeight = FontWeight.SemiBold&#10;            )&#10;            Spacer(modifier = Modifier.height(4.dp))&#10;            Text(&#10;                text = &quot;Supported Formats: JPEG, PNG&quot;,&#10;                fontSize = 12.sp,&#10;                color = Color.White&#10;            )&#10;            Spacer(modifier = Modifier.height(2.dp))&#10;            Text(&#10;                text = &quot;Upload Limit: 1 image file only.&quot;,&#10;                fontSize = 12.sp,&#10;                color = Color.White&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun ImageInfoBox(uri: Uri, onDelete: () -&gt; Unit) {&#10;    val context = LocalContext.current&#10;&#10;    val fileName = remember(uri) {&#10;        var name = &quot;Unknown&quot;&#10;        val cursor = context.contentResolver.query(uri, null, null, null, null)&#10;        cursor?.use {&#10;            val nameIndex = it.getColumnIndex(OpenableColumns.DISPLAY_NAME)&#10;            if (it.moveToFirst() &amp;&amp; nameIndex != -1) {&#10;                name = it.getString(nameIndex)&#10;            }&#10;        }&#10;        name&#10;    }&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .height(80.dp)&#10;            .border(width = 2.dp, color = Color.White, shape = MaterialTheme.shapes.medium)&#10;            .padding(horizontal = 12.dp, vertical = 8.dp)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier.fillMaxSize(),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            Text(&#10;                text = fileName,&#10;                color = Color.White,&#10;                fontSize = 14.sp,&#10;                maxLines = 1,&#10;                modifier = Modifier.weight(1f)&#10;            )&#10;            IconButton(onClick = { onDelete() }) {&#10;                Icon(&#10;                    imageVector = Icons.Default.Delete,&#10;                    contentDescription = &quot;Delete&quot;,&#10;                    tint = Color.White&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun UploadImageScreenPreview() {&#10;    NeuroViewTheme {&#10;        UploadImageScreen(rememberNavController())&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>